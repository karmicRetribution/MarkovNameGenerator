// Generated by Haxe 3.4.7
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
var ID = function() { };
ID.__name__ = true;
var TrainingDatas = function() { };
TrainingDatas.__name__ = true;
var _$Main_TrainingData = function(value,displayName,data) {
	this.value = value;
	this.displayName = displayName;
	this.data = data;
};
_$Main_TrainingData.__name__ = true;
var _$Main_CustomQueryStringOption = { __ename__ : true, __constructs__ : ["EVERYTHING","NO_TRAINING_DATA"] };
_$Main_CustomQueryStringOption.EVERYTHING = ["EVERYTHING",0];
_$Main_CustomQueryStringOption.EVERYTHING.__enum__ = _$Main_CustomQueryStringOption;
_$Main_CustomQueryStringOption.NO_TRAINING_DATA = ["NO_TRAINING_DATA",1];
_$Main_CustomQueryStringOption.NO_TRAINING_DATA.__enum__ = _$Main_CustomQueryStringOption;
var Main = function() {
	this.lastNames = [];
	this.shareLinkTextEdit = window.document.getElementById("shareedit");
	this.shareResultsOnlyElement = window.document.getElementById("shareresultsonly");
	this.shareResultsAndSettingsElement = window.document.getElementById("shareresultsandsettings");
	this.regexMatchElement = window.document.getElementById("regexmatch");
	this.similarElement = window.document.getElementById("similar");
	this.excludesElement = window.document.getElementById("excludes");
	this.includesElement = window.document.getElementById("includes");
	this.endsWithElement = window.document.getElementById("endswith");
	this.startsWithElement = window.document.getElementById("startswith");
	this.lengthElement = window.document.getElementById("minmaxlength");
	this.namesTitleElement = window.document.getElementById("namestitle");
	this.randomThemeElement = window.document.getElementById("random");
	this.generateElement = window.document.getElementById("generate");
	this.currentNamesElement = window.document.getElementById("currentnames");
	this.noNamesFoundElement = window.document.getElementById("nonamesfound");
	this.maxProcessingTimeElement = window.document.getElementById("maxtime");
	this.maxWordsToGenerateElement = window.document.getElementById("maxwordstogenerate");
	this.priorElement = window.document.getElementById("prior");
	this.orderElement = window.document.getElementById("order");
	this.trainingDataTextEdit = window.document.getElementById("trainingdataedit");
	this.nameDataDataListElement = window.document.getElementById("namedatapresetslist");
	this.nameDataSearchBoxElement = window.document.getElementById("trainingdatasearchbox");
	this.nameDataPresetListElement = window.document.getElementById("trainingdatalist");
	this.trainingData = [];
	var _g = 0;
	var _g1 = Type.getClassFields(TrainingDatas);
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var data = Reflect.field(TrainingDatas,name);
		this.trainingData.push(new _$Main_TrainingData(name,name,data));
	}
	var params = window.location.search.substring(1);
	if(!(params == null || params == "")) {
		this.trainingData.push(new _$Main_TrainingData("Custom","Custom",[]));
	}
	window.onload = $bind(this,this.onWindowLoaded);
};
Main.__name__ = true;
Main.getElement = function(id) {
	return window.document.getElementById(id);
};
Main.main = function() {
	var main = new Main();
};
Main.prototype = {
	addTrainingData: function(displayName,data) {
		this.trainingData.push(new _$Main_TrainingData(displayName,displayName,data));
	}
	,onWindowLoaded: function() {
		this.trainingData.sort(function(a,b) {
			var left = a.displayName.toLowerCase();
			var right = b.displayName.toLowerCase();
			if(left < right) {
				return -1;
			}
			if(left > right) {
				return 1;
			}
			return 0;
		});
		this.trainingDataTopicTrie = new markov_util_PrefixTrie();
		var _g = 0;
		var _g1 = this.trainingData;
		while(_g < _g1.length) {
			var data = [_g1[_g]];
			++_g;
			var makeOption = (function(data1) {
				return function() {
					var option = window.document.createElement("option");
					option.appendChild(window.document.createTextNode(data1[0].displayName));
					option.value = data1[0].value;
					return option;
				};
			})(data);
			this.nameDataPresetListElement.appendChild(makeOption());
			this.nameDataDataListElement.appendChild(makeOption());
			this.trainingDataTopicTrie.insert(data[0].displayName);
		}
		if(!Object.prototype.hasOwnProperty.call(TrainingDatas,"Animals")) {
			throw new js__$Boot_HaxeError("FAIL: Reflect.hasField(TrainingDatas, \"Animals\")");
		}
		this.set_trainingDataKey("Animals");
		this.maxWordsToGenerate = 100;
		this.minLength = 5;
		this.maxLength = 11;
		this.order = 3;
		this.prior = 0.0;
		this.maxProcessingTime = 800;
		this.set_startsWith("");
		this.set_endsWith("");
		this.set_includes("");
		this.set_excludes("");
		this.set_similar("");
		this.set_regexMatch("");
		var params = window.location.search.substring(1);
		if(!(params == null || params == "")) {
			var params1 = window.location.search.substring(1);
			var splitParams = params1.split("&");
			var customTrainingData = [];
			var sharedResultData = [];
			var _g2 = 0;
			while(_g2 < splitParams.length) {
				var param = splitParams[_g2];
				++_g2;
				var kv = param.split("=");
				if(kv.length < 2) {
					continue;
				}
				var k = decodeURIComponent(kv[0].split("+").join(" "));
				var v = decodeURIComponent(kv[1].split("+").join(" "));
				switch(k) {
				case "ends_width":
					this.set_endsWith(v);
					break;
				case "excludes":
					this.set_excludes(v);
					break;
				case "includes":
					this.set_includes(v);
					break;
				case "length_range_max":
					this.maxLength = Std.parseInt(v);
					break;
				case "length_range_min":
					this.minLength = Std.parseInt(v);
					break;
				case "max_processing_time":
					this.maxProcessingTime = Std.parseInt(v);
					break;
				case "max_words":
					this.maxWordsToGenerate = Std.parseInt(v);
					break;
				case "order":
					this.order = Std.parseInt(v);
					break;
				case "prior":
					this.prior = parseFloat(v);
					break;
				case "r":
					sharedResultData.push(v);
					break;
				case "regex_match":
					this.set_regexMatch(v);
					break;
				case "similar_to":
					this.set_similar(v);
					break;
				case "starts_with":
					this.set_startsWith(v);
					break;
				case "w":
					customTrainingData.push(v);
					break;
				}
			}
			if(sharedResultData.length > 0) {
				this.lastNames = sharedResultData;
				var names = this.lastNames;
				var _gthis = this;
				this.lastNames = names;
				if(this.get_similar().length > 0) {
					names.sort(function(x,y) {
						var target = _gthis.get_similar();
						if(!(x != null)) {
							throw new js__$Boot_HaxeError("FAIL: source != null");
						}
						if(!(target != null)) {
							throw new js__$Boot_HaxeError("FAIL: target != null");
						}
						var xSimilarity;
						if(x.length == 0) {
							xSimilarity = target.length;
						} else if(target.length == 0) {
							xSimilarity = x.length;
						} else {
							var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
							xSimilarity = table[table.length - 1];
						}
						var target1 = _gthis.get_similar();
						if(!(y != null)) {
							throw new js__$Boot_HaxeError("FAIL: source != null");
						}
						if(!(target1 != null)) {
							throw new js__$Boot_HaxeError("FAIL: target != null");
						}
						var ySimilarity;
						if(y.length == 0) {
							ySimilarity = target1.length;
						} else if(target1.length == 0) {
							ySimilarity = y.length;
						} else {
							var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
							ySimilarity = table1[table1.length - 1];
						}
						if(xSimilarity > ySimilarity) {
							return 1;
						} else if(xSimilarity < ySimilarity) {
							return -1;
						} else {
							return 0;
						}
					});
				}
				this.noNamesFoundElement.innerHTML = "";
				this.currentNamesElement.innerHTML = "";
				if(names.length == 0) {
					this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
				}
				var _g3 = 0;
				while(_g3 < names.length) {
					var name = names[_g3];
					++_g3;
					var li = window.document.createElement("li");
					if(!(name != null)) {
						throw new js__$Boot_HaxeError("FAIL: str != null");
					}
					li.textContent = HxOverrides.substr(name,0,1).toUpperCase() + HxOverrides.substr(name,1,name.length - 1);
					this.currentNamesElement.appendChild(li);
				}
			}
			if(customTrainingData.length > 3) {
				var data2 = this.getTrainingDataForKey("Custom");
				data2.data = customTrainingData;
				this.set_trainingDataKey("Custom");
			}
		}
		var _gthis1 = this;
		noUiSlider.create(this.orderElement,{ start : [this.order], connect : "lower", range : { "min" : [1,1], "max" : [9]}, pips : { mode : "range", density : 10}});
		this.createTooltips(this.orderElement);
		this.orderElement.noUiSlider.on("change",function(values,handle,rawValues) {
			_gthis1.order = values[handle] | 0;
		});
		this.orderElement.noUiSlider.on("update",function(values1,handle1,rawValues1) {
			_gthis1.updateTooltips(_gthis1.orderElement,handle1,values1[handle1] | 0);
		});
		noUiSlider.create(this.priorElement,{ start : [this.prior], connect : "lower", range : { "min" : 0.001, "50%" : 0.025, "max" : 0.05}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 3})}});
		this.createTooltips(this.priorElement);
		this.priorElement.noUiSlider.on("change",function(values2,handle2,rawValues2) {
			_gthis1.prior = parseFloat(values2[handle2]);
		});
		this.priorElement.noUiSlider.on("update",function(values3,handle3,rawValues3) {
			_gthis1.updateTooltips(_gthis1.priorElement,handle3,values3[handle3]);
		});
		noUiSlider.create(this.maxWordsToGenerateElement,{ start : [100], connect : "lower", range : { "min" : 20, "max" : 1000}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 0})}});
		this.createTooltips(this.maxWordsToGenerateElement);
		this.maxWordsToGenerateElement.noUiSlider.on("change",function(values4,handle4,rawValues4) {
			_gthis1.maxWordsToGenerate = parseFloat(values4[handle4]);
		});
		this.maxWordsToGenerateElement.noUiSlider.on("update",function(values5,handle5,rawValues5) {
			_gthis1.updateTooltips(_gthis1.maxWordsToGenerateElement,handle5,values5[handle5] | 0);
		});
		noUiSlider.create(this.maxProcessingTimeElement,{ start : [this.maxProcessingTime], connect : "lower", range : { "min" : 50, "max" : 5000}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 0})}});
		this.createTooltips(this.maxProcessingTimeElement);
		this.maxProcessingTimeElement.noUiSlider.on("change",function(values6,handle6,rawValues6) {
			_gthis1.maxProcessingTime = parseFloat(values6[handle6]);
		});
		this.maxProcessingTimeElement.noUiSlider.on("update",function(values7,handle7,rawValues7) {
			_gthis1.updateTooltips(_gthis1.maxProcessingTimeElement,handle7,values7[handle7] | 0);
		});
		noUiSlider.create(this.lengthElement,{ start : [this.minLength,this.maxLength], connect : true, range : { "min" : [3,1], "max" : 21}, pips : { mode : "range", density : 10}});
		this.createTooltips(this.lengthElement);
		this.lengthElement.noUiSlider.on("change",function(values8,handle8,rawValues8) {
			if(handle8 == 0) {
				_gthis1.minLength = values8[handle8] | 0;
			} else if(handle8 == 1) {
				_gthis1.maxLength = values8[handle8] | 0;
			}
		});
		this.lengthElement.noUiSlider.on("update",function(values9,handle9,rawValues9) {
			_gthis1.updateTooltips(_gthis1.lengthElement,handle9,values9[handle9] | 0);
		});
		var _gthis2 = this;
		this.nameDataPresetListElement.addEventListener("change",function() {
			_gthis2.set_trainingDataKey(_gthis2.nameDataPresetListElement.value);
		},false);
		this.nameDataSearchBoxElement.addEventListener("change",function() {
			if(_gthis2.trainingDataTopicTrie.find(_gthis2.nameDataSearchBoxElement.value)) {
				_gthis2.set_trainingDataKey(_gthis2.nameDataSearchBoxElement.value);
			}
		},false);
		this.nameDataSearchBoxElement.addEventListener("input",function() {
			if(_gthis2.trainingDataTopicTrie.find(_gthis2.nameDataSearchBoxElement.value)) {
				_gthis2.set_trainingDataKey(_gthis2.nameDataSearchBoxElement.value);
			}
		},false);
		this.trainingDataTextEdit.addEventListener("change",function() {
			var data3 = _gthis2.trainingDataTextEdit.value;
			if(!(data3 == null || data3.length == 0)) {
				var arr = data3.split(" ");
				if(arr.length > 0) {
					var presetName = _gthis2.get_trainingDataKey();
					_gthis2.namesTitleElement.innerHTML = presetName;
					_gthis2.duplicateTrie = new markov_util_PrefixTrie();
					var _g4 = 0;
					while(_g4 < arr.length) {
						var name1 = arr[_g4];
						++_g4;
						_gthis2.duplicateTrie.insert(name1);
					}
					_gthis2.generator = new markov_namegen_NameGenerator(arr,_gthis2.order,_gthis2.prior);
					var names1 = [];
					var startTime = new Date().getTime();
					var currentTime = new Date().getTime();
					var regex = _gthis2.get_regexMatch() == "" ? null : new EReg(_gthis2.get_regexMatch(),"i");
					while(names1.length < _gthis2.maxWordsToGenerate && currentTime < startTime + _gthis2.maxProcessingTime) {
						var name2 = _gthis2.generator.generateName(_gthis2.minLength,_gthis2.maxLength,_gthis2.get_startsWith(),_gthis2.get_endsWith(),_gthis2.get_includes(),_gthis2.get_excludes(),regex);
						if(name2 != null && !_gthis2.duplicateTrie.find(name2)) {
							names1.push(name2);
							_gthis2.duplicateTrie.insert(name2);
						}
						currentTime = new Date().getTime();
					}
					var _gthis3 = _gthis2;
					_gthis2.lastNames = names1;
					if(_gthis2.get_similar().length > 0) {
						names1.sort(function(x1,y1) {
							var target2 = _gthis3.get_similar();
							if(!(x1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity1;
							if(x1.length == 0) {
								xSimilarity1 = target2.length;
							} else if(target2.length == 0) {
								xSimilarity1 = x1.length;
							} else {
								var table2 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x1,target2,true);
								xSimilarity1 = table2[table2.length - 1];
							}
							var target3 = _gthis3.get_similar();
							if(!(y1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target3 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity1;
							if(y1.length == 0) {
								ySimilarity1 = target3.length;
							} else if(target3.length == 0) {
								ySimilarity1 = y1.length;
							} else {
								var table3 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y1,target3,true);
								ySimilarity1 = table3[table3.length - 1];
							}
							if(xSimilarity1 > ySimilarity1) {
								return 1;
							} else if(xSimilarity1 < ySimilarity1) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis2.noNamesFoundElement.innerHTML = "";
					_gthis2.currentNamesElement.innerHTML = "";
					if(names1.length == 0) {
						_gthis2.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
					}
					var _g5 = 0;
					while(_g5 < names1.length) {
						var name3 = names1[_g5];
						++_g5;
						var li1 = window.document.createElement("li");
						if(!(name3 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						li1.textContent = HxOverrides.substr(name3,0,1).toUpperCase() + HxOverrides.substr(name3,1,name3.length - 1);
						_gthis2.currentNamesElement.appendChild(li1);
					}
				}
			}
		},false);
		this.generateElement.addEventListener("click",function() {
			var data4 = _gthis2.trainingDataTextEdit.value;
			if(!(data4 == null || data4.length == 0)) {
				var arr1 = data4.split(" ");
				if(arr1.length > 0) {
					var presetName1 = _gthis2.get_trainingDataKey();
					_gthis2.namesTitleElement.innerHTML = presetName1;
					_gthis2.duplicateTrie = new markov_util_PrefixTrie();
					var _g6 = 0;
					while(_g6 < arr1.length) {
						var name4 = arr1[_g6];
						++_g6;
						_gthis2.duplicateTrie.insert(name4);
					}
					_gthis2.generator = new markov_namegen_NameGenerator(arr1,_gthis2.order,_gthis2.prior);
					var names2 = [];
					var startTime1 = new Date().getTime();
					var currentTime1 = new Date().getTime();
					var regex1 = _gthis2.get_regexMatch() == "" ? null : new EReg(_gthis2.get_regexMatch(),"i");
					while(names2.length < _gthis2.maxWordsToGenerate && currentTime1 < startTime1 + _gthis2.maxProcessingTime) {
						var name5 = _gthis2.generator.generateName(_gthis2.minLength,_gthis2.maxLength,_gthis2.get_startsWith(),_gthis2.get_endsWith(),_gthis2.get_includes(),_gthis2.get_excludes(),regex1);
						if(name5 != null && !_gthis2.duplicateTrie.find(name5)) {
							names2.push(name5);
							_gthis2.duplicateTrie.insert(name5);
						}
						currentTime1 = new Date().getTime();
					}
					var _gthis4 = _gthis2;
					_gthis2.lastNames = names2;
					if(_gthis2.get_similar().length > 0) {
						names2.sort(function(x2,y2) {
							var target4 = _gthis4.get_similar();
							if(!(x2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target4 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity2;
							if(x2.length == 0) {
								xSimilarity2 = target4.length;
							} else if(target4.length == 0) {
								xSimilarity2 = x2.length;
							} else {
								var table4 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x2,target4,true);
								xSimilarity2 = table4[table4.length - 1];
							}
							var target5 = _gthis4.get_similar();
							if(!(y2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target5 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity2;
							if(y2.length == 0) {
								ySimilarity2 = target5.length;
							} else if(target5.length == 0) {
								ySimilarity2 = y2.length;
							} else {
								var table5 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y2,target5,true);
								ySimilarity2 = table5[table5.length - 1];
							}
							if(xSimilarity2 > ySimilarity2) {
								return 1;
							} else if(xSimilarity2 < ySimilarity2) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis2.noNamesFoundElement.innerHTML = "";
					_gthis2.currentNamesElement.innerHTML = "";
					if(names2.length == 0) {
						_gthis2.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
					}
					var _g7 = 0;
					while(_g7 < names2.length) {
						var name6 = names2[_g7];
						++_g7;
						var li2 = window.document.createElement("li");
						if(!(name6 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						li2.textContent = HxOverrides.substr(name6,0,1).toUpperCase() + HxOverrides.substr(name6,1,name6.length - 1);
						_gthis2.currentNamesElement.appendChild(li2);
					}
				}
			}
		},false);
		this.randomThemeElement.addEventListener("click",function() {
			var topics = Type.getClassFields(TrainingDatas);
			var topic = topics[Std.random(topics.length)];
			_gthis2.set_trainingDataKey(topic);
			var data5 = _gthis2.trainingDataTextEdit.value;
			if(!(data5 == null || data5.length == 0)) {
				var arr2 = data5.split(" ");
				if(arr2.length > 0) {
					var presetName2 = _gthis2.get_trainingDataKey();
					_gthis2.namesTitleElement.innerHTML = presetName2;
					_gthis2.duplicateTrie = new markov_util_PrefixTrie();
					var _g8 = 0;
					while(_g8 < arr2.length) {
						var name7 = arr2[_g8];
						++_g8;
						_gthis2.duplicateTrie.insert(name7);
					}
					_gthis2.generator = new markov_namegen_NameGenerator(arr2,_gthis2.order,_gthis2.prior);
					var names3 = [];
					var startTime2 = new Date().getTime();
					var currentTime2 = new Date().getTime();
					var regex2 = _gthis2.get_regexMatch() == "" ? null : new EReg(_gthis2.get_regexMatch(),"i");
					while(names3.length < _gthis2.maxWordsToGenerate && currentTime2 < startTime2 + _gthis2.maxProcessingTime) {
						var name8 = _gthis2.generator.generateName(_gthis2.minLength,_gthis2.maxLength,_gthis2.get_startsWith(),_gthis2.get_endsWith(),_gthis2.get_includes(),_gthis2.get_excludes(),regex2);
						if(name8 != null && !_gthis2.duplicateTrie.find(name8)) {
							names3.push(name8);
							_gthis2.duplicateTrie.insert(name8);
						}
						currentTime2 = new Date().getTime();
					}
					var _gthis5 = _gthis2;
					_gthis2.lastNames = names3;
					if(_gthis2.get_similar().length > 0) {
						names3.sort(function(x3,y3) {
							var target6 = _gthis5.get_similar();
							if(!(x3 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target6 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity3;
							if(x3.length == 0) {
								xSimilarity3 = target6.length;
							} else if(target6.length == 0) {
								xSimilarity3 = x3.length;
							} else {
								var table6 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x3,target6,true);
								xSimilarity3 = table6[table6.length - 1];
							}
							var target7 = _gthis5.get_similar();
							if(!(y3 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target7 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity3;
							if(y3.length == 0) {
								ySimilarity3 = target7.length;
							} else if(target7.length == 0) {
								ySimilarity3 = y3.length;
							} else {
								var table7 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y3,target7,true);
								ySimilarity3 = table7[table7.length - 1];
							}
							if(xSimilarity3 > ySimilarity3) {
								return 1;
							} else if(xSimilarity3 < ySimilarity3) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis2.noNamesFoundElement.innerHTML = "";
					_gthis2.currentNamesElement.innerHTML = "";
					if(names3.length == 0) {
						_gthis2.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
					}
					var _g9 = 0;
					while(_g9 < names3.length) {
						var name9 = names3[_g9];
						++_g9;
						var li3 = window.document.createElement("li");
						if(!(name9 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						li3.textContent = HxOverrides.substr(name9,0,1).toUpperCase() + HxOverrides.substr(name9,1,name9.length - 1);
						_gthis2.currentNamesElement.appendChild(li3);
					}
				}
			}
		},false);
		this.startsWithElement.addEventListener("change",function() {
			if(_gthis2.startsWithElement.value != null) {
				var tmp = _gthis2.startsWithElement.value.toLowerCase();
				_gthis2.set_startsWith(tmp);
			}
		},false);
		this.endsWithElement.addEventListener("change",function() {
			if(_gthis2.endsWithElement.value != null) {
				var tmp1 = _gthis2.endsWithElement.value.toLowerCase();
				_gthis2.set_endsWith(tmp1);
			}
		},false);
		this.includesElement.addEventListener("change",function() {
			if(_gthis2.includesElement.value != null) {
				var tmp2 = _gthis2.includesElement.value.toLowerCase();
				_gthis2.set_includes(tmp2);
			}
		},false);
		this.excludesElement.addEventListener("change",function() {
			if(_gthis2.excludesElement.value != null) {
				var tmp3 = _gthis2.excludesElement.value.toLowerCase();
				_gthis2.set_excludes(tmp3);
			}
		},false);
		this.similarElement.addEventListener("change",function() {
			if(_gthis2.similarElement.value != null) {
				var tmp4 = _gthis2.similarElement.value.toLowerCase();
				_gthis2.set_similar(tmp4);
			}
		},false);
		this.regexMatchElement.addEventListener("change",function() {
			if(_gthis2.regexMatchElement.value != null) {
				_gthis2.set_regexMatch(_gthis2.regexMatchElement.value);
			}
		},false);
		this.shareResultsAndSettingsElement.addEventListener("click",function() {
			_gthis2.shareLinkTextEdit.value = _gthis2.makeCustomQueryString(_$Main_CustomQueryStringOption.EVERYTHING);
			_gthis2.shareLinkTextEdit.style.display = "block";
		},false);
		this.shareResultsOnlyElement.addEventListener("click",function() {
			_gthis2.shareLinkTextEdit.value = _gthis2.makeCustomQueryString(_$Main_CustomQueryStringOption.NO_TRAINING_DATA);
			_gthis2.shareLinkTextEdit.style.display = "block";
		},false);
	}
	,buildTrainingDataList: function() {
		this.trainingData.sort(function(a,b) {
			var left = a.displayName.toLowerCase();
			var right = b.displayName.toLowerCase();
			if(left < right) {
				return -1;
			}
			if(left > right) {
				return 1;
			}
			return 0;
		});
		this.trainingDataTopicTrie = new markov_util_PrefixTrie();
		var _g = 0;
		var _g1 = this.trainingData;
		while(_g < _g1.length) {
			var data = [_g1[_g]];
			++_g;
			var makeOption = (function(data1) {
				return function() {
					var option = window.document.createElement("option");
					option.appendChild(window.document.createTextNode(data1[0].displayName));
					option.value = data1[0].value;
					return option;
				};
			})(data);
			this.nameDataPresetListElement.appendChild(makeOption());
			this.nameDataDataListElement.appendChild(makeOption());
			this.trainingDataTopicTrie.insert(data[0].displayName);
		}
	}
	,isQueryStringEmpty: function() {
		var params = window.location.search.substring(1);
		if(params == null || params == "") {
			return true;
		}
		return false;
	}
	,applySettings: function() {
		if(!Object.prototype.hasOwnProperty.call(TrainingDatas,"Animals")) {
			throw new js__$Boot_HaxeError("FAIL: Reflect.hasField(TrainingDatas, \"Animals\")");
		}
		this.set_trainingDataKey("Animals");
		this.maxWordsToGenerate = 100;
		this.minLength = 5;
		this.maxLength = 11;
		this.order = 3;
		this.prior = 0.0;
		this.maxProcessingTime = 800;
		this.set_startsWith("");
		this.set_endsWith("");
		this.set_includes("");
		this.set_excludes("");
		this.set_similar("");
		this.set_regexMatch("");
		var params = window.location.search.substring(1);
		if(params == null || params == "") {
			return;
		}
		var params1 = window.location.search.substring(1);
		var splitParams = params1.split("&");
		var customTrainingData = [];
		var sharedResultData = [];
		var _g = 0;
		while(_g < splitParams.length) {
			var param = splitParams[_g];
			++_g;
			var kv = param.split("=");
			if(kv.length < 2) {
				continue;
			}
			var k = decodeURIComponent(kv[0].split("+").join(" "));
			var v = decodeURIComponent(kv[1].split("+").join(" "));
			switch(k) {
			case "ends_width":
				this.set_endsWith(v);
				break;
			case "excludes":
				this.set_excludes(v);
				break;
			case "includes":
				this.set_includes(v);
				break;
			case "length_range_max":
				this.maxLength = Std.parseInt(v);
				break;
			case "length_range_min":
				this.minLength = Std.parseInt(v);
				break;
			case "max_processing_time":
				this.maxProcessingTime = Std.parseInt(v);
				break;
			case "max_words":
				this.maxWordsToGenerate = Std.parseInt(v);
				break;
			case "order":
				this.order = Std.parseInt(v);
				break;
			case "prior":
				this.prior = parseFloat(v);
				break;
			case "r":
				sharedResultData.push(v);
				break;
			case "regex_match":
				this.set_regexMatch(v);
				break;
			case "similar_to":
				this.set_similar(v);
				break;
			case "starts_with":
				this.set_startsWith(v);
				break;
			case "w":
				customTrainingData.push(v);
				break;
			}
		}
		if(sharedResultData.length > 0) {
			this.lastNames = sharedResultData;
			var names = this.lastNames;
			var _gthis = this;
			this.lastNames = names;
			if(this.get_similar().length > 0) {
				names.sort(function(x,y) {
					var target = _gthis.get_similar();
					if(!(x != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var xSimilarity;
					if(x.length == 0) {
						xSimilarity = target.length;
					} else if(target.length == 0) {
						xSimilarity = x.length;
					} else {
						var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
						xSimilarity = table[table.length - 1];
					}
					var target1 = _gthis.get_similar();
					if(!(y != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target1 != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var ySimilarity;
					if(y.length == 0) {
						ySimilarity = target1.length;
					} else if(target1.length == 0) {
						ySimilarity = y.length;
					} else {
						var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
						ySimilarity = table1[table1.length - 1];
					}
					if(xSimilarity > ySimilarity) {
						return 1;
					} else if(xSimilarity < ySimilarity) {
						return -1;
					} else {
						return 0;
					}
				});
			}
			this.noNamesFoundElement.innerHTML = "";
			this.currentNamesElement.innerHTML = "";
			if(names.length == 0) {
				this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
			}
			var _g1 = 0;
			while(_g1 < names.length) {
				var name = names[_g1];
				++_g1;
				var li = window.document.createElement("li");
				if(!(name != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				li.textContent = HxOverrides.substr(name,0,1).toUpperCase() + HxOverrides.substr(name,1,name.length - 1);
				this.currentNamesElement.appendChild(li);
			}
		}
		if(customTrainingData.length > 3) {
			var data = this.getTrainingDataForKey("Custom");
			data.data = customTrainingData;
			this.set_trainingDataKey("Custom");
		}
	}
	,makeCustomQueryString: function(mode) {
		var s = "http://www.samcodes.co.uk/project/markov-namegen/";
		var appendKv = function(k,v,sep) {
			if(sep == null) {
				sep = "&";
			}
			if(k == null || k.length == 0 || v == null || v.length == 0) {
				return;
			}
			s += sep + encodeURIComponent(k) + "=" + encodeURIComponent(v);
		};
		appendKv("length_range_min",Std.string(this.minLength),"?");
		appendKv("length_range_max",Std.string(this.maxLength));
		appendKv("order",Std.string(this.order));
		appendKv("prior",Std.string(this.prior));
		appendKv("max_words",Std.string(this.maxWordsToGenerate));
		appendKv("max_processing_time",Std.string(this.maxProcessingTime));
		appendKv("starts_with",this.get_startsWith());
		appendKv("ends_width",this.get_endsWith());
		appendKv("includes",this.get_includes());
		appendKv("excludes",this.get_excludes());
		appendKv("similar_to",this.get_similar());
		appendKv("regex_match",this.get_regexMatch());
		if(mode != _$Main_CustomQueryStringOption.NO_TRAINING_DATA) {
			var data = this.trainingDataTextEdit.value.split(" ");
			if(data.length > 1) {
				var _g = 0;
				while(_g < data.length) {
					var word = data[_g];
					++_g;
					if(word != null && word.length != 0) {
						appendKv("w",word);
					}
				}
			}
		}
		if(this.lastNames.length > 0) {
			var _g1 = 0;
			var _g11 = this.lastNames;
			while(_g1 < _g11.length) {
				var name = _g11[_g1];
				++_g1;
				if(name != null && name.length != 0) {
					appendKv("r",name);
				}
			}
		}
		return s;
	}
	,createSliders: function() {
		var _gthis = this;
		noUiSlider.create(this.orderElement,{ start : [this.order], connect : "lower", range : { "min" : [1,1], "max" : [9]}, pips : { mode : "range", density : 10}});
		this.createTooltips(this.orderElement);
		this.orderElement.noUiSlider.on("change",function(values,handle,rawValues) {
			_gthis.order = values[handle] | 0;
		});
		this.orderElement.noUiSlider.on("update",function(values1,handle1,rawValues1) {
			_gthis.updateTooltips(_gthis.orderElement,handle1,values1[handle1] | 0);
		});
		noUiSlider.create(this.priorElement,{ start : [this.prior], connect : "lower", range : { "min" : 0.001, "50%" : 0.025, "max" : 0.05}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 3})}});
		this.createTooltips(this.priorElement);
		this.priorElement.noUiSlider.on("change",function(values2,handle2,rawValues2) {
			_gthis.prior = parseFloat(values2[handle2]);
		});
		this.priorElement.noUiSlider.on("update",function(values3,handle3,rawValues3) {
			_gthis.updateTooltips(_gthis.priorElement,handle3,values3[handle3]);
		});
		noUiSlider.create(this.maxWordsToGenerateElement,{ start : [100], connect : "lower", range : { "min" : 20, "max" : 1000}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 0})}});
		this.createTooltips(this.maxWordsToGenerateElement);
		this.maxWordsToGenerateElement.noUiSlider.on("change",function(values4,handle4,rawValues4) {
			_gthis.maxWordsToGenerate = parseFloat(values4[handle4]);
		});
		this.maxWordsToGenerateElement.noUiSlider.on("update",function(values5,handle5,rawValues5) {
			_gthis.updateTooltips(_gthis.maxWordsToGenerateElement,handle5,values5[handle5] | 0);
		});
		noUiSlider.create(this.maxProcessingTimeElement,{ start : [this.maxProcessingTime], connect : "lower", range : { "min" : 50, "max" : 5000}, pips : { mode : "range", density : 10, format : new wNumb({ decimals : 0})}});
		this.createTooltips(this.maxProcessingTimeElement);
		this.maxProcessingTimeElement.noUiSlider.on("change",function(values6,handle6,rawValues6) {
			_gthis.maxProcessingTime = parseFloat(values6[handle6]);
		});
		this.maxProcessingTimeElement.noUiSlider.on("update",function(values7,handle7,rawValues7) {
			_gthis.updateTooltips(_gthis.maxProcessingTimeElement,handle7,values7[handle7] | 0);
		});
		noUiSlider.create(this.lengthElement,{ start : [this.minLength,this.maxLength], connect : true, range : { "min" : [3,1], "max" : 21}, pips : { mode : "range", density : 10}});
		this.createTooltips(this.lengthElement);
		this.lengthElement.noUiSlider.on("change",function(values8,handle8,rawValues8) {
			if(handle8 == 0) {
				_gthis.minLength = values8[handle8] | 0;
			} else if(handle8 == 1) {
				_gthis.maxLength = values8[handle8] | 0;
			}
		});
		this.lengthElement.noUiSlider.on("update",function(values9,handle9,rawValues9) {
			_gthis.updateTooltips(_gthis.lengthElement,handle9,values9[handle9] | 0);
		});
	}
	,addEventListeners: function() {
		var _gthis = this;
		this.nameDataPresetListElement.addEventListener("change",function() {
			_gthis.set_trainingDataKey(_gthis.nameDataPresetListElement.value);
		},false);
		this.nameDataSearchBoxElement.addEventListener("change",function() {
			if(_gthis.trainingDataTopicTrie.find(_gthis.nameDataSearchBoxElement.value)) {
				_gthis.set_trainingDataKey(_gthis.nameDataSearchBoxElement.value);
			}
		},false);
		this.nameDataSearchBoxElement.addEventListener("input",function() {
			if(_gthis.trainingDataTopicTrie.find(_gthis.nameDataSearchBoxElement.value)) {
				_gthis.set_trainingDataKey(_gthis.nameDataSearchBoxElement.value);
			}
		},false);
		this.trainingDataTextEdit.addEventListener("change",function() {
			var data = _gthis.trainingDataTextEdit.value;
			if(!(data == null || data.length == 0)) {
				var arr = data.split(" ");
				if(arr.length > 0) {
					var presetName = _gthis.get_trainingDataKey();
					_gthis.namesTitleElement.innerHTML = presetName;
					_gthis.duplicateTrie = new markov_util_PrefixTrie();
					var _g = 0;
					while(_g < arr.length) {
						var name = arr[_g];
						++_g;
						_gthis.duplicateTrie.insert(name);
					}
					_gthis.generator = new markov_namegen_NameGenerator(arr,_gthis.order,_gthis.prior);
					var names = [];
					var startTime = new Date().getTime();
					var currentTime = new Date().getTime();
					var regex = _gthis.get_regexMatch() == "" ? null : new EReg(_gthis.get_regexMatch(),"i");
					while(names.length < _gthis.maxWordsToGenerate && currentTime < startTime + _gthis.maxProcessingTime) {
						var name1 = _gthis.generator.generateName(_gthis.minLength,_gthis.maxLength,_gthis.get_startsWith(),_gthis.get_endsWith(),_gthis.get_includes(),_gthis.get_excludes(),regex);
						if(name1 != null && !_gthis.duplicateTrie.find(name1)) {
							names.push(name1);
							_gthis.duplicateTrie.insert(name1);
						}
						currentTime = new Date().getTime();
					}
					var _gthis1 = _gthis;
					_gthis.lastNames = names;
					if(_gthis.get_similar().length > 0) {
						names.sort(function(x,y) {
							var target = _gthis1.get_similar();
							if(!(x != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity;
							if(x.length == 0) {
								xSimilarity = target.length;
							} else if(target.length == 0) {
								xSimilarity = x.length;
							} else {
								var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
								xSimilarity = table[table.length - 1];
							}
							var target1 = _gthis1.get_similar();
							if(!(y != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity;
							if(y.length == 0) {
								ySimilarity = target1.length;
							} else if(target1.length == 0) {
								ySimilarity = y.length;
							} else {
								var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
								ySimilarity = table1[table1.length - 1];
							}
							if(xSimilarity > ySimilarity) {
								return 1;
							} else if(xSimilarity < ySimilarity) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis.noNamesFoundElement.innerHTML = "";
					_gthis.currentNamesElement.innerHTML = "";
					if(names.length == 0) {
						_gthis.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
					}
					var _g1 = 0;
					while(_g1 < names.length) {
						var name2 = names[_g1];
						++_g1;
						var li = window.document.createElement("li");
						if(!(name2 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						li.textContent = HxOverrides.substr(name2,0,1).toUpperCase() + HxOverrides.substr(name2,1,name2.length - 1);
						_gthis.currentNamesElement.appendChild(li);
					}
				}
			}
		},false);
		this.generateElement.addEventListener("click",function() {
			var data1 = _gthis.trainingDataTextEdit.value;
			if(!(data1 == null || data1.length == 0)) {
				var arr1 = data1.split(" ");
				if(arr1.length > 0) {
					var presetName1 = _gthis.get_trainingDataKey();
					_gthis.namesTitleElement.innerHTML = presetName1;
					_gthis.duplicateTrie = new markov_util_PrefixTrie();
					var _g2 = 0;
					while(_g2 < arr1.length) {
						var name3 = arr1[_g2];
						++_g2;
						_gthis.duplicateTrie.insert(name3);
					}
					_gthis.generator = new markov_namegen_NameGenerator(arr1,_gthis.order,_gthis.prior);
					var names1 = [];
					var startTime1 = new Date().getTime();
					var currentTime1 = new Date().getTime();
					var regex1 = _gthis.get_regexMatch() == "" ? null : new EReg(_gthis.get_regexMatch(),"i");
					while(names1.length < _gthis.maxWordsToGenerate && currentTime1 < startTime1 + _gthis.maxProcessingTime) {
						var name4 = _gthis.generator.generateName(_gthis.minLength,_gthis.maxLength,_gthis.get_startsWith(),_gthis.get_endsWith(),_gthis.get_includes(),_gthis.get_excludes(),regex1);
						if(name4 != null && !_gthis.duplicateTrie.find(name4)) {
							names1.push(name4);
							_gthis.duplicateTrie.insert(name4);
						}
						currentTime1 = new Date().getTime();
					}
					var _gthis2 = _gthis;
					_gthis.lastNames = names1;
					if(_gthis.get_similar().length > 0) {
						names1.sort(function(x1,y1) {
							var target2 = _gthis2.get_similar();
							if(!(x1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity1;
							if(x1.length == 0) {
								xSimilarity1 = target2.length;
							} else if(target2.length == 0) {
								xSimilarity1 = x1.length;
							} else {
								var table2 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x1,target2,true);
								xSimilarity1 = table2[table2.length - 1];
							}
							var target3 = _gthis2.get_similar();
							if(!(y1 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target3 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity1;
							if(y1.length == 0) {
								ySimilarity1 = target3.length;
							} else if(target3.length == 0) {
								ySimilarity1 = y1.length;
							} else {
								var table3 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y1,target3,true);
								ySimilarity1 = table3[table3.length - 1];
							}
							if(xSimilarity1 > ySimilarity1) {
								return 1;
							} else if(xSimilarity1 < ySimilarity1) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis.noNamesFoundElement.innerHTML = "";
					_gthis.currentNamesElement.innerHTML = "";
					if(names1.length == 0) {
						_gthis.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
					}
					var _g3 = 0;
					while(_g3 < names1.length) {
						var name5 = names1[_g3];
						++_g3;
						var li1 = window.document.createElement("li");
						if(!(name5 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						li1.textContent = HxOverrides.substr(name5,0,1).toUpperCase() + HxOverrides.substr(name5,1,name5.length - 1);
						_gthis.currentNamesElement.appendChild(li1);
					}
				}
			}
		},false);
		this.randomThemeElement.addEventListener("click",function() {
			var topics = Type.getClassFields(TrainingDatas);
			var topic = topics[Std.random(topics.length)];
			_gthis.set_trainingDataKey(topic);
			var data2 = _gthis.trainingDataTextEdit.value;
			if(!(data2 == null || data2.length == 0)) {
				var arr2 = data2.split(" ");
				if(arr2.length > 0) {
					var presetName2 = _gthis.get_trainingDataKey();
					_gthis.namesTitleElement.innerHTML = presetName2;
					_gthis.duplicateTrie = new markov_util_PrefixTrie();
					var _g4 = 0;
					while(_g4 < arr2.length) {
						var name6 = arr2[_g4];
						++_g4;
						_gthis.duplicateTrie.insert(name6);
					}
					_gthis.generator = new markov_namegen_NameGenerator(arr2,_gthis.order,_gthis.prior);
					var names2 = [];
					var startTime2 = new Date().getTime();
					var currentTime2 = new Date().getTime();
					var regex2 = _gthis.get_regexMatch() == "" ? null : new EReg(_gthis.get_regexMatch(),"i");
					while(names2.length < _gthis.maxWordsToGenerate && currentTime2 < startTime2 + _gthis.maxProcessingTime) {
						var name7 = _gthis.generator.generateName(_gthis.minLength,_gthis.maxLength,_gthis.get_startsWith(),_gthis.get_endsWith(),_gthis.get_includes(),_gthis.get_excludes(),regex2);
						if(name7 != null && !_gthis.duplicateTrie.find(name7)) {
							names2.push(name7);
							_gthis.duplicateTrie.insert(name7);
						}
						currentTime2 = new Date().getTime();
					}
					var _gthis3 = _gthis;
					_gthis.lastNames = names2;
					if(_gthis.get_similar().length > 0) {
						names2.sort(function(x2,y2) {
							var target4 = _gthis3.get_similar();
							if(!(x2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target4 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var xSimilarity2;
							if(x2.length == 0) {
								xSimilarity2 = target4.length;
							} else if(target4.length == 0) {
								xSimilarity2 = x2.length;
							} else {
								var table4 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x2,target4,true);
								xSimilarity2 = table4[table4.length - 1];
							}
							var target5 = _gthis3.get_similar();
							if(!(y2 != null)) {
								throw new js__$Boot_HaxeError("FAIL: source != null");
							}
							if(!(target5 != null)) {
								throw new js__$Boot_HaxeError("FAIL: target != null");
							}
							var ySimilarity2;
							if(y2.length == 0) {
								ySimilarity2 = target5.length;
							} else if(target5.length == 0) {
								ySimilarity2 = y2.length;
							} else {
								var table5 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y2,target5,true);
								ySimilarity2 = table5[table5.length - 1];
							}
							if(xSimilarity2 > ySimilarity2) {
								return 1;
							} else if(xSimilarity2 < ySimilarity2) {
								return -1;
							} else {
								return 0;
							}
						});
					}
					_gthis.noNamesFoundElement.innerHTML = "";
					_gthis.currentNamesElement.innerHTML = "";
					if(names2.length == 0) {
						_gthis.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
					}
					var _g5 = 0;
					while(_g5 < names2.length) {
						var name8 = names2[_g5];
						++_g5;
						var li2 = window.document.createElement("li");
						if(!(name8 != null)) {
							throw new js__$Boot_HaxeError("FAIL: str != null");
						}
						li2.textContent = HxOverrides.substr(name8,0,1).toUpperCase() + HxOverrides.substr(name8,1,name8.length - 1);
						_gthis.currentNamesElement.appendChild(li2);
					}
				}
			}
		},false);
		this.startsWithElement.addEventListener("change",function() {
			if(_gthis.startsWithElement.value != null) {
				var tmp = _gthis.startsWithElement.value.toLowerCase();
				_gthis.set_startsWith(tmp);
			}
		},false);
		this.endsWithElement.addEventListener("change",function() {
			if(_gthis.endsWithElement.value != null) {
				var tmp1 = _gthis.endsWithElement.value.toLowerCase();
				_gthis.set_endsWith(tmp1);
			}
		},false);
		this.includesElement.addEventListener("change",function() {
			if(_gthis.includesElement.value != null) {
				var tmp2 = _gthis.includesElement.value.toLowerCase();
				_gthis.set_includes(tmp2);
			}
		},false);
		this.excludesElement.addEventListener("change",function() {
			if(_gthis.excludesElement.value != null) {
				var tmp3 = _gthis.excludesElement.value.toLowerCase();
				_gthis.set_excludes(tmp3);
			}
		},false);
		this.similarElement.addEventListener("change",function() {
			if(_gthis.similarElement.value != null) {
				var tmp4 = _gthis.similarElement.value.toLowerCase();
				_gthis.set_similar(tmp4);
			}
		},false);
		this.regexMatchElement.addEventListener("change",function() {
			if(_gthis.regexMatchElement.value != null) {
				_gthis.set_regexMatch(_gthis.regexMatchElement.value);
			}
		},false);
		this.shareResultsAndSettingsElement.addEventListener("click",function() {
			_gthis.shareLinkTextEdit.value = _gthis.makeCustomQueryString(_$Main_CustomQueryStringOption.EVERYTHING);
			_gthis.shareLinkTextEdit.style.display = "block";
		},false);
		this.shareResultsOnlyElement.addEventListener("click",function() {
			_gthis.shareLinkTextEdit.value = _gthis.makeCustomQueryString(_$Main_CustomQueryStringOption.NO_TRAINING_DATA);
			_gthis.shareLinkTextEdit.style.display = "block";
		},false);
	}
	,onNameDataPresetSelectionChanged: function(key) {
		var data = this.getTrainingDataForKey(key);
		var s = "";
		var _g = 0;
		var _g1 = data.data;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			s += i + " ";
		}
		s = StringTools.rtrim(s);
		this.trainingDataTextEdit.value = s;
	}
	,createTooltips: function(slider) {
		var tipHandles = slider.getElementsByClassName("noUi-handle");
		var _g1 = 0;
		var _g = tipHandles.length;
		while(_g1 < _g) {
			var i = _g1++;
			var div = window.document.createElement("div");
			div.className += "tooltip";
			tipHandles[i].appendChild(div);
			this.updateTooltips(slider,i,0);
		}
	}
	,updateTooltips: function(slider,handleIdx,value) {
		var tipHandles = slider.getElementsByClassName("noUi-handle");
		tipHandles[handleIdx].innerHTML = "<span class='tooltip'>" + (value == null ? "null" : "" + value) + "</span>";
	}
	,generate: function(presetName,data) {
		this.namesTitleElement.innerHTML = presetName;
		this.duplicateTrie = new markov_util_PrefixTrie();
		var _g = 0;
		while(_g < data.length) {
			var name = data[_g];
			++_g;
			this.duplicateTrie.insert(name);
		}
		this.generator = new markov_namegen_NameGenerator(data,this.order,this.prior);
		var names = [];
		var startTime = new Date().getTime();
		var currentTime = new Date().getTime();
		var regex = this.get_regexMatch() == "" ? null : new EReg(this.get_regexMatch(),"i");
		while(names.length < this.maxWordsToGenerate && currentTime < startTime + this.maxProcessingTime) {
			var name1 = this.generator.generateName(this.minLength,this.maxLength,this.get_startsWith(),this.get_endsWith(),this.get_includes(),this.get_excludes(),regex);
			if(name1 != null && !this.duplicateTrie.find(name1)) {
				names.push(name1);
				this.duplicateTrie.insert(name1);
			}
			currentTime = new Date().getTime();
		}
		var _gthis = this;
		this.lastNames = names;
		if(this.get_similar().length > 0) {
			names.sort(function(x,y) {
				var target = _gthis.get_similar();
				if(!(x != null)) {
					throw new js__$Boot_HaxeError("FAIL: source != null");
				}
				if(!(target != null)) {
					throw new js__$Boot_HaxeError("FAIL: target != null");
				}
				var xSimilarity;
				if(x.length == 0) {
					xSimilarity = target.length;
				} else if(target.length == 0) {
					xSimilarity = x.length;
				} else {
					var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
					xSimilarity = table[table.length - 1];
				}
				var target1 = _gthis.get_similar();
				if(!(y != null)) {
					throw new js__$Boot_HaxeError("FAIL: source != null");
				}
				if(!(target1 != null)) {
					throw new js__$Boot_HaxeError("FAIL: target != null");
				}
				var ySimilarity;
				if(y.length == 0) {
					ySimilarity = target1.length;
				} else if(target1.length == 0) {
					ySimilarity = y.length;
				} else {
					var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
					ySimilarity = table1[table1.length - 1];
				}
				if(xSimilarity > ySimilarity) {
					return 1;
				} else if(xSimilarity < ySimilarity) {
					return -1;
				} else {
					return 0;
				}
			});
		}
		this.noNamesFoundElement.innerHTML = "";
		this.currentNamesElement.innerHTML = "";
		if(names.length == 0) {
			this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
		}
		var _g1 = 0;
		while(_g1 < names.length) {
			var name2 = names[_g1];
			++_g1;
			var li = window.document.createElement("li");
			if(!(name2 != null)) {
				throw new js__$Boot_HaxeError("FAIL: str != null");
			}
			li.textContent = HxOverrides.substr(name2,0,1).toUpperCase() + HxOverrides.substr(name2,1,name2.length - 1);
			this.currentNamesElement.appendChild(li);
		}
	}
	,generateForRandomPreset: function() {
		var topics = Type.getClassFields(TrainingDatas);
		var topic = topics[Std.random(topics.length)];
		this.set_trainingDataKey(topic);
		var data = this.trainingDataTextEdit.value;
		if(data == null || data.length == 0) {
			return;
		}
		var arr = data.split(" ");
		if(arr.length > 0) {
			var presetName = this.get_trainingDataKey();
			this.namesTitleElement.innerHTML = presetName;
			this.duplicateTrie = new markov_util_PrefixTrie();
			var _g = 0;
			while(_g < arr.length) {
				var name = arr[_g];
				++_g;
				this.duplicateTrie.insert(name);
			}
			this.generator = new markov_namegen_NameGenerator(arr,this.order,this.prior);
			var names = [];
			var startTime = new Date().getTime();
			var currentTime = new Date().getTime();
			var regex = this.get_regexMatch() == "" ? null : new EReg(this.get_regexMatch(),"i");
			while(names.length < this.maxWordsToGenerate && currentTime < startTime + this.maxProcessingTime) {
				var name1 = this.generator.generateName(this.minLength,this.maxLength,this.get_startsWith(),this.get_endsWith(),this.get_includes(),this.get_excludes(),regex);
				if(name1 != null && !this.duplicateTrie.find(name1)) {
					names.push(name1);
					this.duplicateTrie.insert(name1);
				}
				currentTime = new Date().getTime();
			}
			var _gthis = this;
			this.lastNames = names;
			if(this.get_similar().length > 0) {
				names.sort(function(x,y) {
					var target = _gthis.get_similar();
					if(!(x != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var xSimilarity;
					if(x.length == 0) {
						xSimilarity = target.length;
					} else if(target.length == 0) {
						xSimilarity = x.length;
					} else {
						var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
						xSimilarity = table[table.length - 1];
					}
					var target1 = _gthis.get_similar();
					if(!(y != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target1 != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var ySimilarity;
					if(y.length == 0) {
						ySimilarity = target1.length;
					} else if(target1.length == 0) {
						ySimilarity = y.length;
					} else {
						var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
						ySimilarity = table1[table1.length - 1];
					}
					if(xSimilarity > ySimilarity) {
						return 1;
					} else if(xSimilarity < ySimilarity) {
						return -1;
					} else {
						return 0;
					}
				});
			}
			this.noNamesFoundElement.innerHTML = "";
			this.currentNamesElement.innerHTML = "";
			if(names.length == 0) {
				this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
			}
			var _g1 = 0;
			while(_g1 < names.length) {
				var name2 = names[_g1];
				++_g1;
				var li = window.document.createElement("li");
				if(!(name2 != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				li.textContent = HxOverrides.substr(name2,0,1).toUpperCase() + HxOverrides.substr(name2,1,name2.length - 1);
				this.currentNamesElement.appendChild(li);
			}
		}
	}
	,generateForCurrentSettings: function() {
		var data = this.trainingDataTextEdit.value;
		if(data == null || data.length == 0) {
			return;
		}
		var arr = data.split(" ");
		if(arr.length > 0) {
			var presetName = this.get_trainingDataKey();
			this.namesTitleElement.innerHTML = presetName;
			this.duplicateTrie = new markov_util_PrefixTrie();
			var _g = 0;
			while(_g < arr.length) {
				var name = arr[_g];
				++_g;
				this.duplicateTrie.insert(name);
			}
			this.generator = new markov_namegen_NameGenerator(arr,this.order,this.prior);
			var names = [];
			var startTime = new Date().getTime();
			var currentTime = new Date().getTime();
			var regex = this.get_regexMatch() == "" ? null : new EReg(this.get_regexMatch(),"i");
			while(names.length < this.maxWordsToGenerate && currentTime < startTime + this.maxProcessingTime) {
				var name1 = this.generator.generateName(this.minLength,this.maxLength,this.get_startsWith(),this.get_endsWith(),this.get_includes(),this.get_excludes(),regex);
				if(name1 != null && !this.duplicateTrie.find(name1)) {
					names.push(name1);
					this.duplicateTrie.insert(name1);
				}
				currentTime = new Date().getTime();
			}
			var _gthis = this;
			this.lastNames = names;
			if(this.get_similar().length > 0) {
				names.sort(function(x,y) {
					var target = _gthis.get_similar();
					if(!(x != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var xSimilarity;
					if(x.length == 0) {
						xSimilarity = target.length;
					} else if(target.length == 0) {
						xSimilarity = x.length;
					} else {
						var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
						xSimilarity = table[table.length - 1];
					}
					var target1 = _gthis.get_similar();
					if(!(y != null)) {
						throw new js__$Boot_HaxeError("FAIL: source != null");
					}
					if(!(target1 != null)) {
						throw new js__$Boot_HaxeError("FAIL: target != null");
					}
					var ySimilarity;
					if(y.length == 0) {
						ySimilarity = target1.length;
					} else if(target1.length == 0) {
						ySimilarity = y.length;
					} else {
						var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
						ySimilarity = table1[table1.length - 1];
					}
					if(xSimilarity > ySimilarity) {
						return 1;
					} else if(xSimilarity < ySimilarity) {
						return -1;
					} else {
						return 0;
					}
				});
			}
			this.noNamesFoundElement.innerHTML = "";
			this.currentNamesElement.innerHTML = "";
			if(names.length == 0) {
				this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
			}
			var _g1 = 0;
			while(_g1 < names.length) {
				var name2 = names[_g1];
				++_g1;
				var li = window.document.createElement("li");
				if(!(name2 != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				li.textContent = HxOverrides.substr(name2,0,1).toUpperCase() + HxOverrides.substr(name2,1,name2.length - 1);
				this.currentNamesElement.appendChild(li);
			}
		}
	}
	,setNames: function(names) {
		var _gthis = this;
		this.lastNames = names;
		if(this.get_similar().length > 0) {
			names.sort(function(x,y) {
				var target = _gthis.get_similar();
				if(!(x != null)) {
					throw new js__$Boot_HaxeError("FAIL: source != null");
				}
				if(!(target != null)) {
					throw new js__$Boot_HaxeError("FAIL: target != null");
				}
				var xSimilarity;
				if(x.length == 0) {
					xSimilarity = target.length;
				} else if(target.length == 0) {
					xSimilarity = x.length;
				} else {
					var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(x,target,true);
					xSimilarity = table[table.length - 1];
				}
				var target1 = _gthis.get_similar();
				if(!(y != null)) {
					throw new js__$Boot_HaxeError("FAIL: source != null");
				}
				if(!(target1 != null)) {
					throw new js__$Boot_HaxeError("FAIL: target != null");
				}
				var ySimilarity;
				if(y.length == 0) {
					ySimilarity = target1.length;
				} else if(target1.length == 0) {
					ySimilarity = y.length;
				} else {
					var table1 = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(y,target1,true);
					ySimilarity = table1[table1.length - 1];
				}
				if(xSimilarity > ySimilarity) {
					return 1;
				} else if(xSimilarity < ySimilarity) {
					return -1;
				} else {
					return 0;
				}
			});
		}
		this.noNamesFoundElement.innerHTML = "";
		this.currentNamesElement.innerHTML = "";
		if(names.length == 0) {
			this.noNamesFoundElement.textContent = "No names found, try again or change the name generation settings. Reducing the model order, adjusting the allowed word length, increasing the prior or removing the filters may help.";
		}
		var _g = 0;
		while(_g < names.length) {
			var name = names[_g];
			++_g;
			var li = window.document.createElement("li");
			if(!(name != null)) {
				throw new js__$Boot_HaxeError("FAIL: str != null");
			}
			li.textContent = HxOverrides.substr(name,0,1).toUpperCase() + HxOverrides.substr(name,1,name.length - 1);
			this.currentNamesElement.appendChild(li);
		}
	}
	,getTrainingDataForKey: function(key) {
		var _g = 0;
		var _g1 = this.trainingData;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			if(data.value == key) {
				return data;
			}
		}
		return null;
	}
	,get_trainingDataKey: function() {
		return this.nameDataPresetListElement.value;
	}
	,set_trainingDataKey: function(key) {
		this.nameDataPresetListElement.value = key;
		this.nameDataSearchBoxElement.value = key;
		this.onNameDataPresetSelectionChanged(key);
		return this.nameDataPresetListElement.value;
	}
	,get_startsWith: function() {
		return this.startsWithElement.value.toLowerCase();
	}
	,set_startsWith: function(s) {
		return this.startsWithElement.value = s.toLowerCase();
	}
	,get_endsWith: function() {
		return this.endsWithElement.value.toLowerCase();
	}
	,set_endsWith: function(s) {
		return this.endsWithElement.value = s.toLowerCase();
	}
	,get_includes: function() {
		return this.includesElement.value.toLowerCase();
	}
	,set_includes: function(s) {
		return this.includesElement.value = s.toLowerCase();
	}
	,get_excludes: function() {
		return this.excludesElement.value.toLowerCase();
	}
	,set_excludes: function(s) {
		return this.excludesElement.value = s.toLowerCase();
	}
	,get_similar: function() {
		return this.similarElement.value.toLowerCase();
	}
	,set_similar: function(s) {
		return this.similarElement.value = s.toLowerCase();
	}
	,get_regexMatch: function() {
		return this.regexMatchElement.value;
	}
	,set_regexMatch: function(s) {
		return this.regexMatchElement.value = s;
	}
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = true;
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
var _$UInt_UInt_$Impl_$ = {};
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var markov_namegen_Generator = function(data,order,prior) {
	if(!(data != null)) {
		throw new js__$Boot_HaxeError("FAIL: data != null");
	}
	if(!_$UInt_UInt_$Impl_$.gte(order,1)) {
		throw new js__$Boot_HaxeError("FAIL: order >= 1");
	}
	if(!(prior >= 0)) {
		throw new js__$Boot_HaxeError("FAIL: prior >= 0");
	}
	this.order = order;
	this.prior = prior;
	var letters = markov_util__$ArraySet_ArraySet_$Impl_$.create();
	var _g = 0;
	while(_g < data.length) {
		var word = data[_g];
		++_g;
		var _g2 = 0;
		var _g1 = word.length;
		while(_g2 < _g1) {
			var i = _g2++;
			markov_util__$ArraySet_ArraySet_$Impl_$.add(letters,word.charAt(i));
		}
	}
	letters.sort(function(a,b) {
		if(a < b) {
			return -1;
		}
		if(a > b) {
			return 1;
		}
		return 0;
	});
	var domain = markov_util__$ArraySet_ArraySet_$Impl_$.toArray(letters);
	domain.splice(0,0,"#");
	this.models = [];
	var _g11 = 0;
	var _g3 = order;
	while(_g11 < _g3) {
		var i1 = _g11++;
		this.models.push(new markov_namegen_Model(data.slice(),order - i1,prior,domain));
	}
};
markov_namegen_Generator.__name__ = true;
markov_namegen_Generator.prototype = {
	generate: function() {
		var times = this.order;
		if(!true) {
			throw new js__$Boot_HaxeError("FAIL: str != null");
		}
		if(!(times >= 1)) {
			throw new js__$Boot_HaxeError("FAIL: times >= 1");
		}
		var output = "";
		var _g1 = 0;
		var _g = times;
		while(_g1 < _g) {
			var i = _g1++;
			output += "#";
		}
		var word = output;
		var letter = this.getLetter(word);
		while(letter != "#") {
			if(letter != null) {
				word += letter;
			}
			letter = this.getLetter(word);
		}
		return word;
	}
	,getLetter: function(context) {
		if(!(context != null)) {
			throw new js__$Boot_HaxeError("FAIL: context != null");
		}
		if(!(context.length > 0)) {
			throw new js__$Boot_HaxeError("FAIL: context.length > 0");
		}
		var letter = null;
		var context1 = context.substring(context.length - this.order,context.length);
		var _g = 0;
		var _g1 = this.models;
		while(_g < _g1.length) {
			var model = _g1[_g];
			++_g;
			letter = model.generate(context1);
			if(letter == null) {
				context1 = context1.substring(1);
			} else {
				break;
			}
		}
		return letter;
	}
};
var markov_namegen_Model = function(data,order,prior,alphabet) {
	if(!(alphabet != null && data != null)) {
		throw new js__$Boot_HaxeError("FAIL: alphabet != null && data != null");
	}
	if(!(alphabet.length > 0 && data.length > 0)) {
		throw new js__$Boot_HaxeError("FAIL: alphabet.length > 0 && data.length > 0");
	}
	if(!(prior >= 0 && prior <= 1)) {
		throw new js__$Boot_HaxeError("FAIL: prior >= 0 && prior <= 1");
	}
	this.order = order;
	this.prior = prior;
	this.alphabet = alphabet;
	this.observations = new haxe_ds_StringMap();
	this.train(data);
	this.buildChains();
};
markov_namegen_Model.__name__ = true;
markov_namegen_Model.countMatches = function(arr,v) {
	if(arr == null) {
		return 0;
	}
	var i = 0;
	var _g = 0;
	while(_g < arr.length) {
		var s = arr[_g];
		++_g;
		if(s == v) {
			++i;
		}
	}
	return i;
};
markov_namegen_Model.selectIndex = function(chain) {
	var totals = [];
	var accumulator = 0;
	var _g = 0;
	while(_g < chain.length) {
		var weight = chain[_g];
		++_g;
		accumulator += weight;
		totals.push(accumulator);
	}
	var rand = Math.random() * accumulator;
	var _g1 = 0;
	var _g2 = totals.length;
	while(_g1 < _g2) {
		var i = _g1++;
		if(rand < totals[i]) {
			return i;
		}
	}
	return 0;
};
markov_namegen_Model.prototype = {
	generate: function(context) {
		if(!(context != null)) {
			throw new js__$Boot_HaxeError("FAIL: context != null");
		}
		var _this = this.chains;
		var chain = __map_reserved[context] != null ? _this.getReserved(context) : _this.h[context];
		if(chain == null) {
			return null;
		} else {
			if(!(chain.length > 0)) {
				throw new js__$Boot_HaxeError("FAIL: chain.length > 0");
			}
			return this.alphabet[markov_namegen_Model.selectIndex(chain)];
		}
	}
	,retrain: function(data) {
		if(!(data != null)) {
			throw new js__$Boot_HaxeError("FAIL: data != null");
		}
		this.train(data);
		this.buildChains();
	}
	,train: function(data) {
		while(data.length != 0) {
			var d = data.pop();
			var times = this.order;
			if(!true) {
				throw new js__$Boot_HaxeError("FAIL: str != null");
			}
			if(!(times >= 1)) {
				throw new js__$Boot_HaxeError("FAIL: times >= 1");
			}
			var output = "";
			var _g1 = 0;
			var _g = times;
			while(_g1 < _g) {
				var i = _g1++;
				output += "#";
			}
			d = output + d + "#";
			var _g11 = 0;
			var _g2 = d.length - this.order;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var key = d.substring(i1,i1 + this.order);
				var _this = this.observations;
				var value = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(value == null) {
					value = [];
					var _this1 = this.observations;
					if(__map_reserved[key] != null) {
						_this1.setReserved(key,value);
					} else {
						_this1.h[key] = value;
					}
				}
				value.push(d.charAt(i1 + this.order));
			}
		}
	}
	,buildChains: function() {
		this.chains = new haxe_ds_StringMap();
		var context = this.observations.keys();
		while(context.hasNext()) {
			var context1 = context.next();
			var _g = 0;
			var _g1 = this.alphabet;
			while(_g < _g1.length) {
				var prediction = _g1[_g];
				++_g;
				var _this = this.chains;
				var value = __map_reserved[context1] != null ? _this.getReserved(context1) : _this.h[context1];
				if(value == null) {
					value = [];
					var _this1 = this.chains;
					if(__map_reserved[context1] != null) {
						_this1.setReserved(context1,value);
					} else {
						_this1.h[context1] = value;
					}
				}
				var tmp = this.prior;
				var _this2 = this.observations;
				var arr = __map_reserved[context1] != null ? _this2.getReserved(context1) : _this2.h[context1];
				var tmp1;
				if(arr == null) {
					tmp1 = 0;
				} else {
					var i = 0;
					var _g2 = 0;
					while(_g2 < arr.length) {
						var s = arr[_g2];
						++_g2;
						if(s == prediction) {
							++i;
						}
					}
					tmp1 = i;
				}
				value.push(tmp + tmp1);
			}
		}
	}
};
var markov_namegen_NameGenerator = function(data,order,prior) {
	this.generator = new markov_namegen_Generator(data,order,prior);
};
markov_namegen_NameGenerator.__name__ = true;
markov_namegen_NameGenerator.prototype = {
	generateName: function(minLength,maxLength,startsWith,endsWith,includes,excludes,regexMatch) {
		var name = "";
		name = this.generator.generate();
		name = StringTools.replace(name,"#","");
		var tmp;
		var tmp1;
		var tmp2;
		if(name.length >= minLength && name.length <= maxLength && StringTools.startsWith(name,startsWith) && StringTools.endsWith(name,endsWith)) {
			if(includes.length != 0) {
				if(!(name != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				if(!(includes != null)) {
					throw new js__$Boot_HaxeError("FAIL: substr != null");
				}
				tmp2 = name.indexOf(includes) >= 0;
			} else {
				tmp2 = true;
			}
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			if(excludes.length != 0) {
				if(!(name != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				if(!(excludes != null)) {
					throw new js__$Boot_HaxeError("FAIL: substr != null");
				}
				tmp1 = name.indexOf(excludes) < 0;
			} else {
				tmp1 = true;
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			if(regexMatch != null) {
				tmp = regexMatch.match(name);
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return name;
		}
		return null;
	}
	,generateNames: function(n,minLength,maxLength,startsWith,endsWith,includes,excludes,maxTimePerName,regexMatch) {
		if(maxTimePerName == null) {
			maxTimePerName = 0.02;
		}
		var names = [];
		var startTime = new Date().getTime();
		var currentTime = new Date().getTime();
		while(names.length < n && currentTime > startTime + maxTimePerName * n) {
			var name = this.generateName(minLength,maxLength,startsWith,endsWith,includes,excludes,regexMatch);
			if(name != null) {
				names.push(name);
			}
			currentTime = new Date().getTime();
		}
		return names;
	}
};
var markov_util__$ArraySet_ArraySet_$Impl_$ = {};
markov_util__$ArraySet_ArraySet_$Impl_$.__name__ = true;
markov_util__$ArraySet_ArraySet_$Impl_$.create = function(array) {
	if(array == null) {
		var this1 = [];
		return this1;
	}
	return markov_util__$ArraySet_ArraySet_$Impl_$.toSet(array);
};
markov_util__$ArraySet_ArraySet_$Impl_$.intersection = function(this1,set) {
	var result = [];
	var _g = 0;
	while(_g < this1.length) {
		var element = this1[_g];
		++_g;
		if(markov_util__$ArraySet_ArraySet_$Impl_$.contains(set,element)) {
			result.push(element);
		}
	}
	var this2 = result;
	return this2;
};
markov_util__$ArraySet_ArraySet_$Impl_$.union = function(this1,set) {
	return markov_util__$ArraySet_ArraySet_$Impl_$.toSet(this1.concat(markov_util__$ArraySet_ArraySet_$Impl_$.toArray(set)));
};
markov_util__$ArraySet_ArraySet_$Impl_$.unionArray = function(this1,array) {
	return markov_util__$ArraySet_ArraySet_$Impl_$.toSet(this1.concat(array));
};
markov_util__$ArraySet_ArraySet_$Impl_$.difference = function(this1,set) {
	var this2 = this1.slice();
	var result = this2;
	var element = HxOverrides.iter(set);
	while(element.hasNext()) {
		var element1 = element.next();
		HxOverrides.remove(result,element1);
	}
	var this3 = markov_util__$ArraySet_ArraySet_$Impl_$.toArray(result);
	return this3;
};
markov_util__$ArraySet_ArraySet_$Impl_$.add = function(this1,element) {
	if(!(element != null)) {
		throw new js__$Boot_HaxeError("FAIL: element != null");
	}
	if(markov_util__$ArraySet_ArraySet_$Impl_$.contains(this1,element)) {
		return false;
	}
	this1.push(element);
	return true;
};
markov_util__$ArraySet_ArraySet_$Impl_$.contains = function(this1,element) {
	var _g = 0;
	while(_g < this1.length) {
		var i = this1[_g];
		++_g;
		if(i == element) {
			return true;
		}
	}
	return false;
};
markov_util__$ArraySet_ArraySet_$Impl_$.copy = function(this1) {
	var this2 = this1.slice();
	return this2;
};
markov_util__$ArraySet_ArraySet_$Impl_$.slice = function(this1,position,end) {
	var this2 = this1.slice(position,end);
	return this2;
};
markov_util__$ArraySet_ArraySet_$Impl_$.splice = function(this1,position,length) {
	var this2 = this1.splice(position,length);
	return this2;
};
markov_util__$ArraySet_ArraySet_$Impl_$.toArray = function(this1) {
	return this1.slice();
};
markov_util__$ArraySet_ArraySet_$Impl_$.toSet = function(array) {
	var this1 = [];
	var set = this1;
	var _g = 0;
	while(_g < array.length) {
		var v = array[_g];
		++_g;
		markov_util__$ArraySet_ArraySet_$Impl_$.add(set,v);
	}
	return set;
};
markov_util__$ArraySet_ArraySet_$Impl_$._new = function(array) {
	var this1 = array;
	return this1;
};
var markov_util_EditDistanceMetrics = function() { };
markov_util_EditDistanceMetrics.__name__ = true;
markov_util_EditDistanceMetrics.levenshtein = function(source,target) {
	if(!(source != null)) {
		throw new js__$Boot_HaxeError("FAIL: source != null");
	}
	if(!(target != null)) {
		throw new js__$Boot_HaxeError("FAIL: target != null");
	}
	var slen = source.length;
	var tlen = target.length;
	if(slen == 0) {
		return tlen;
	}
	if(tlen == 0) {
		return slen;
	}
	var this1 = new Array(tlen + 1);
	var costs = this1;
	var _g1 = 0;
	var _g = costs.length;
	while(_g1 < _g) {
		var i = _g1++;
		costs[i] = i;
	}
	var s = 0;
	while(s < source.length) {
		costs[0] = s + 1;
		var corner = s;
		var t = 0;
		while(t < target.length) {
			var upper = costs[t + 1];
			if(source.charAt(s) == target.charAt(t)) {
				costs[t + 1] = corner;
			} else {
				var tc = upper < corner ? upper : corner;
				costs[t + 1] = (costs[t] < tc ? costs[t] : tc) + 1;
			}
			corner = upper;
			++t;
		}
		++s;
	}
	return costs[costs.length - 1];
};
markov_util_EditDistanceMetrics.damerauLevenshtein = function(source,target) {
	if(!(source != null)) {
		throw new js__$Boot_HaxeError("FAIL: source != null");
	}
	if(!(target != null)) {
		throw new js__$Boot_HaxeError("FAIL: target != null");
	}
	if(source.length == 0) {
		return target.length;
	}
	if(target.length == 0) {
		return source.length;
	}
	var table = markov_util_EditDistanceMetrics.damerauLevenshteinMatrix(source,target,true);
	return table[table.length - 1];
};
markov_util_EditDistanceMetrics.damerauLevenshteinMatrix = function(source,target,enableTranspositions) {
	if(enableTranspositions == null) {
		enableTranspositions = true;
	}
	if(!(source != null && target != null)) {
		throw new js__$Boot_HaxeError("FAIL: source != null && target != null");
	}
	var w = source.length;
	var h = target.length;
	if(w == 0 || h == 0) {
		var this1 = new Array(0);
		return this1;
	}
	++w;
	++h;
	var this2 = new Array(w * h);
	var costs = this2;
	var _g1 = 0;
	var _g = w;
	while(_g1 < _g) {
		var i = _g1++;
		costs[i] = i;
	}
	var _g11 = 1;
	var _g2 = h;
	while(_g11 < _g2) {
		var j = _g11++;
		costs[j * w] = j;
	}
	var cost = 0;
	var _g12 = 1;
	var _g3 = w;
	while(_g12 < _g3) {
		var x = _g12++;
		var _g31 = 1;
		var _g21 = h;
		while(_g31 < _g21) {
			var y = _g31++;
			if(source.charAt(x - 1) == target.charAt(y - 1)) {
				cost = 0;
			} else {
				cost = 1;
			}
			var a = costs[x - 1 + y * w] + 1;
			var a1 = costs[x + (y - 1) * w] + 1;
			var b = costs[x - 1 + (y - 1) * w] + cost;
			var b1 = a1 < b ? a1 : b;
			costs[x + y * w] = a < b1 ? a : b1;
			if(enableTranspositions && x > 1 && y > 1 && source.charAt(x) == target.charAt(y - 1) && source.charAt(x - 1) == target.charAt(y)) {
				var a2 = costs[x + y * w];
				var b2 = costs[x - 2 + (y - 2) * w] + cost;
				costs[x + y * w] = a2 < b2 ? a2 : b2;
			}
		}
	}
	return costs;
};
var markov_util_IntExtensions = function() { };
markov_util_IntExtensions.__name__ = true;
markov_util_IntExtensions.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	}
	if(value > max) {
		return max;
	}
	return value;
};
markov_util_IntExtensions.min = function(a,b) {
	if(a < b) {
		return a;
	}
	return b;
};
var markov_util_PrefixTrie = function() {
	this.root = new markov_util_PrefixNode(null,"",0);
};
markov_util_PrefixTrie.__name__ = true;
markov_util_PrefixTrie.findChild = function(node,letter) {
	var _g = 0;
	var _g1 = node.children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		if(child.letter == letter) {
			return child;
		}
	}
	return null;
};
markov_util_PrefixTrie.prototype = {
	insert: function(word) {
		var current = this.root;
		var _g1 = 0;
		var _g = word.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ch = word.charAt(i);
			var child = markov_util_PrefixTrie.findChild(current,ch);
			if(child == null) {
				child = new markov_util_PrefixNode(current,ch,i);
				current.children.push(child);
			} else {
				child.frequency++;
			}
			current = child;
		}
		current.word = true;
		return current.frequency;
	}
	,find: function(word) {
		var current = this.root;
		var _g1 = 0;
		var _g = word.length;
		while(_g1 < _g) {
			var i = _g1++;
			current = markov_util_PrefixTrie.findChild(current,word.charAt(i));
			if(current == null) {
				return false;
			}
		}
		if(!current.word) {
			return false;
		}
		return true;
	}
	,getWords: function() {
		var queue = new List();
		queue.add(this.root);
		var words = [];
		while(!queue.isEmpty()) {
			var node = queue.pop();
			if(node.word) {
				var word = node.letter;
				var parent = node.parent;
				while(parent != null) {
					word += parent.letter;
					parent = parent.parent;
				}
				if(!(word != null)) {
					throw new js__$Boot_HaxeError("FAIL: str != null");
				}
				var arr = word.split("");
				arr.reverse();
				words.push(arr.join(""));
			}
			var _g = 0;
			var _g1 = node.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				queue.add(child);
			}
		}
		return words;
	}
};
var markov_util_PrefixNode = function(parent,letter,depth) {
	if(!(letter.length == 1 || parent == null && depth == 0)) {
		throw new js__$Boot_HaxeError("FAIL: letter.length == 1 || (parent == null && depth == 0)");
	}
	this.parent = parent;
	this.children = [];
	this.letter = letter;
	this.depth = depth;
	this.frequency = 1;
	this.word = false;
};
markov_util_PrefixNode.__name__ = true;
var markov_util_StringExtensions = function() { };
markov_util_StringExtensions.__name__ = true;
markov_util_StringExtensions.reverse = function(str) {
	if(!(str != null)) {
		throw new js__$Boot_HaxeError("FAIL: str != null");
	}
	var arr = str.split("");
	arr.reverse();
	return arr.join("");
};
markov_util_StringExtensions.repeat = function(str,times) {
	if(!(str != null)) {
		throw new js__$Boot_HaxeError("FAIL: str != null");
	}
	if(!(times >= 1)) {
		throw new js__$Boot_HaxeError("FAIL: times >= 1");
	}
	var output = "";
	var _g1 = 0;
	var _g = times;
	while(_g1 < _g) {
		var i = _g1++;
		output += str;
	}
	return output;
};
markov_util_StringExtensions.contains = function(str,substr) {
	if(!(str != null)) {
		throw new js__$Boot_HaxeError("FAIL: str != null");
	}
	if(!(substr != null)) {
		throw new js__$Boot_HaxeError("FAIL: substr != null");
	}
	return str.indexOf(substr) >= 0;
};
markov_util_StringExtensions.capitalize = function(str) {
	if(!(str != null)) {
		throw new js__$Boot_HaxeError("FAIL: str != null");
	}
	return HxOverrides.substr(str,0,1).toUpperCase() + HxOverrides.substr(str,1,str.length - 1);
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
var __map_reserved = {};
ID.header = "header";
ID.accordion = "accordion";
ID.trainingdatalist = "trainingdatalist";
ID.trainingdatasearchbox = "trainingdatasearchbox";
ID.namedatapresetslist = "namedatapresetslist";
ID.trainingdataedit = "trainingdataedit";
ID.minmaxlength = "minmaxlength";
ID.order = "order";
ID.prior = "prior";
ID.maxwordstogenerate = "maxwordstogenerate";
ID.maxtime = "maxtime";
ID.startswith = "startswith";
ID.endswith = "endswith";
ID.includes = "includes";
ID.excludes = "excludes";
ID.similar = "similar";
ID.regexmatch = "regexmatch";
ID.generate = "generate";
ID.random = "random";
ID.namestitle = "namestitle";
ID.nonamesfound = "nonamesfound";
ID.currentnames = "currentnames";
ID.shareresultsonly = "shareresultsonly";
ID.shareresultsandsettings = "shareresultsandsettings";
ID.shareedit = "shareedit";
TrainingDatas["American Forenames"] = ["aaron","ada","adam","adrian","adrienne","agnes","alan","albert","alberta","alberto","alex","alexander","alexandra","alexis","alfred","alfredo","alice","alicia","alison","allan","allen","allison","alma","alvin","alyssa","amanda","amber","amelia","amy","ana","andre","andrea","andrew","andy","angel","angel","angela","angelica","angelina","angie","anita","ann","anna","anne","annette","annie","anthony","antoinette","antonia","antonio","april","arlene","armando","arnold","arthur","ashley","audrey","barbara","barry","beatrice","becky","belinda","ben","benjamin","bernadette","bernard","bernice","bertha","bessie","beth","bethany","betsy","betty","beulah","beverly","bill","billie","billy","blanca","blanche","bob","bobbie","bobby","bonnie","brad","bradley","brandi","brandon","brandy","brenda","brent","brett","brian","bridget","brittany","brooke","bruce","bryan","byron","calvin","camille","candace","candice","carl","carla","carlos","carmen","carol","carole","caroline","carolyn","carrie","casey","casey","cassandra","catherine","cathy","cecelia","cecil","cecilia","celia","chad","charlene","charles","charlie","charlotte","chelsea","cheryl","chester","chris","christian","christie","christina","christine","christopher","christy","cindy","claire","clara","clarence","claude","claudia","clayton","clifford","clifton","clinton","clyde","cody","colleen","connie","constance","cora","corey","cory","courtney","craig","cristina","crystal","curtis","cynthia","daisy","dale","dan","dana","daniel","danielle","danny","darla","darlene","darrell","darren","darryl","daryl","dave","david","dawn","dean","deanna","debbie","deborah","debra","delia","della","delores","denise","dennis","derek","derrick","desiree","diana","diane","dianna","dianne","dixie","dolores","don","donald","donna","dora","doreen","doris","dorothy","douglas","duane","dustin","dwayne","dwight","earl","ebony","eddie","edgar","edith","edna","eduardo","edward","edwin","eileen","elaine","eleanor","elena","elisa","elizabeth","ella","ellen","elmer","eloise","elsa","elsie","elvira","emily","emma","enrique","eric","erica","erik","erika","erin","erma","ernest","ernestine","essie","estelle","esther","ethel","eugene","eula","eunice","eva","evelyn","everett","faith","fannie","faye","felicia","felix","fernando","flora","florence","floyd","frances","francis","francis","francisco","frank","franklin","fred","freda","freddie","frederick","gabriel","gail","gary","gayle","gene","geneva","genevieve","george","georgia","gerald","geraldine","gertrude","gilbert","gina","ginger","gladys","glen","glenda","glenn","gloria","gordon","grace","greg","gregory","gretchen","guadalupe","guy","gwen","gwendolyn","hannah","harold","harriet","harry","harvey","hattie","hazel","heather","hector","heidi","helen","henrietta","henry","herbert","herman","hilda","holly","hope","howard","hugh","ian","ida","inez","irene","iris","irma","isaac","isabel","ivan","jack","jackie","jacob","jacqueline","jacquelyn","jaime","jaime","james","jamie","jamie","jan","jana","jane","janet","janice","janie","janis","jared","jasmine","jason","javier","jay","jean","jeanette","jeanne","jeannette","jeannie","jeff","jeffery","jeffrey","jenna","jennie","jennifer","jenny","jeremy","jerome","jerry","jesse","jessica","jessie","jessie","jesus","jill","jim","jimmie","jimmy","jo","joan","joann","joanna","joanne","jodi","jody","joe","joel","johanna","john","johnnie","johnnie","johnny","jon","jonathan","jordan","jorge","jose","josefina","joseph","josephine","joshua","joy","joyce","juan","juana","juanita","judith","judy","julia","julian","julie","julio","june","justin","kara","karen","kari","karl","karla","kate","katherine","kathleen","kathryn","kathy","katie","katrina","kay","kayla","keith","kelley","kelli","kellie","kelly","kelly","ken","kendra","kenneth","kent","kerry","kevin","kim","kimberly","kirk","krista","kristen","kristi","kristie","kristin","kristina","kristine","kristy","krystal","kurt","kyle","lana","lance","larry","latoya","laura","lauren","laurie","laverne","lawrence","leah","lee","lee","leigh","lela","lena","leo","leon","leona","leonard","leroy","leslie","leslie","lester","leticia","lewis","lila","lillian","lillie","linda","lindsay","lindsey","lisa","lloyd","lois","lola","lonnie","lora","lorena","lorene","loretta","lori","lorraine","louis","louise","lucia","lucille","lucy","luis","lula","luz","lydia","lynda","lynette","lynn","lynne","mabel","mable","madeline","mae","maggie","mamie","mandy","manuel","marc","marcella","marcia","marcus","margaret","margarita","margie","marguerite","maria","marian","marianne","marie","marilyn","mario","marion","marion","marjorie","mark","marlene","marsha","marshall","marta","martha","martin","marvin","mary","maryann","mathew","matthew","mattie","maureen","maurice","max","maxine","may","megan","meghan","melanie","melba","melinda","melissa","melody","melvin","mercedes","meredith","michael","micheal","michele","michelle","miguel","mike","mildred","milton","mindy","minnie","miranda","miriam","misty","mitchell","molly","mona","monica","monique","morris","muriel","myra","myrtle","nadine","nancy","naomi","natalie","natasha","nathan","nathaniel","neil","nellie","nelson","nettie","nicholas","nichole","nicole","nina","nora","norma","norman","olga","olive","olivia","ollie","opal","ora","oscar","pam","pamela","pat","patricia","patrick","patsy","patti","patty","paul","paula","paulette","pauline","pearl","pedro","peggy","penny","perry","peter","philip","phillip","phyllis","priscilla","rachael","rachel","rafael","ralph","ramon","ramona","randall","randy","raquel","raul","ray","raymond","rebecca","regina","reginald","rene","renee","rhonda","ricardo","richard","rick","ricky","rita","robert","roberta","roberto","robin","robyn","rochelle","rodney","roger","roland","ron","ronald","ronnie","rosa","rosalie","rose","rosemarie","rosemary","rosie","ross","roxanne","roy","ruben","ruby","russell","ruth","ryan","sabrina","sadie","sally","salvador","sam","samantha","samuel","sandra","sandy","sara","sarah","scott","sean","sergio","seth","shane","shannon","shari","sharon","shawn","shawna","sheila","shelia","shelley","shelly","sheri","sherri","sherry","sheryl","shirley","sidney","silvia","sonia","sonja","sonya","sophia","sophie","stacey","stacy","stanley","stella","stephanie","stephen","steve","steven","sue","susan","susie","suzanne","sylvia","tabitha","tamara","tami","tammy","tanya","tara","tasha","ted","teresa","teri","terrance","terrence","terri","terry","terry","thelma","theodore","theresa","thomas","tiffany","tim","timothy","tina","todd","tom","tommy","toni","tony","tonya","tracey","traci","tracy","tracy","travis","tricia","troy","tyler","tyrone","valerie","vanessa","velma","vera","verna","vernon","veronica","vicki","vickie","vicky","victor","victoria","vincent","viola","violet","virgil","virginia","vivian","wade","wallace","walter","wanda","warren","wayne","wendy","wesley","whitney","willard","william","willie","willie","wilma","winifred","yolanda","yvette","yvonne","zachary"];
TrainingDatas["Animals"] = ["aardvark","aardwolf","albatross","alligator","alpaca","anaconda","angelfish","anglerfish","ant","anteater","antelope","antlion","ape","aphid","armadillo","asp","ass","baboon","badger","baldeagle","bandicoot","barnacle","barracuda","basilisk","bass","bat","bear","beaver","bedbug","bee","beetle","bird","bison","blackbird","blackpanther","blackwidow","bluebird","bluejay","bluewhale","boa","boar","bobcat","bonobo","buffalo","butterfly","buzzard","camel","capybara","caribou","carp","cat","caterpillar","catfish","catshark","centipede","chameleon","cheetah","chickadee","chicken","chimpanzee","chinchilla","chipmunk","clam","clownfish","cobra","cockroach","cod","condor","coral","cougar","cow","coyote","crab","crane","cranefly","crayfish","cricket","crocodile","crow","cuckoo","damselfly","deer","dingo","dog","dolphin","donkey","dormouse","dove","dragonfly","duck","dungbeetle","eagle","earthworm","earwig","echidna","eel","egret","elephant","elephantseal","elk","emu","ermine","falcon","ferret","finch","firefly","fish","flamingo","flea","fly","fowl","fox","frog","fruitbat","galliform","gamefowl","gazelle","gecko","gerbil","giantpanda","giantsquid","gibbon","giraffe","goat","goldfish","goose","gopher","gorilla","grasshopper","grizzlybear","groundshark","groundsloth","grouse","guan","guanaco","guineafowl","guineapig","gull","haddock","halibut","hammerheadshark","hamster","hare","hawk","hedgehog","hermitcrab","heron","herring","hippopotamus","hornet","horse","hoverfly","hummingbird","humpbackwhale","hyena","iguana","jackal","jaguar","jay","jellyfish","kangaroo","kingfisher","kiwi","koala","koi","komodo","krill","ladybug","lamprey","lark","leech","lemming","lemur","leopard","limpet","lion","lizard","llama","lobster","locust","loon","louse","lynx","macaw","mackerel","magpie","mammal","manatee","mantaray","marmoset","marmot","meadowlark","meerkat","mink","minnow","mite","mockingbird","mole","mollusk","mongoose","monitor","monkey","moose","mosquito","moth","mouse","mule","narwhal","newt","nightingale","octopus","orangutan","orca","ostrich","otter","owl","ox","panda","panther","parakeet","parrot","partridge","peacock","peafowl","pelican","penguin","perch","peregrine","pheasant","pig","pigeon","pike","piranha","platypus","polarbear","pony","porcupine","porpoise","possum","prairiedog","prawn","prayingmantis","primate","puffin","puma","python","quail","rabbit","raccoon","rat","rattlesnake","raven","redpanda","reindeer","reptile","rhinoceros","roadrunner","rodent","rook","rooster","salamander","salmon","scorpion","seahorse","sealion","seaslug","seasnail","shark","sheep","shrew","shrimp","silkworm","silverfish","skink","skunk","sloth","slug","snail","snake","snipe","sole","sparrow","spermwhale","spider","spidermonkey","squid","squirrel","starfish","stingray","stoat","stork","swallow","swan","swift","swordfish","swordtail","tarantula","termite","thrush","tiger","tigershark","toad","tortoise","toucan","treefrog","trout","tuna","turkey","turtle","tyrannosaurus","vampirebat","viper","vole","vulture","wallaby","walrus","wasp","waterbuffalo","weasel","whale","whitefish","wildcat","wildebeest","wolf","wolverine","wombat","woodpecker","yak","zebra"];
TrainingDatas["Birds"] = ["abbottsbooby","abdimsstork","acaciapiedbarbet","acadianflycatcher","acornwoodpecker","adamawaturtledove","adeliepenguin","admirablehummingbird","afeppigeon","afghansnowfinch","albatross","aleutiantern","allensgallinule","allenshummingbird","alpineaccentor","alpinechough","alpineswift","antbird","apostlebird","ashyfacedowl","ashyheadedgoose","ashyheadedgreenpigeon","ashywoodpecker","avocet","bandedkestrel","bandedkingfisher","bandedlapwing","bandedstilt","bandedwoodpecker","barbet","barbthroat","barheadedgoose","barkingowl","barnaclegoose","barneckedcuckoodove","barnswallow","barredowlet","batfalcon","bathawk","beachkingfisher","beardedreedling","beardedscreechowl","beardedvulture","beeeater","beehummingbird","bellbird","bittern","blackduck","blackgrouse","blackheadedoriole","blackheron","blackswan","blackswift","blacktern","bluebilledduck","bluejay","bluequail","bluethroat","bluetit","broadbill","bronzewing","browndove","brushturkey","bustard","buttonquail","buzzard","chickadee","cockoftherock","collareddove","condor","coot","cormorant","coucal","cowbird","crake","crestedhummingbird","crow","cuckoo","cuckoodove","cuckoohawk","cuckooshrike","darter","darter","dipper","dollarbird","dowitcher","dwarfkingfisher","eagleowl","eagleowl","emerald","emeraldcuckoo","fairybluebird","falcon","finch","finfoot","fisheagle","fishowl","flameback","flamingo","flicker","florican","flufftail","forestfalcon","francolin","frigatebird","fruitdove","fruiteater","gannet","glossystarling","gnatcatcher","goawaybird","goldeneye","goldenplover","goldensparrow","goldfinch","goose","goshawk","grassowl","greenpigeon","greenpigeon","greyhornbill","greywoodpecker","groundcuckoo","grounddove","guan","guineafowl","gull","harrier","harrierhawk","hawkeagle","hawkowl","heron","herringgull","hillstar","hobby","honeybird","honeybuzzard","hoopoe","hornbill","hummingbird","imperialpigeon","jacamar","jacana","jewelbabbler","kestrel","kingfisher","lapwing","lapwing","lark","logrunner","magpie","mango","marshharrier","maskedowl","metaltail","monarchbird","mountaintoucan","murrelet","nativehen","needletail","nighthawk","nightheron","nightjar","nunbird","olivepigeon","openbill","owlet","oystercatcher","paintedsnipe","palmswift","paradiseflycatcher","partridge","peacockpheasant","penguin","petrel","pheasant","piculet","piculet","piedhornbill","puffbird","puffin","puffleg","pygmyfalcon","pygmygoose","pygmykingfisher","pygmyowl","rail","redstart","reedwarbler","robin","rockjumper","rockpigeon","sacredibis","sandgrouse","satinbird","scimitarbill","scopsowl","screechowl","scrubfowl","scurassow","serpenteagle","shag","sheartail","shearwater","sheathbill","shelduck","shoveler","sicklebill","skimmer","snipe","snowcock","sparrow","sparrowhawk","spinetail","spoonbill","spurfowl","starfrontlet","starling","stork","stormpetrel","streamertail","sugarbird","sunbeam","swamphen","swamphen","swift","swiftlet","teal","tern","thorntail","threetoedwoodpecker","throatedmountaingem","throatedsunangel","tigerheron","treecreeper","trogon","warbler","wattledlapwing","wattleeye","waxbill","whistlingduck","whiteeye","whiteibis","whitepelican","wigeon","woodcock","woodowl","woodpecker","woodpigeon","woodquail","woodstar"];
TrainingDatas["Brythonic Deity Names"] = ["abandinus","abellio","abnoba","adsullata","aericura","agrona","alaunus","alisanos","ambisagrus","ancamna","ancasta","andarta","andraste","anextiomarus","ankou","arausio","arduinna","arnemetia","artio","arvernus","atepomarus","aufaniae","aventia","aveta","barinthus","belatucadros","belenus","belisama","borrum","borvo","brigantia","britannia","buxenus","campestres","camulus","canetonnessis","cernunnos","cicolluis","cimbrianus","cissonius","clota","cocidius","condatis","contrebis","coventina","damara","damona","esus","fagus","grannus","hueteris","huetiris","intarabus","iovantucarus","latobius","lenus","leucetios","lugus","luxovius","luxovius","maponos","maponus","moguns","moritasgus","mullo","nemausus","nerius","nodens","ogmios","robor","rudianos","sedatus","segomo","smertrios","sucellos","taranis","toutatis","tridamos","veteris","vheteris","vindonnus","vinotonus","virotutis","visucius","vitiris","vosegus"];
TrainingDatas["Dinosaurs"] = ["aachenosaurus","aardonyx","abdallahsaurus","abelisaurus","abrictosaurus","abrosaurus","abydosaurus","acanthopholis","achelousaurus","acheroraptor","achillesaurus","achillobator","acristavus","acrocanthosaurus","acrotholus","actiosaurus","adamantisaurus","adasaurus","adelolophus","adeopapposaurus","aegyptosaurus","aeolosaurus","aepisaurus","aerosteon","aetonyx","afrovenator","agathaumas","aggiosaurus","agilisaurus","agnosphitys","agrosaurus","agujaceratops","agustinia","ahshislepelta","ajancingenia","ajkaceratops","alamosaurus","alaskacephale","albalophosaurus","albertaceratops","albertadromeus","albertonykus","albertosaurus","albinykus","albisaurus","alcovasaurus","alectrosaurus","aletopelta","algoasaurus","alioramus","aliwalia","allosaurus","alnashetri","alocodon","altirhinus","altispinax","alvarezsaurus","alwalkeria","alxasaurus","amargasaurus","amargastegos","amargatitanis","amazonsaurus","ammosaurus","ampelosaurus","amphicoelias","amphicoelicaudia","amphisaurus","amtocephale","amtosaurus","amurosaurus","amygdalodon","anabisetia","anasazisaurus","anatosaurus","anatotitan","anchiceratops","anchiornis","anchisaurus","andesaurus","andhrasaurus","angaturama","angloposeidon","angolatitan","angulomastacator","aniksosaurus","animantarx","ankistrodon","ankylosaurus","anodontosaurus","anoplosaurus","anserimimus","antarctopelta","antarctosaurus","antetonitrus","anthodon","antrodemus","anzu","aorun","apatodon","apatoraptor","apatosaurus","appalachiosaurus","aquilops","aragosaurus","aralosaurus","araucanoraptor","archaeoceratops","archaeodontosaurus","archaeopteryx","archaeoraptor","archaeornis","archaeornithoides","archaeornithomimus","arcovenator","arctosaurus","arcusaurus","arenysaurus","argentinosaurus","argyrosaurus","aristosaurus","aristosuchus","arizonasaurus","arkansaurus","arkharavia","arrhinoceratops","arstanosaurus","asiaceratops","asiamericana","asiatosaurus","astrodon","astrodonius","astrodontaurus","astrophocaudia","asylosaurus","atacamatitan","atlantosaurus","atlasaurus","atlascopcosaurus","atopodentatus","atrociraptor","atsinganosaurus","aublysodon","aucasaurus","augustia","augustynolophus","auroraceratops","aurornis","australodocus","australovenator","austrocheirus","austroraptor","austrosaurus","avaceratops","avalonia","avalonianus","aviatyrannis","avimimus","avipes","azendohsaurus","bactrosaurus","bagaceratops","bagaraatan","bahariasaurus","bainoceratops","bakesaurus","balaur","balochisaurus","bambiraptor","banji","baotianmansaurus","barapasaurus","barilium","barosaurus","barrosasaurus","barsboldia","baryonyx","bashunosaurus","basutodon","bathygnathus","batyrosaurus","baurutitan","bayosaurus","becklespinax","beelemodon","beipiaosaurus","beishanlong","bellusaurus","belodon","berberosaurus","betasuchus","bicentenaria","bienosaurus","bihariosaurus","bilbeyhallorum","bissektipelta","bistahieversor","blancocerosaurus","blasisaurus","blikanasaurus","bolong","bonapartenykus","bonatitan","bonitasaura","borealosaurus","boreonykus","borogovia","bothriospondylus","brachiosaurus","brachyceratops","brachylophosaurus","brachypodosaurus","brachyrophus","brachytaenius","brachytrachelopan","bradycneme","brasileosaurus","brasilotitan","bravoceratops","breviceratops","brohisaurus","brontomerus","brontoraptor","brontosaurus","bruhathkayosaurus","bugenasaura","buitreraptor","byranjaffia","byronosaurus","caenagnathasia","caenagnathus","calamosaurus","calamospondylus","calamospondylus","callovosaurus","camarasaurus","camarillasaurus","camelotia","camposaurus","camptonotus","camptosaurus","campylodon","campylodoniscus","canardia","capitalsaurus","carcharodontosaurus","cardiodon","carnotaurus","caseosaurus","cathartesaura","cathetosaurus","caudipteryx","caudocoelus","caulodon","cedarosaurus","cedarpelta","cedrorestes","centemodon","centrosaurus","cerasinops","ceratonykus","ceratops","ceratosaurus","cetiosauriscus","cetiosaurus","changchunsaurus","changdusaurus","changyuraptor","chaoyangsaurus","charonosaurus","chasmosaurus","chassternbergia","chebsaurus","cheneosaurus","chialingosaurus","chiayusaurus","chienkosaurus","chilantaisaurus","chilesaurus","chindesaurus","chingkankousaurus","chinshakiangosaurus","chirostenotes","chondrosteosaurus","chromogisaurus","chuandongocoelurus","chuanjiesaurus","chuanqilong","chubutisaurus","chungkingosaurus","chuxiongosaurus","cinizasaurus","cionodon","citipati","cladeiodon","claorhynchus","claosaurus","clarencea","clasmodosaurus","clepsysaurus","coahuilaceratops","coelophysis","coelosaurus","coeluroides","coelurosauravus","coelurus","colepiocephale","coloradia","coloradisaurus","colossosaurus","comahuesaurus","comanchesaurus","compsognathus","compsosuchus","concavenator","conchoraptor","condorraptor","coronosaurus","corythosaurus","craspedodon","crataeomus","craterosaurus","creosaurus","crichtonpelta","crichtonsaurus","cristatusaurus","crosbysaurus","cruxicheiros","cryolophosaurus","cryptodraco","cryptoraptor","cryptosaurus","cryptovolans","cumnoria","daanosaurus","dacentrurus","dachongosaurus","daemonosaurus","dahalokely","dakosaurus","dakotadon","dakotaraptor","damalasaurus","dandakosaurus","danubiosaurus","daptosaurus","darwinsaurus","dashanpusaurus","daspletosaurus","dasygnathoides","dasygnathus","datanglong","datonglong","datousaurus","daurosaurus","daxiatitan","deinocheirus","deinodon","deinonychus","delapparentia","deltadromeus","demandasaurus","denversaurus","deuterosaurus","diabloceratops","diamantinasaurus","dianchungosaurus","diceratops","diceratus","diclonius","dicraeosaurus","didanodon","dilong","dilophosaurus","dimodosaurus","dinheirosaurus","dinodocus","dinosaurus","dinotyrannus","diplodocus","diplotomodon","diracodon","dolichosuchus","dollodon","domeykosaurus","dongbeititan","dongyangopelta","dongyangosaurus","doratodon","doryphorosaurus","draconyx","dracopelta","dracoraptor","deinonychusskeleton","dracorex","dracovenator","dravidosaurus","dreadnoughtus","drinker","dromaeosauroides","dromaeosaurus","dromiceiomimus","dromicosaurus","drusilasaura","dryosaurus","dryptosauroides","dryptosaurus","dubreuillosaurus","duriatitan","duriavenator","dynamosaurus","dyoplosaurus","dysalotosaurus","dysganus","dyslocosaurus","dystrophaeus","dystylosaurus","echinodon","edmarka","edmontonia","edmontosaurus","efraasia","einiosaurus","ekrixinatosaurus","elachistosuchus","elaltitan","elaphrosaurus","elmisaurus","elopteryx","elosaurus","elrhazosaurus","elvisaurus","emausaurus","embasaurus","enigmosaurus","eoabelisaurus","eobrontosaurus","eocarcharia","eoceratops","eocursor","eodromaeus","eohadrosaurus","eolambia","eomamenchisaurus","eoplophysis","eoraptor","eosinopteryx","eotrachodon","eotriceratops","eotyrannus","eousdryosaurus","epachthosaurus","epanterias","ephoenosaurus","epicampodon","epichirostenotes","epidendrosaurus","epidexipteryx","equijubus","erectopus","erketu","erliansaurus","erlikosaurus","eshanosaurus","euacanthus","eucamerotus","eucentrosaurus","eucercosaurus","eucnemesaurus","eucoelophysis","eugongbusaurus","euhelopus","euoplocephalus","eupodosaurus","eureodon","eurolimnornis","euronychodon","europasaurus","europelta","euskelosaurus","eustreptospondylus","fabrosaurus","falcarius","fenestrosaurus","ferganasaurus","ferganastegos","ferganocephale","fosterovenator","frenguellisaurus","fruitadens","fukuiraptor","fukuisaurus","fukuivenator","fukuititan","fulengia","fulgurotherium","fusinasus","fusuisaurus","futabasaurus","futalognkosaurus","gadolosaurus","galeamopus","galesaurus","gallimimus","galtonia","galveosaurus","galvesaurus","gannansaurus","gansutitan","ganzhousaurus","gargoyleosaurus","garudimimus","gasosaurus","gasparinisaura","gastonia","gavinosaurus","geminiraptor","genusaurus","genyodectes","geranosaurus","gideonmantellia","giganotosaurus","gigantoraptor","gigantoscelus","gigantspinosaurus","gilmoreosaurus","ginnareemimus","giraffatitan","glacialisaurus","glishades","glyptodontopelta","gobiceratops","gobisaurus","gobititan","gobivenator","godzillasaurus","gojirasaurus","gondwanatitan","gongbusaurus","gongpoquansaurus","gongxianosaurus","gorgosaurus","goyocephale","graciliceratops","graciliraptor","gracilisuchus","gravitholus","gresslyosaurus","griphornis","griphosaurus","gryphoceratops","gryponyx","gryposaurus","guaibasaurus","guanlong","gwyneddosaurus","gyposaurus","hadrosauravus","hadrosaurus","haestasaurus","hagryphus","hallopus","halticosaurus","hanssuesia","hanwulosaurus","haplocanthosaurus","haplocanthus","haplocheirus","harpymimus","haya","hecatasaurus","heilongjiangosaurus","heishansaurus","helioceratops","helopus","heptasteornis","herbstosaurus","herrerasaurus","hesperonychus","hesperosaurus","heterodontosaurus","heterosaurus","hexing","hexinlusaurus","heyuannia","hierosaurus","hippodraco","hironosaurus","hisanohamasaurus","histriasaurus","homalocephale","honghesaurus","hongshanosaurus","hoplitosaurus","hoplosaurus","horshamosaurus","hortalotarsus","huabeisaurus","hualianceratops","huanansaurus","huanghetitan","huangshanlong","huaxiagnathus","huaxiaosaurus","huaxiasaurus","huayangosaurus","hudiesaurus","huehuecanauhtlus","hulsanpes","hungarosaurus","huxleysaurus","hylaeosaurus","hylosaurus","hypacrosaurus","hypselorhachis","hypselosaurus","hypselospinus","hypsibema","hypsilophodon","hypsirophus","ichabodcraniosaurus","ichthyovenator","ignavusaurus","iguanacolossus","iguanodon","iguanoides","iguanosaurus","iliosuchus","ilokelesia","incisivosaurus","indosaurus","indosuchus","ingenia","inosaurus","irritator","isanosaurus","ischioceratops","ischisaurus","ischyrosaurus","isisaurus","issasaurus","itemirus","iuticosaurus","jainosaurus","jaklapallisaurus","janenschia","jaxartosaurus","jeholosaurus","jenghizkhan","jensenosaurus","jeyawati","jianchangosaurus","jiangjunmiaosaurus","jiangjunosaurus","jiangshanosaurus","jiangxisaurus","jinfengopteryx","jingshanosaurus","jintasaurus","jinzhousaurus","jiutaisaurus","jobaria","jubbulpuria","judiceratops","jurapteryx","jurassosaurus","juratyrant","juravenator","kaatedocus","kagasaurus","kaijiangosaurus","kakuru","kangnasaurus","karongasaurus","katepensaurus","katsuyamasaurus","kayentavenator","kazaklambia","kelmayisaurus","kemkemia","kentrosaurus","kentrurosaurus","kerberosaurus","khaan","khetranisaurus","kileskus","kinnareemimus","kitadanisaurus","kittysaurus","klamelisaurus","kol","koparion","koreaceratops","koshisaurus","kosmoceratops","kotasaurus","koutalisaurus","kritosaurus","kryptops","krzyzanowskisaurus","kukufeldia","kulceratops","kulindadromeus","kulindapteryx","kunbarrasaurus","kundurosaurus","kunmingosaurus","kuszholia","labocania","labrosaurus","laelaps","laevisuchus","lagerpeton","lagosuchus","lamaceratops","lambeosaurus","lametasaurus","lamplughsaura","lanasaurus","lancangosaurus","lancanjiangosaurus","lanzhousaurus","laosaurus","lapampasaurus","laplatasaurus","lapparentosaurus","laquintasaura","latirhinus","leaellynasaura","leinkupal","leipsanosaurus","lengosaurus","leonerasaurus","lepidocheirosaurus","lepidus","leptoceratops","leptorhynchos","leptospondylus","leshansaurus","lesothosaurus","lessemsaurus","levnesovia","lewisuchus","lexovisaurus","leyesaurus","liaoceratops","liaoningosaurus","libycosaurus","ligabueino","ligabuesaurus","ligomasaurus","likhoelesaurus","liliensternus","limaysaurus","limnornis","limnosaurus","limusaurus","linhenykus","linheraptor","linhevenator","lirainosaurus","lisboasaurus","liubangosaurus","loncosaurus","longisquama","longosaurus","lophorhothon","lophostropheus","loricatosaurus","loricosaurus","losillasaurus","lourinhanosaurus","lourinhasaurus","luanchuanraptor","luanpingosaurus","lucianosaurus","lufengosaurus","lukousaurus","luoyanggia","lurdusaurus","lusitanosaurus","lusotitan","lycorhinus","lythronax","macelognathus","machairasaurus","macrodontophion","macrogryphosaurus","macrophalangia","macroscelosaurus","macrurosaurus","madsenius","magnapaulia","magnirostris","magnosaurus","magulodon","magyarosaurus","mahakala","maiasaura","majungasaurus","majungatholus","malarguesaurus","malawisaurus","maleevosaurus","maleevus","mamenchisaurus","manidens","mandschurosaurus","manospondylus","mantellisaurus","mantellodon","mapusaurus","marasuchus","marisaurus","marmarospondylus","marshosaurus","martharaptor","masiakasaurus","massospondylus","maxakalisaurus","medusaceratops","megacervixosaurus","megadactylus","megadontosaurus","megalosaurus","megapnosaurus","megaraptor","melanorosaurus","mendozasaurus","mercuriceratops","meroktenos","metriacanthosaurus","microcephale","microceratops","microceratus","microcoelus","microdontosaurus","microhadrosaurus","micropachycephalosaurus","microraptor","microvenator","mifunesaurus","minmi","minotaurasaurus","miragaia","mirischia","moabosaurus","mochlodon","mohammadisaurus","mojoceratops","mongolosaurus","monkonosaurus","monoclonius","monolophosaurus","mononychus","mononykus","montanoceratops","morelladon","morinosaurus","morosaurus","morrosaurus","mosaiceratops","moshisaurus","mtapaiasaurus","mtotosaurus","mussaurus","muttaburrasaurus","muyelensaurus","mymoorapelta","naashoibitosaurus","nambalia","nankangia","nanningosaurus","nanosaurus","nanotyrannus","nanshiungosaurus","nanuqsaurus","nanyangosaurus","narambuenatitan","nasutoceratops","natronasaurus","nebulasaurus","nectosaurus","nedcolbertia","nedoceratops","neimongosaurus","nemegtia","nemegtomaia","nemegtosaurus","neosaurus","neosodon","neovenator","neuquenraptor","neuquensaurus","newtonsaurus","ngexisaurus","nigersaurus","ningyuansaurus","niobrarasaurus","nipponosaurus","noasaurus","nodocephalosaurus","nodosaurus","nomingia","nopcsaspondylus","normanniasaurus","nothronychus","notoceratops","notocolossus","notohypsilophodon","nqwebasaurus","nteregosaurus","nurosaurus","nuthetes","nyasasaurus","nyororosaurus","ojoceratops","ojoraptorsaurus","oligosaurus","olorotitan","omeisaurus","omosaurus","onychosaurus","oohkotokia","opisthocoelicaudia","oplosaurus","orcomimus","orinosaurus","orkoraptor","ornatotholus","ornithodesmus","ornithoides","ornitholestes","ornithomerus","ornithomimoides","ornithomimus","ornithopsis","ornithosuchus","ornithotarsus","orodromeus","orosaurus","orthogoniosaurus","orthomerus","oryctodromeus","oshanosaurus","osmakasaurus","ostafrikasaurus","othnielia","othnielosaurus","otogosaurus","ouranosaurus","overosaurus","oviraptor","ovoraptor","owenodon","oxalaia","ozraptor","pachycephalosaurus","pachyrhinosaurus","pachysauriscus","pachysaurops","pachysaurus","pachyspondylus","pachysuchus","padillasaurus","pakisaurus","palaeoctonus","palaeocursornis","palaeolimnornis","palaeopteryx","palaeosauriscus","palaeoscincus","paleosaurus","paludititan","paluxysaurus","pampadromaeus","pamparaptor","panamericansaurus","panguraptor","panoplosaurus","panphagia","pantydraco","paraiguanodon","paralititan","paranthodon","pararhabdodon","parasaurolophus","pareiasaurus","parksosaurus","paronychodon","parrosaurus","parvicursor","patagonykus","patagosaurus","pawpawsaurus","pectinodon","pedopenna","pegomastax","peishansaurus","pekinosaurus","pelecanimimus","pellegrinisaurus","peloroplites","pelorosaurus","peltosaurus","penelopognathus","pentaceratops","petrobrasaurus","phaedrolosaurus","philovenator","phuwiangosaurus","phyllodon","piatnitzkysaurus","picrodon","pinacosaurus","pisanosaurus","pitekunsaurus","piveteausaurus","planicoxa","plateosauravus","plateosaurus","platyceratops","plesiohadros","pleurocoelus","pleuropeltus","pneumatoarthrus","pneumatoraptor","podokesaurus","poekilopleuron","polacanthoides","polacanthus","polyodontosaurus","polyonax","ponerosteus","poposaurus","postosuchus","pradhania","prenocephale","prenoceratops","priconodon","priodontognathus","probrachylophosaurus","probactrosaurus","proceratops","proceratosaurus","procheneosaurus","procompsognathus","prodeinodon","proiguanodon","propanoplosaurus","proplanicoxa","prosaurolophus","protarchaeopteryx","protecovasaurus","protiguanodon","protoavis","protoceratops","protognathosaurus","protognathus","protohadros","protrachodon","proyandusaurus","pseudolagosuchus","psittacosaurus","pteropelyx","pterospondylus","puertasaurus","pukyongosaurus","pulanesaura","pycnonemosaurus","pyroraptor","qantassaurus","qianzhousaurus","qiaowanlong","qijianglong","qinlingosaurus","qingxiusaurus","qiupalong","quaesitosaurus","quetecsaurus","quilmesaurus","rachitrema","rahiolisaurus","rahona","rahonavis","rajasaurus","rapator","rapetosaurus","raptorex","ratchasimasaurus","rayososaurus","razanandrongobe","rebbachisaurus","regaliceratops","regnosaurus","revueltosaurus","rhabdodon","rhadinosaurus","rhinorex","rhodanosaurus","rhoetosaurus","rhopalodon","riabininohadros","richardoestesia","rileya","rileyasuchus","rinchenia","rinconsaurus","rioarribasaurus","riodevasaurus","riojasaurus","riojasuchus","rocasaurus","roccosaurus","rubeosaurus","rukwatitan","ruyangosaurus","sacisaurus","sahaliyania","saichania","saldamosaurus","salimosaurus","saltasaurus","saltopus","saltriosaurus","sanchusaurus","sangonghesaurus","sanjuansaurus","sanpasaurus","santanaraptor","sarahsaurus","sarcolestes","sarcosaurus","sarmientosaurus","saturnalia","sauraechinodon","saurolophus","sauroniops","sauropelta","saurophaganax","saurophagus","sauroplites","sauroposeidon","saurornithoides","saurornitholestes","scansoriopteryx","scaphonyx","scelidosaurus","scipionyx","sciurumimus","scleromochlus","scolosaurus","scutellosaurus","secernosaurus","sefapanosaurus","segisaurus","segnosaurus","seismosaurus","seitaad","selimanosaurus","sellacoxa","sellosaurus","serendipaceratops","shamosaurus","shanshanosaurus","shantungosaurus","shanxia","shanyangosaurus","shaochilong","shenzhousaurus","shidaisaurus","shixinggia","shuangmiaosaurus","shunosaurus","shuvosaurus","shuvuuia","siamodon","siamodracon","siamosaurus","siamotyrannus","sibirosaurus","sigilmassasaurus","silesaurus","siluosaurus","silvisaurus","similicaudipteryx","sinocalliopteryx","sinoceratops","sinocoelurus","sinopeltosaurus","sinornithoides","sinornithomimus","sinornithosaurus","sinosauropteryx","sinosaurus","sinotyrannus","sinovenator","sinraptor","sinusonasus","sirindhorna","skorpiovenator","smilodon","sonidosaurus","sonorasaurus","sphaerotholus","sphenosaurus","sphenospondylus","spinophorosaurus","spinops","spinosaurus","spinostropheus","spinosuchus","spondylosoma","squalodon","staurikosaurus","stegoceras","stegopelta","stegosaurides","stegosaurus","stenonychosaurus","stenopelix","stenotholus","stephanosaurus","stereocephalus","sterrholophus","stokesosaurus","stormbergia","strenusaurus","streptospondylus","struthiomimus","struthiosaurus","stygimoloch","stygivenator","styracosaurus","succinodon","suchomimus","suchosaurus","suchoprion","sugiyamasaurus","skeletonofsuchomimus","sulaimanisaurus","supersaurus","suuwassea","suzhousaurus","symphyrophus","syngonosaurus","syntarsus","syrmosaurus","szechuanosaurus","tachiraptor","talarurus","talenkauen","tambatitanis","tangvayosaurus","tanius","tanycolagreus","tanystropheus","tanystrosuchus","taohelong","tapinocephalus","tapuiasaurus","tarascosaurus","tarbosaurus","tarchia","tastavinsaurus","tatankacephalus","tatankaceratops","tataouinea","tatisaurus","taveirosaurus","tawasaurus","tazoudasaurus","technosaurus","tecovasaurus","tehuelchesaurus","teinurosaurus","teleocrater","telmatosaurus","tenantosaurus","tenchisaurus","tendaguria","tenontosaurus","teratophoneus","teratosaurus","termatosaurus","tethyshadros","tetragonosaurus","texacephale","texasetes","teyuwasu","thecocoelurus","thecodontosaurus","thecospondylus","theiophytalia","therizinosaurus","therosaurus","thescelosaurus","thespesius","thotobolosaurus","tianchisaurus","tianchungosaurus","tianyulong","tianyuraptor","tianzhenosaurus","tichosteus","tienshanosaurus","timimus","timurlengia","titanoceratops","tochisaurus","tomodon","tonganosaurus","tonouchisaurus","torilion","tornieria","torosaurus","torvosaurus","tototlmimus","trachodon","traukutitan","trialestes","triassolestes","tribelesodon","triceratops","trigonosaurus","trimucrodon","trinisaura","troodon","tsaagan","tsagantegia","tsintaosaurus","tsuchikurasaurus","tugulusaurus","tuojiangosaurus","turanoceratops","turiasaurus","tylocephale","tylosteus","tyrannosaurus","tyrannotitan","uberabatitan","udanoceratops","ugrosaurus","ugrunaaluk","uintasaurus","ultrasauros","umarsaurus","unaysaurus","unenlagia","unescoceratops","unicerosaurus","unquillosaurus","urbacodon","utahceratops","utahraptor","uteodon","vagaceratops","vahiny","valdoraptor","valdosaurus","variraptor","vectensia","vectisaurus","velafrons","velocipes","velociraptor","velocisaurus","venaticosuchus","venenosaurus","veterupristisaurus","viavenator","vitakridrinda","vitakrisaurus","volkheimeria","vulcanodon","wadhurstia","wakinosaurus","walgettosuchus","walkeria","walkersaurus","wangonisaurus","wannanosaurus","wellnhoferia","wendiceratops","willinakaqe","wintonotitan","wuerhosaurus","wulagasaurus","wulatelong","wyleyia","wyomingraptor","xenoceratops","xenoposeidon","xenotarsosaurus","xianshanosaurus","xiaosaurus","xiaotingia","xinjiangovenator","xinjiangtitan","xiongguanlong","xixianykus","xixiasaurus","xixiposaurus","xuanhanosaurus","xuanhuaceratops","xuanhuasaurus","xuwulong","yaleosaurus","yamaceratops","yandusaurus","yangchuanosaurus","yaverlandia","yezosaurus","yibinosaurus","yimenosaurus","yingshanosaurus","yinlong","yixianosaurus","yizhousaurus","yongjinglong","yuanmouraptor","yuanmousaurus","yueosaurus","yulong","yunganglong","yunnanosaurus","yunxianosaurus","yurgovuchia","yutyrannus","zalmoxes","zanabazar","zanclodon","zapalasaurus","zapsalis","zaraapelta","zatomus","zephyrosaurus","zhanghenglong","zhejiangosaurus","zhenyuanlong","zhongornis","zhongyuansaurus","zhuchengceratops","zhuchengosaurus","zhuchengtyrannus","ziapelta","zigongosaurus","zizhongosaurus","zuniceratops","zuolong","zuoyunlong","zupaysaurus"];
TrainingDatas["Dog Names"] = ["ace","apollo","argos","astro","bailey","balto","bandit","banga","banjo","baxter","bear","beau","benjy","biscuit","blue","bo","bobbie","bone","bonzo","boomer","bouncer","bowser","brady","brody","bruno","brutus","bubba","buck","buddy","bullet","bullseye","buster","cash","champ","champ","chance","charlie","chase","chester","chico","chip","chips","clifford","coco","cody","comet","cookie","cooper","copper","cujo","dakota","dash","dexter","diesel","digby","dingo","duke","einstein","elvis","fang","fearless","fido","fifi","finn","fluffy","frankie","gander","garm","george","gidget","gizmo","gunner","gus","hachi","hank","harley","henry","hooch","hunter","jack","jackson","jake","jasper","jax","joey","jump","king","kirby","kobe","laci","lady","laika","lassi","lassie","leo","loki","louie","lucca","lucky","lucy","luke","mac","marley","max","mickey","milo","moose","murphy","mutt","nash","oliver","ollie","oreo","oscar","otis","paddington","peanut","pepper","prince","rags","rascal","rex","rex","ribsy","riley","rocco","rocky","romeo","roscoe","rover","rowlf","rudy","rufus","rusty","sam","sammy","samson","scamp","scamper","scooby","scooter","scout","scud","shadow","shep","simba","skip","skipper","skippy","smoky","snoopy","snuff","sparky","spike","spot","squeak","tank","teddy","thor","toby","topdog","toto","trixie","tucker","tyson","vader","wags","wellington","winston","yeller","yoda","zeus","ziggy"];
TrainingDatas["Dragon Names"] = ["aithusa","alduin","ancalagon","ash","azhdeen","bahamut","blaze","buraki","burn","deathwing","discord","draco","dracolich","draconia","draconis","drago","dragon","draigoch","drake","drakon","drogon","eldrax","errol","fafnir","falkor","falkor","faranth","feyrbrand","firetongue","firnen","flame","flametongue","flammie","fraenir","glaedr","glaurung","glouroth","griffin","hasai","hydra","icefyre","kalameet","kalessin","katla","leviathan","livyathan","melba","melusine","mnementh","moon","narse","nidhogg","orm","orochi","ouroboros","paarthurnax","pyre","ramoth","rhaegal","ruin","ryuu","saphira","scatha","scorch","scorcher","seath","smaug","spyro","stormfly","tiamat","typhon","viserion","volvagia"];
TrainingDatas["Dutch Forenames"] = ["aad","aad","aadje","aafje","aagje","aagtje","aalbert","aalbrecht","aalderik","aaldert","aaldrik","aalrik","aard","aardse","aarnout","aart","aat","abby","abe","abel","abelone","abeltje","abraham","acco","achiel","ad","adaemkin","adalmar","adelheid","adelmar","adelwijn","adelwin","adolf","adri","adriaan","adrie","adrie","albert","aldemar","alex","alfons","alida","almar","alonso","alonzo","amber","andreas","andries","andré","anna","anne","anneke","annelies","annemieke","anouk","antoon","arend","arie","armando","arnoud","arnout","arthur","astrid","aäron","basiel","bastiaan","beatrijs","bep","bert","bo","boudewijn","bram","calvijn","catharijne","christiaan","christoffel","co","constantijn","cor","cor","cornelia","cornelis","corrie","daan","daas","daniel","daniël","david","denise","dirk","dirkje","edgar","eduard","eliene","eline","esmée","esther","evert","folkert","francis","frans","frederik","gerard","gerardus","gerrit","gert","gijs","godelieve","goedele","goele","gudula","gustaaf","hans","harm","helena","hendrick","herman","huberta","ieneke","ienje","ineke","ines","irene","jaap","jacob","jacoba","jacobus","jacqueline","jakob","jan","jannetje","jannie","jasmijn","jeroen","jet","jo","joachim","jochem","johan","johannes","joke","joost","joris","josefien","josepha","josephine","josian","josien","josina","karel","kees","kim","koenraad","laurens","leendert","leentje","lia","lidewij","lies","lieve","lieven","lodewijk","loes","lore","lotte","louis","lucas","luk","luuk","maarten","maartje","madelief","margreet","margriet","maria","marie","marietje","maritje","mariëlle","mark","martijn","martinus","matthijs","maurits","maximiliaan","meeuwis","menno","michel","mie","miek","mieke","miep","mies","miriam","mirjam","neeltje","nel","nicolaas","nienke","ollie","peter","pien","piet","pieter","pim","pol","renaat","renate","rie","rik","rinus","rogier","romaan","ruud","sabine","samuel","sander","sanne","sara","saskia","sebastiaan","sieme","sjaak","stefan","tessa","theo","thijs","thomas","tijn","timo","tom","tomas","tonny","tonny","trees","trijntje","truus","valentijn","veerle","veerletje","wiebrand","wilhelmina","willem","willemijn","wim","wouder","wouter"];
TrainingDatas["Egyptian Deities"] = ["aker","amenhotep","amheh","ammit","amun","amunet","anat","anhur","anput","anti","anubis","anuket","apedemak","apep","apis","arensnuphis","ash","astarte","aten","atum","baal","baalatgebal","babi","banebdjedet","bapef","bast","bat","bennu","bes","buchis","dedun","geb","ha","hapi","hathor","hatmehit","hedetet","heh","heka","heket","heryshaf","hesat","horus","hu","iah","iat","ihy","imentet","imhotep","ishtar","isis","iusaaset","khepri","kherty","khnum","khonsu","maahes","maat","mafdet","mandulis","mehen","mehetweret","mehit","menhit","meretseger","meskhenet","min","mnevis","montu","mut","nebethetepet","nefertum","nehebukau","nehmetawy","neith","nekhbet","neper","nephthys","nu","nut","osiris","pakhet","ptah","qetesh","ra","raettawy","renenutet","renpet","reshep","satet","seker","sekhmet","serapis","serket","seshat","set","shai","shed","shesmetet","shezmu","shu","sia","sobek","sopdet","sopdu","tabitjet","tatenen","taweret","tefnut","tenenet","thoth","tutu","unut","wadjet","wadjwer","weneg","wepwawet","werethekau","wosret","yam"];
TrainingDatas["Fish"] = ["albacore","albacore","alewife","alfonsino","algaeeater","alligator","alligatorfish","amberjack","anchovy","anchovy","anemonefish","angelfish","angler","anglerfish","arapaima","archerfish","armorhead","arowana","arrowtooth","aruana","ayu","baikal","bala","ballan","bandfish","bangus","banjo","barb","barbel","barfish","barracuda","barracuda","barracudina","barramundi","barreleye","baskingshark","bass","basslet","basslet","batfish","batfish","batray","beachsalmon","beardfish","betta","bichir","bigeye","bigscale","billfish","bitterling","blackchin","blackfish","blackfish","bleak","blenny","blenny","blobfish","blowfish","blueeye","bluefin","bluefish","bluegill","boafish","boarfish","bocaccio","boga","bonefish","bonito","bonnetmouth","bonytongue","bowfin","boxfish","bream","bream","brill","bristlemouth","bristlenose","brooder","brotula","brotula","buffalo","buffalofish","bullhead","bullheadshark","bullshark","bulltrout","burbot","buri","burmadanio","burrfish","butterflyfish","butterflyray","candiru","candlefish","capelin","cardinalfish","cardinalfish","cardinaltetra","carp","carp","carp","carpetshark","carpetshark","carpsucker","catalufa","catalufa","catfish","catfish","catla","catshark","cavefish","channelbass","channelcatfish","char","char","cherrysalmon","cherubfish","chimaera","chimaera","chinooksalmon","chub","chub","chubsucker","chumsalmon","cichlid","cichlid","cisco","clingfish","clingfish","clownfish","cobbler","cobia","cod","cod","codlet","codlet","codling","coelacanth","coffinfish","cohosalmon","coley","combfish","conger","cookiecutter","coolieloach","cornetfish","corydoras","cowfish","cownose","cowshark","crappie","crestfish","croaker","crocodileshark","cuckoowrasse","cusk","cuskeel","cutlassfish","cutthroateel","cutthroattrout","dab","dace","dace","daggertooth","daggertooth","damselfish","danio","danio","danio","darter","darter","darter","dartfish","dealfish","demoiselle","devario","devilray","dhufish","discus","diver","dogfish","dogfish","dogteeth","dolphinfish","dorab","dorado","dory","dory","dottyback","dragonet","dragonfish","dragonfish","dragongoby","driftfish","drum","duckbill","duskygrouper","eagleray","eel","eelgoby","eelpout","eeltailcatfish","elasmobranch","electriceel","elephantnose","elephantnose","elver","emperor","escolar","escolar","eulachon","fangtooth","featherback","fierasfer","filefish","fingerfish","firefish","flagblenny","flagfin","flagfish","flagtail","flashlightfish","flatfish","flathead","flathead","flier","flounder","flounder","flyingfish","flyingfish","footballfish","fringehead","frogfish","fusilier","galjoen","gangesshark","gar","garibaldi","garpike","ghostfish","ghostflathead","ghostknifefish","ghostpipefish","ghostshark","ghoul","gibberfish","glassfish","glassfish","goatfish","goatfish","goby","goby","goldentrout","goldeye","goldfish","gombessa","goosefish","gourami","gourami","gourami","graveldiver","grayling","grayling","greeneye","greenling","grenadier","groundshark","grouper","grunion","grunt","grunter","gruntsculpin","gudgeon","guitarfish","gulper","gulper","gunnel","gunnel","guppy","gurnard","gurnard","gurnard","haddock","hagfish","hairtail","hake","hake","halfbeak","halfmoon","halibut","halibut","halosaur","hamlet","hammerhead","hammerjaw","handfish","hardhead","harelip","hatchetfish","hatchetfish","hawkfish","herring","herring","hogsucker","hoki","hornshark","horsefish","horsemackerel","houndshark","houndshark","huchen","hussar","icefish","icefish","ide","ilisha","inanga","inconnu","jack","jackfish","javelin","jawfish","jellynose","jewel","jewelfish","jewfish","johndory","kafue","kahawai","kaluga","kanyu","kelpfish","kelpfish","kelpperch","killifish","killifish","kingfish","kingofthesalmon","knifefish","knifefish","knifejaw","koi","kokanee","kokopu","labyrinthfish","ladyfish","lagena","lampfish","lampfish","lamprey","lamprey","lancetfish","lanternfish","lanternshark","largemouth","leaffish","leatherjacket","lefteyeflounder","lemonshark","lemonsole","lenok","leopard","lightfish","limia","linedsole","ling","lingcod","lionfish","lionfish","livebearer","lizardfish","loach","longfin","loosejaw","louvar","luderick","lumpsucker","lungfish","lungfish","mackerel","mackerel","mackerelshark","madtom","mahseer","makoshark","manefish","manofwar","mantaray","marblefish","marlin","masu","medaka","medusafish","megamouthshark","menhaden","menhaden","milkfish","minnow","minnow","minnowofthedeep","modocsucker","mojarra","mola","mola","monkfish","mooneye","moonfish","mora","moray","moray","morid","morwong","mosquitofish","mouthbrooder","mrigal","mudcat","mudfish","mudminnow","mudminnow","mudminnow","mudskipper","mudsucker","mudsucker","mullet","mullet","mummichog","murraycod","muskellunge","mustardeel","nase","needlefish","nibblefish","noodlefish","noodlefish","nurseryfish","nurseshark","oarfish","oilfish","oilfish","oldwife","opah","opaleye","oscar","paddlefish","panga","paradisefish","parore","parrotfish","parrotfish","peacockflounder","peamouth","pearleye","pearlfish","pelicaneel","pencilfish","pencilsmelt","perch","pickerel","pickerel","pigfish","pike","pikeblenny","pikeconger","pikeperch","pilchard","pilotfish","pineapplefish","pineconefish","pinksalmon","pipefish","piranha","pirarucu","pirateperch","plaice","platy","platyfish","pleco","plownose","poacher","pollock","pollock","pollyfish","pomfret","pomfret","pompano","ponyfish","porbeagle","porcupinefish","porgy","powen","prickleback","prickleback","pricklefish","pricklyshark","prowfish","prowfish","puffer","puffer","pufferfish","pumpkinseed","pupfish","pupfish","píntano","quillback","quillfish","rabbitfish","ragfish","rainbowfish","rainbowfish","rainbowtrout","rasbora","ratfish","rattail","ray","razorfish","redfin","redfish","redlip","redmouth","redsalmon","redsnapper","reedfish","reefshark","reefshark","remora","requiemshark","ribboneel","ribbonfish","riceeel","ricefish","ridgehead","rivuline","rivuline","roach","roanokebass","rockbass","rockbeauty","rockcod","rockfish","rockfish","rockfish","rockling","rohu","ronquil","roosterfish","ropefish","roughscad","roughsculpin","roughy","roughy","roundhead","rudd","rudderfish","ruffe","sabertooth","sabertoothfish","sablefish","sailfish","salamanderfish","salmon","salmon","salmonshark","sandbarshark","sandburrower","sanddab","sanddiver","sandeel","sandfish","sandgoby","sandknifefish","sandlance","sandperch","sandroller","sandstargazer","sandtiger","sandtilefish","sardine","sargassumfish","sauger","saury","saury","sawfish","sawshark","scabbardfish","scabbardfish","scalyfin","scat","scissortail","scorpionfish","sculpin","sculpin","sculpin","scup","seabass","seabream","seacatfish","seachub","seadevil","seadragon","seahorse","sealamprey","seamoth","searaven","searobin","searobin","searobin","seasnail","seatoad","shad","shad","shark","sharksucker","sharpnose","sheatfish","sheepshead","sheepshead","shiner","shiner","shrimpfish","siamesefightingfish","sillago","silverside","silverside","sixgillray","sixgillshark","skate","skilfish","skipjacktuna","sleeper","sleepershark","slickhead","slimehead","slipmouth","smelt","smelt","smeltwhiting","snailfish","snakeeel","snakehead","snapper","snapper","snipeeel","snipeeel","snipeeel","snipefish","snoek","snook","snubnose","soldierfish","sole","spadefish","spaghettieel","spearfish","speckledtrout","spiderfish","spikefish","spinefoot","spinyfin","splitfin","spookfish","sprat","springfish","squaretail","squaretail","squaretail","squawfish","squawfish","squawfish","squeaker","squirrelfish","stargazer","stargazer","steelhead","stickleback","stickleback","stingfish","stingray","stingray","stonecat","stonefish","stoneroller","sturgeon","sturgeon","sturgeon","sucker","sunfish","sunfish","sunfish","surfperch","surgeonfish","swallower","swallower","swampeel","swampfish","sweeper","swordfish","swordtail","swordtail","sábalo","tadpolefish","tailor","taimen","tang","tang","tapetail","tarpon","tarwhine","telescopefish","tench","tenpounder","tenuis","tetra","tetra","thornfish","threadfin","threadtail","thresher","tigerbarb","tigerperch","tigershark","tilapia","tilefish","toadfish","tommyruff","tompot","tonguefish","tope","topminnow","torpedo","trahira","treefish","trevally","trevally","triggerfish","triggerfish","triplefin","triplespine","tripletail","trout","troutperch","trumpeter","trumpetfish","trunkfish","tubeblenny","tubeeye","tubeshoulder","tubesnout","tuna","tunny","turbot","turkeyfish","uaru","unicornfish","unicornfish","vanjaram","velvetfish","velvetfish","vendace","vimba","viperfish","viperfish","wahoo","wallago","walleye","walu","warmouth","wartyangler","waryfish","waspfish","weaselshark","weatherfish","weaver","weever","weeverfish","whalefish","whalefish","whalefish","whaleshark","whiff","whitebait","whitecroaker","whitefish","whitefish","whitemarlin","whiteshark","whiteshark","whitetip","whitetipshark","whiting","whiting","wobbegong","wolfeel","wolffish","wolfherring","wormeel","wormfish","wrasse","wrasse","wrymouth","yellowbass","yellowhead","yellowjack","yellowmargin","yellowtail","zander","zebrafish","zebraloach","zebrashark","ziege","zingel"];
TrainingDatas["French Forenames"] = ["adrien","agnès","alain","albert","alexandra","alexandre","alexis","alice","aline","amandine","amélie","andré","andrée","angélique","anne","annemarie","annick","annie","antoine","arlette","arnaud","arthur","audrey","aurore","aurélie","aurélien","baptiste","benjamin","benoît","bernadette","bernard","bertrand","brigitte","bruno","béatrice","camille","carole","caroline","catherine","chantal","charles","chloé","christelle","christian","christiane","christine","christophe","claire","clara","claude","claudine","clémence","clément","colette","coralie","corinne","cyril","cécile","cédric","céline","damien","daniel","danielle","danièle","david","delphine","denis","denise","didier","dominique","dominique","dylan","emma","emmanuel","emmanuelle","enzo","estelle","fabien","fabienne","fabrice","fanny","florence","florent","florian","francine","francis","franck","françois","françoise","frédéric","gabriel","gaétan","gaëlle","geneviève","georges","georgette","germaine","ghislaine","gilbert","gilles","ginette","gisèle","grégory","guillaume","guy","gérard","henri","henriette","hervé","hugo","huguette","hélène","inès","irène","isabelle","jacqueline","jacques","janine","jean","jeanclaude","jeanfrançois","jeanlouis","jeanluc","jeanmarc","jeanmarie","jeanmichel","jeanne","jeannine","jeanpaul","jeanpierre","jennifer","jessica","jocelyne","jonathan","joseph","josette","josé","joël","joëlle","julie","julien","juliette","justine","jérôme","karine","kevin","laetitia","laura","laure","laurence","laurent","liliane","lionel","louis","louise","loïc","luc","lucas","lucie","lucien","lucienne","ludovic","lydie","léa","madeleine","magali","manon","marc","marcel","marcelle","marguerite","maria","marie","mariechristine","marieclaude","mariethérèse","marine","marion","martine","mathieu","mathilde","matthieu","maurice","maxime","michaël","michel","micheline","michelle","michèle","mickaël","mireille","mohamed","monique","morgane","muriel","myriam","mélanie","mélissa","nadia","nadine","nathalie","nicolas","nicole","noémie","océane","odette","odile","olivier","pascal","pascale","patrice","patricia","patrick","paul","paulette","pauline","philippe","pierre","pierrette","quentin","raphaël","raymond","raymonde","rené","renée","richard","robert","roger","roland","romain","régine","régis","rémi","rémy","sabine","sabrina","samuel","sandra","sandrine","sarah","serge","simon","simone","solange","sonia","sophie","stéphane","stéphanie","suzanne","sylvain","sylvie","sébastien","séverine","thierry","thomas","théo","thérèse","valentin","valérie","vanessa","victor","vincent","virginie","véronique","william","xavier","yann","yannick","yves","yvette","yvonne","éliane","élisabeth","élise","élodie","émilie","éric","étienne","évelyne"];
TrainingDatas["German Forenames"] = ["achim","adele","adelheid","adolf","adrian","agnes","albert","alfred","alina","almut","alois","alvin","alwin","amalia","amelia","andrea","andreas","angelika","anna","annaliese","anneliese","annelise","ansgar","anton","armin","arndt","arnold","astrid","august","aurick","axel","barbara","bastian","beat","beata","benedikt","bernd","bertram","bianka","bodo","bruno","carl","carolina","caroline","cassandra","charlotte","christa","christel","christian","christof","claudia","colby","colton","corey","corina","dagmar","dagobert","daniel","david","diana","diedrich","dieter","dieterich","dietrich","donald","dustin","edith","edmund","eilhard","ekkehard","elfriede","elke","elmar","elsa","emil","emilie","emily","emma","emmerich","erhard","eric","erika","estelle","esther","eva","ewald","felix","ferdinand","florian","frank","franz","frauke","frederick","fredrik","friedemann","friedrich","fritz","gabriele","gebhard","georg","gerald","gerard","gerd","gerhardt","germar","gernot","gert","gertrude","gilbert","gisela","giselher","gottfried","gottlieb","gottschalk","greta","gretchen","grete","gretel","guido","gunther","götz","günther","hannah","hanne","hannelore","hans","harald","harold","hedy","heidemarie","heidi","heiner","heini","heino","heinrich","heinz","helena","helga","helge","hellmuth","helmut","helmuth","herbert","herman","hermann","hermine","herwig","hilda","hilde","hildegard","hilma","holger","horst","hubert","hunter","ilona","imelda","ingo","ingrid","irma","isa","isabella","jacob","jacqueline","jana","jermaine","jerome","joachim","johann","johanna","johannes","jonas","jonathan","joseph","jost","julia","jupp","jutta","jörg","jürgen","karin","karl","karlheinz","karsten","katja","katrin","katya","kerstin","kevin","klaus","klaus-peter","konrad","kurt","ladislaus","lars","lena","levin","liana","liesl","lina","lisbeth","lorentz","lothar","louella","louise","ludwig","lukas","lutz","lydia","lütold","magdalena","malte","malvina","manuel","marcus","margarete","maria","marianne","marina","mario","marius","marlene","marta","martin","matthias","maximilian","medard","meinrad","melvin","michaela","michel","michelle","milo","minna","miranda","mirco","miriam","mirko","mona","monika","moritz","nadine","nanne","natalie","nicolas","nicolaus","nicole","nikola","nina","nivaldo","olaf","olga","olivia","ortrud","oscar","othmar","otto","ottomar","patrick","paul","peter","philip","philipp","philippa","rachel","rainer","ralph","ramona","randall","reinhard","reinhold","richard","richenza","robert","roberta","robin","roger","rolf","roman","ronald","rosina","rudolph","rut","sabine","samuel","sander","sandra","sebastian","selma","severin","sheryl","siegfried","sigismund","sigmund","stefania","stephen","susanne","sven","svenja","sylvester","tamara","thomas","timo","tina","tobias","tom","udo","ulrich","ulrike","ursula","ute","utto","uwe","valter","veronica","victoria","viola","vollrath","walter","wenzel","werner","wernher","wiebke","wilhelm","wilhelmina","william","wiltrud","winfried","wolf","wolfgang","xenia","yvette"];
TrainingDatas["Hindu Deities"] = ["aakash","acyutah","adimurti","aditi","adityas","agni","ammavaru","anala","anila","anumati","anuradha","aranyani","aravan","ardhanari","ardra","arjuna","aruna","arundhati","aryadurga","aryaman","ashapura","aslesais","asura","asvayujau","aswiniis","ayyanar","ayyappan","ayyavaikundar","bagalamukhi","balaji","balambika","balarama","beeralingeswara","bhadra","bhadrakali","bhaga","bhairava","bhairavi","bharani","bharati","bhavani","bhishma","bhumidevi","bhumiya","bhutamata","bhuvaneshvari","brahma","brahman","brahmani","brihaspati","buddha","buddhi","budha","chamunda","chandra","chathan","chhinnamasta","chitragupta","daksha","dakshayani","danu","dattatreya","deva","devi","devnarayan","dhanvantari","dhara","dharma","dharma","dhatri","dhumavati","diti","draupadi","durga","ganesha","ganga","ganga","garuda","gayatri","ghanshyam","gusainji","hanuman","hanuman","hari","hrishikesh","indra","indrani","iravant","iravat","jagaddhatri","jagannath","jhulelal","jumadi","jyotiba","kali","kalki","kama","kamakhya","kamakshi","kamalatmika","kartikeya","kashyapa","kathyayini","ketu","khandoba","khatushyamji","khodiyar","kirata moorti","krishna","kubera","kumbhakarna","lakshman","lakshmi","lalitha","lambodar","mahakali","mahalasa","mahalaxmi","mahavidya","mahavishnu","mahesh","mallanna","manasa","mangala","manikanta","mariamman","mariamman","markandeya","maruts","matangi","matrikas","meenakshi","mhasoba","mitra","mohini","mookambika","mukyaprana","muneeswaran","muniandi","murugan","muthappan","muthyalamma","nandi","nandni","narada","narasimha","narayana","nataraja","nirrith","nirrta","nookambika","parashurama","parasiva","parjanya","parvati","pashupati","perumal","prajapati","prithvi","purusha","pushan","radha","radha","rahu","rama","ramnathi","ranganatha","rati","ratri","ravi","rbhus","renuka","revanta","rudra","samaleswari","saranyu","saraswati","saraswati","sati","savitar","savitr","sesha","shakti","shani","shantadurga","shitala","shiva","sita","skanda","soma","subrahmanya","surya","svaha","swaminarayan","tara","tejaji","tvashtri","ugratara","uma","urvashi","ushas","valli","vamana","varaha","varuna","vasu","vayu","veerabhadra","venkateshwara","vishnu","vishvaksena","vishwakarma","vithoba","vivasvat","yaksha","yakshini","yama","yami","yamini","yamuna","yellamma","yudhishthira"];
TrainingDatas["Icelandic Forenames"] = ["aage","aagot","aaron","abel","abela","abigael","abraham","ada","adam","adda","addi","addú","addý","adel","adela","adelía","adrían","adríana","adríel","adíel","adólf","agata","agatha","agla","agnar","agnea","agnes","agneta","agni","agða","akira","alanta","alba","albert","alberta","albína","alda","aldar","aldný","aldís","alena","aleta","aletta","alex","alexa","alexander","alexandra","alexandría","alexis","alexstrasa","alexía","alexíus","alfa","alfons","alfred","alfreð","alfífa","ali","alice","alida","alla","allan","alli","allý","alma","almar","alrekur","alrún","alva","alvar","alvilda","alvin","alída","alína","alís","alísa","amadea","amal","amalía","amanda","amelía","amil","amilía","amos","amy","amír","amíra","amý","analía","anastasía","anders","andra","andrea","andreas","andri","andrá","andré","andrés","andríana","anes","anetta","anfinn","angantýr","angela","angelía","angelíka","angi","anika","anita","anja","ann","anna","annabella","annalísa","annar","annarr","annas","anne","annel","annelí","annes","annetta","anney","annika","annía","anný","anthony","anton","antonía","antoníus","antóníus","aníka","anína","aníta","apríl","ara","aran","ardís","arent","ares","arey","ari","arilíus","arinbjörg","arinbjörn","aris","arisa","arja","armenía","arna","arnald","arnaldur","arnar","arnberg","arnbergur","arnbjörg","arnbjörn","arnborg","arndís","arndór","arnes","arney","arnfinna","arnfinnur","arnfreyr","arnfríður","arngarður","arngeir","arngerður","arngils","arngrímur","arngunnur","arnheiður","arnhildur","arnika","arnkatla","arnkell","arnlaug","arnlaugur","arnleif","arnleifur","arnljót","arnljótur","arnlín","arnmundur","arnmóður","arnoddur","arnold","arnrós","arnrún","arnsteinn","arnviður","arnór","arnóra","arnúlfur","arnþrúður","arnþór","arnþóra","aron","arthur","arthúr","artúr","aría","aríana","aríanna","aríaðna","aríel","aríela","aríella","arín","arína","arís","aríus","asael","askja","askur","aspar","assa","astrid","asía","asírí","atalía","atena","athena","atla","atlanta","atlas","atli","aurora","austar","austmann","austmar","austri","auðberg","auðbergur","auðbert","auðbjörg","auðbjörn","auðbjört","auðdís","auðgeir","auðkell","auðlín","auðmundur","auðna","auðný","auðrún","auðun","auðunn","auður","auður","auðólfur","axel","axelma","axelía","aðalberg","aðalbergur","aðalbert","aðalbjörg","aðalbjörn","aðalbjört","aðalborg","aðalborgar","aðaldís","aðalfríður","aðalgeir","aðalheiður","aðalmundur","aðalráður","aðalrós","aðalsteina","aðalsteinn","aðalsteinunn","aðalveig","aðalvíkingur","aðólf","aþena","baldey","baldrún","baldur","baldvin","baldvina","baldwin","baltasar","bambi","barbara","barbára","barri","barði","bassi","bassí","bastían","baugur","bebba","begga","beinir","beinteinn","beitir","bekan","belinda","bella","benedikt","benedikta","bengta","benidikt","benidikta","benjamín","benna","benney","benný","benoný","bent","benta","bentey","bentína","benvý","benía","beníta","benóní","benóný","bera","berent","berg","bergdís","bergey","bergfinnur","bergfríður","bergheiður","berghildur","berghreinn","bergjón","berglaug","berglind","bergljót","berglín","bergmann","bergmannía","bergmar","bergmundur","bergný","bergrán","bergrín","bergrós","bergrún","bergsteinn","bergsveina","bergsveinn","bergur","bergvin","bergþór","bergþóra","berit","bernhard","bernharð","bernharður","berni","bernódus","bernódía","bersi","berta","bertel","bertha","bertram","bessi","bessí","bestla","beta","betanía","betsý","bettý","betúel","bil","bill","birgir","birgit","birgitta","birkir","birna","birnir","birta","birtingur","birtir","birtna","bjargar","bjargdís","bjargey","bjargheiður","bjarghildur","bjarglind","bjargmundur","bjargþór","bjarkan","bjarkar","bjarkey","bjarki","bjarklind","bjarma","bjarmar","bjarmi","bjarnar","bjarndís","bjarney","bjarnfinnur","bjarnfreður","bjarnfríður","bjarngerður","bjarnharður","bjarnheiður","bjarnhildur","bjarnhéðinn","bjarni","bjarnlaug","bjarnlaugur","bjarnleifur","bjarnrún","bjarnsteinn","bjarnveig","bjarnólfur","bjarný","bjarnþrúður","bjarnþór","bjarnþóra","bjartey","bjartmann","bjartmar","bjartmey","bjartur","bjartþór","bjólan","bjólfur","björg","björgey","björgheiður","björghildur","björgmundur","björgvin","björgólfur","björgúlfur","björk","björn","björney","björnfríður","björnólfur","björt","bláey","bláklukka","blædís","blængur","blær","blær","blævar","blín","blíða","blómey","bobba","boga","bogdís","bogey","bogga","boghildur","bogi","bolli","borg","borgar","borgdís","borghildur","borgný","borgrún","borgúlfur","borgþór","borgþóra","botnía","boði","braga","braghildur","bragi","branddís","brandur","brandís","breki","bresi","brestir","briet","brigitta","brimar","brimdís","brimhildur","brimi","brimir","brimrún","brit","britt","britta","brjánn","broddi","bruno","bryndís","brynfríður","bryngeir","bryngerður","brynheiður","brynhildur","brynja","brynjar","brynjólfur","brynjúlfur","brynleifur","brynmar","brynný","brynsteinn","bryntýr","brynþór","brá","brák","bríana","bríanna","bríet","brími","brímir","burkney","burkni","bylgja","bára","bárður","bæring","bæringur","bæron","bíbí","bína","bóas","bóel","bói","bót","bóthildur","bótólfur","börkur","böðvar","búi","búri","camilla","caritas","carl","carla","carmen","cathinca","cecil","cecilia","cecilía","cesar","charlotta","charlotte","christa","christel","christian","christina","christine","christopher","clara","cæsar","cýrus","dagbjartur","dagbjörg","dagbjört","dagfari","dagfinnur","dagfríður","daggeir","daggrós","dagheiður","dagmann","dagmar","dagmey","dagný","dagnýr","dagrún","dagur","dagþór","dalbert","daldís","daley","dalla","dalli","dallilja","dalmann","dalmar","dalrós","dalvin","dalía","damjan","damon","dan","dana","danelíus","daney","danfríður","danheiður","danhildur","daniel","danival","dante","danía","daníel","daníela","daníella","daníval","dara","darri","daría","daríus","davíð","daðey","daði","daðína","debora","debóra","demus","dendý","dennis","deníel","didda","dilja","diljá","dimma","dimmblá","dimmey","diðrik","dofri","dolli","dominik","donna","doris","dorothea","drauma","draumey","draupnir","dreki","drengur","droplaug","drífa","drótt","dröfn","dufgus","dufþakur","dugfús","dvalinn","dynþór","dæja","día","díana","díanna","díma","dís","dísa","dísella","díómedes","dóa","dómald","dómaldi","dómaldur","dómhildur","dónald","dónaldur","dór","dóra","dórey","dóri","dóris","dórothea","dórótea","dóróthea","dósóþeus","dögg","dögun","dúa","dúfa","dúi","dúna","dúnn","dúnna","dýrborg","dýrfinna","dýri","dýrleif","dýrley","dýrmundur","dýrunn","ebba","ebbi","ebeneser","ebenezer","eberg","ebonney","edda","eddi","edel","edgar","edil","edilon","edit","edith","edvard","edvin","edward","edílon","efemía","efraím","egedía","eggert","eggrún","eggþór","egill","egla","eik","eikar","eileiþía","eilífur","einar","einbjörg","eindís","einey","einfríður","einhildur","einir","einrún","einvarður","einína","einþór","eir","eirdís","eirfinna","eirný","eiríka","eiríkur","eirún","eivin","eivör","eiðar","eiðný","eiðunn","eiður","elba","elberg","elbert","eldar","eldbjörg","eldey","eldgrímur","eldjárn","eldlilja","eldmar","eldon","eldrún","eldur","eldór","eldþóra","eleina","elektra","elena","elenborg","elentínus","elfa","elfar","elfráður","elfur","elimar","elina","elinborg","elinór","elis","elisabeth","elka","ella","ellen","ellert","elley","elli","ellisif","elliði","elly","ellín","ellís","ellý","elma","elmar","elna","elsa","elsabet","elsie","elsí","elsý","elva","elvar","elvi","elvin","elvira","elvis","elvíra","elvý","elí","elía","elía","elíana","elías","elíeser","elímar","elín","elína","elínbergur","elínbet","elínbjörg","elínbjört","elínborg","elíndís","elíngunnur","elínheiður","elínmundur","elínrós","elíná","elínór","elírós","elís","elísa","elísabet","elísabeth","elíza","emanúel","embla","embrek","emelía","emelíana","emelína","emerald","emeralda","emil","emilía","emilíana","emilíanna","emilý","emma","emmanúel","emmý","emý","enea","eneka","engilbert","engilbjartur","engilbjört","engiljón","engill","engilráð","engilrós","engla","enika","enja","enok","eníta","enóla","eres","eric","erik","erika","erin","erla","erlar","erlen","erlendur","erling","erlingur","erlín","ermenrekur","erna","ernestó","ernir","ernst","eron","erpur","esekíel","esja","esjar","eskja","esmeralda","esra","estefan","ester","esther","estiva","ethel","etna","eufemía","eva","evald","evan","evelyn","evert","evey","evfemía","evgenía","evlalía","evían","evíta","ey","eyberg","eybjörg","eybjört","eyborg","eydís","eyfríður","eygerður","eygló","eyhildur","eyja","eyjalín","eyjólfur","eylaugur","eyleif","eyleifur","eylín","eymar","eymundur","eyríkur","eyrós","eyrún","eysteinn","eyvar","eyveig","eyvindur","eyvör","eyþrúður","eyþór","eyþóra","eðna","eðvald","eðvar","eðvarð","fabrisíus","falgeir","falur","fannar","fannberg","fanndís","fanney","fanngeir","fannlaug","fanny","fanný","febrún","felix","fema","fengur","fenrir","ferdinand","ferdínand","fertram","feykir","filip","filippa","filippus","filippía","filipía","finn","finna","finnbjörg","finnbjörk","finnbjörn","finnboga","finnbogi","finnborg","finndís","finney","finnfríður","finngeir","finnjón","finnlaug","finnlaugur","finnrós","finnur","finnvarður","fjalar","fjalldís","fjarki","fjóla","fjólar","fjólmundur","fjölnir","fjölvar","fjörnir","flemming","flosi","flóki","flóra","flórent","flóvent","folda","forni","fossmar","francis","frank","franklín","frans","fransiska","franz","franziska","fregn","freybjörn","freydís","freygarður","freygerður","freyja","freylaug","freyleif","freymar","freymundur","freymóður","freyr","freysteinn","freyviður","freyþór","friedrich","frigg","fritz","friðberg","friðbergur","friðbert","friðbjörg","friðbjörn","friðbjört","friðborg","friðdís","friðdóra","friðey","friðfinna","friðfinnur","friðgeir","friðgerður","friðjón","friðjóna","friðlaug","friðlaugur","friðleif","friðleifur","friðlín","friðmann","friðmar","friðmey","friðmundur","friðný","friðrik","friðrika","friðrikka","friðrós","friðrún","friðsemd","friðsteinn","friður","friðveig","friðvin","friðþjófur","friðþór","friðþóra","frosti","frostrós","frán","fránn","frár","frímann","fríða","fríðsteinn","fríður","fróði","fróðmar","fróðný","funi","fura","fylkir","fáfnir","fálki","fía","fídes","fífa","fífill","fólki","fönn","fúsi","gabriel","gabríel","gabríela","gabríella","gael","galdur","gamalíel","garibaldi","garpur","garri","garðar","gaui","gauja","gaukur","gauthildur","gauti","gautrekur","gautur","gautviður","gefjun","gefn","geir","geira","geirarður","geirbjörg","geirdís","geirfinna","geirfinnur","geirfríður","geirharður","geirhildur","geirhjörtur","geirhvatur","geiri","geirlaug","geirlaugur","geirleifur","geirlöð","geirmundur","geirný","geirríður","geirröður","geirrún","geirtryggur","geirvaldur","geirólfur","geirþjófur","geirþrúður","geisli","gellir","georg","georgía","gerald","geri","gerða","gerðar","gerður","gestheiður","gestný","gestrún","gestur","gilbert","gill","gillý","gilmar","gils","gilslaug","gissunn","gissur","gizur","gjaflaug","gjúki","gloría","gló","glóa","glóbjört","glódís","glóey","glói","glóð","glúmur","gneisti","gná","gnúpur","gnýr","gottskálk","gottsveinn","goði","goðmundur","grani","grankell","gregor","grein","greipur","greppur","gret","greta","gretar","grethe","grettir","grélöð","grét","gréta","grétar","gríma","grímar","grímey","grímheiður","grímhildur","grímkell","grímlaugur","grímnir","grímur","grímólfur","grímúlfur","gróa","gullbrá","gulli","gullveig","gullý","gumi","gumma","gunnar","gunnberg","gunnbjörg","gunnbjörn","gunnbjört","gunnborg","gunndís","gunndór","gunndóra","gunnella","gunnfinna","gunnfríður","gunngeir","gunnhallur","gunnharða","gunnheiður","gunnhildur","gunnjóna","gunnlaug","gunnlaugur","gunnleif","gunnleifur","gunnlöð","gunnröður","gunnrún","gunnsteinn","gunnur","gunnvaldur","gunnveig","gunnvör","gunnólfur","gunnóli","gunný","gunnþór","gunnþóra","gunnþórunn","gurrý","gustav","gutti","guttormur","guðberg","guðbergur","guðbjarni","guðbjartur","guðbjörg","guðbjörn","guðbjört","guðborg","guðbrandur","guðdís","guðfinna","guðfinnur","guðfreður","guðfríður","guðgeir","guðjón","guðjóna","guðlaug","guðlaugur","guðleif","guðleifur","guðleikur","guðlín","guðmann","guðmar","guðmey","guðmon","guðmunda","guðmundur","guðmundína","guðni","guðný","guðráður","guðríður","guðröður","guðrún","guðsteina","guðsteinn","guðvarður","guðveig","guðveigur","guðvin","guðþór","gylfi","gyrðir","gytta","gyða","gyðja","gyðríður","gæfa","gæflaug","gía","gídeon","gígja","gígjar","gígur","gísela","gísla","gísley","gísli","gíslný","gíslrún","gíslunn","gíslína","gíta","góa","gógó","gói","góði","gúa","gústaf","gústav","gýgjar","gýmir","hadda","haddi","haddur","haddý","hafberg","hafbjörg","hafborg","hafdís","hafey","hafgrímur","hafliða","hafliði","haflína","hafnar","hafni","hafný","hafrós","hafrún","hafsteina","hafsteinn","hafþór","hafþóra","hagalín","hagbarður","hagbert","haki","halla","hallbera","hallberg","hallbjörg","hallbjörn","hallborg","halldís","halldór","halldóra","halley","hallfreður","hallfríður","hallgarður","hallgeir","hallgerður","hallgils","hallgrímur","hallgunnur","hallkatla","hallkell","hallmann","hallmar","hallmundur","hallný","hallrún","hallsteinn","hallur","hallvarður","hallveig","hallvör","hallþór","hamar","hanna","hannes","hanney","hannibal","hans","hansa","hansína","harald","haraldur","harpa","harri","harry","harrý","hartmann","hartvig","hauksteinn","haukur","haukvaldur","hauður","heba","hebba","hedda","hedí","heida","heikir","heilmóður","heimir","heinrekur","heisi","heiða","heiðar","heiðarr","heiðberg","heiðbert","heiðbjörg","heiðbjörk","heiðbjört","heiðbrá","heiðdís","heiðlaug","heiðlindur","heiðlóa","heiðmann","heiðmar","heiðmundur","heiðný","heiðrekur","heiðrós","heiðrún","heiður","heiðveig","hekla","hektor","helen","helena","helga","helgi","hella","helma","helmút","hemmert","hendrik","hendrikka","henning","henný","henrietta","henrik","henrika","henry","henríetta","henrý","hera","herbert","herbjörg","herbjörn","herbjört","herborg","herdís","herfinnur","herfríður","hergeir","hergerður","hergill","hergils","herjólfur","herlaug","herlaugur","herleifur","herluf","hermann","hermundur","hermína","hermóður","hersilía","hersir","hersteinn","hersveinn","herta","hertha","hervar","hervarður","hervin","hervör","herþrúður","hilaríus","hilbert","hilda","hildar","hildegard","hildibergur","hildibjörg","hildibrandur","hildigeir","hildigerður","hildiglúmur","hildigunnur","hildimar","hildimundur","hildingur","hildir","hildiríður","hildisif","hildiþór","hildur","hilma","hilmar","hilmir","himinbjörg","himri","hind","hinrik","hinrika","hinrikka","hjallkár","hjalta","hjaltalín","hjaltey","hjalti","hjarnar","hjálmar","hjálmdís","hjálmey","hjálmfríður","hjálmgeir","hjálmgerður","hjálmrós","hjálmrún","hjálmtýr","hjálmur","hjálmveig","hjálmþór","hjördís","hjörfríður","hjörleif","hjörleifur","hjörný","hjörtfríður","hjörtur","hjörtþór","hjörvar","hlaðgerður","hleiðar","hleiður","hlini","hljómur","hlynur","hlédís","hlégestur","hlér","hlíf","hlífar","hlín","hlíðar","hlíðberg","hlökk","hlöðmundur","hlöður","hlöðvarður","hlöðver","hnefill","hnikar","hnikarr","holgeir","holger","holti","hrafn","hrafna","hrafnar","hrafnbergur","hrafnborg","hrafndís","hrafney","hrafnfífa","hrafngerður","hrafnheiður","hrafnhildur","hrafnkatla","hrafnkell","hrafnlaug","hrafntinna","hrafntýr","hrannar","hrappur","hraunar","hraundís","hrefna","hreggviður","hreimur","hreindís","hreinn","hreiðar","hreiðmar","hringur","hrollaugur","hrolleifur","hrund","hrærekur","hrímnir","hróaldur","hróar","hróbjartur","hrói","hrólfdís","hrólfur","hrómundur","hróðgeir","hróðmar","hróðný","hróðvar","hróðólfur","hrönn","hrútur","hugberg","hugbjörg","hugbjört","hugborg","hugdís","hugi","huginn","hugleikur","hugljúf","hugo","hugrún","hugó","huld","hulda","huldar","huldrún","huldís","huxley","hvannar","hvönn","hyltir","hylur","hákon","hákonía","háleygur","hálfdan","hálfdán","hámundur","hárekur","hárlaugur","hásteinn","hávar","hávarr","hávarður","hængur","hænir","héðinn","híram","hólm","hólmar","hólmbert","hólmbjörg","hólmdís","hólmfastur","hólmfríður","hólmgeir","hólmgrímur","hólmkell","hólmsteinn","hólmþór","hóseas","hödd","högna","högni","hörn","hörður","höskuldur","höður","húbert","húgó","húmi","húna","húnbjörg","húnbogi","húndís","húngerður","húni","húnn","húnröður","ida","idda","illugi","ilmur","ilse","ilías","immanúel","immý","ina","inda","india","indiana","indra","indriði","indí","indía","indíana","indíra","inga","ingberg","ingdís","ingeborg","inger","ingey","ingheiður","inghildur","ingi","ingiberg","ingibergur","ingibert","ingibjartur","ingibjörg","ingibjörn","ingibjört","ingiborg","ingifinna","ingifríður","ingigerður","ingilaug","ingileif","ingileifur","ingilín","ingimagn","ingimar","ingimaría","ingimunda","ingimundur","ingiríður","ingirós","ingisól","ingivaldur","ingiveig","ingiþór","ingjaldur","ingmar","ingrid","ingrún","ingunn","ingvaldur","ingvar","ingveldur","ingvi","ingólfur","ingþór","inna","irena","irene","irja","irma","irmelín","irmý","irpa","isabel","isabella","ismael","issi","iða","iðunn","jack","jafet","jagger","jaki","jakob","jakobína","jakop","jamil","jan","jana","jane","janetta","jannika","janus","jara","jarfi","jarl","jarla","jarún","jarþrúður","jasmín","jason","jenetta","jenna","jenni","jenny","jenný","jens","jensína","jeremías","jes","jesper","jessý","jochum","johan","john","joshua","jovina","judith","julian","járnbrá","járngerður","járngrímur","játgeir","játmundur","játvarður","jóa","jóakim","jóann","jóanna","jódís","jóel","jófríður","jóhann","jóhanna","jóhannes","jói","jólín","jómar","jómundur","jón","jóna","jónanna","jónar","jónas","jónasína","jónatan","jónbjörg","jónbjörn","jónbjört","jóndís","jóndór","jóndóra","jóney","jónfríður","jóngeir","jóngerð","jónheiður","jónhildur","jóninna","jónmundur","jónný","jónsteinn","jónída","jónína","jóný","jónþór","jóra","jórlaug","jórunn","jóríður","jósafat","jósavin","jósebína","jósef","jósefín","jósefína","jósep","jósteinn","jósúa","jóvin","jökla","jökull","jökulrós","jörfi","jörgen","jörgína","jörmundur","jörri","jörundur","jörvar","jörvi","júdea","júdit","júlí","júlía","júlían","júlíana","júlíanna","júlíetta","júlíhuld","júlína","júlírós","júlíus","júní","júní","júnía","júníana","júníus","júrek","kai","kaj","kaja","kakali","kaktus","kala","kaldi","kaleb","kali","kalla","kalman","kalmann","kalmar","kamal","kamilla","kamma","kamí","kapitola","kaprasíus","kapítóla","kara","karel","karen","karim","karin","karitas","karkur","karl","karla","karles","karli","karlinna","karlotta","karlína","karmen","karol","karolína","karvel","karí","karín","karína","karítas","karó","karólín","karólína","karún","kaspar","kasper","kassandra","kastíel","kata","katarína","katarínus","katerína","katharina","kathinka","katinka","katla","katrín","katrína","kató","katý","kaðlín","kellý","kendra","keran","ketilbjörg","ketilbjörn","ketilfríður","ketill","ketilríður","kiddý","kiljan","kilían","kira","kirsten","kirstín","kittý","kjalar","kjallakur","kjalvör","kjaran","kjartan","kjarval","kjárr","kjói","klara","klemens","klementína","klemenz","kleópatra","kládía","klængur","knörr","knútur","koggi","kolbeinn","kolbjörg","kolbjörn","kolbrá","kolbrún","koldís","kolfinna","kolfinnur","kolfreyja","kolgríma","kolgrímur","kolka","kolmar","kolskeggur","kolur","kolviður","konkordía","konný","konráð","konstantínus","korka","kormlöð","kormákur","kornelía","kornelíus","kort","koðrán","kraki","kris","krista","kristall","kristberg","kristbergur","kristbjörg","kristbjörn","kristborg","kristdór","kristel","kristens","kristensa","krister","kristey","kristfinnur","kristfríður","kristgeir","kristgerður","kristian","kristin","kristine","kristinn","kristjana","kristján","kristjón","kristjóna","kristlaug","kristlaugur","kristleifur","kristlind","kristlín","kristmann","kristmar","kristmundur","kristný","kristofer","kristrós","kristrún","kristvaldur","kristvarður","kristveig","kristvin","kristvina","kristíana","kristíanna","kristín","kristína","kristófer","kristólína","kristý","kristþór","kristþóra","krumma","krummi","kría","kvasir","kveldúlfur","kár","kára","kári","kæja","kókó","kópur","kórekur","laila","lambert","lana","lara","lars","laufar","laufey","laufheiður","laufhildur","lauga","laugey","laugheiður","laugi","lauritz","laíla","lea","leif","leifur","leiknir","leikný","leila","leiðólfur","lena","leo","leon","leonard","leonhard","leonóra","leví","lexí","leyla","leó","leóna","leónóra","leópold","lilja","liljar","liljurós","liljá","lill","lilla","lillian","lilly","lillý","lily","lilý","lind","linda","lindar","lindberg","linddís","lingný","lisbeth","listalín","liv","ljósbjörg","ljósbrá","ljósálfur","ljótunn","ljótur","ljúfur","lofn","loftur","loftveig","logey","logi","lokbrá","loki","lotta","louisa","louise","lovísa","loðmundur","ludvig","lukka","lundi","lydia","lydía","lyngar","lyngheiður","lár","lára","lárensína","lárent","lárentíus","láretta","lárey","lárus","læla","lér","líam","líba","líf","lífdís","lílý","lín","lína","línberg","línbjörg","líndís","líneik","líney","línhildur","líni","lísa","lísabet","lísandra","lísbet","lísebet","lív","lóa","lóreley","lórens","lórenz","lótus","lúcía","lúkas","lúna","lúsinda","lúsía","lúter","lúther","lúvísa","lúísa","lúðvíg","lúðvík","lúðvíka","lýdía","lýra","lýtingur","lýður","maddý","magda","magdalena","magga","maggey","maggi","maggý","magna","magndís","magnea","magnes","magney","magnfríður","magngeir","magnheiður","magnhildur","magni","magnús","magnúsína","magný","magnþór","magnþóra","magðalena","maj","maja","makan","malen","malena","malika","malla","malía","malín","malína","manda","manfred","manfreð","manúel","manúela","manúella","mar","mara","marbjörn","mardís","marel","marela","marella","maren","marey","marfríður","margeir","margit","margot","margret","margrjet","margrét","margrímur","margunnur","marheiður","mari","maria","marie","marijón","marikó","marinella","marinó","marit","marja","marjón","mark","markrún","markó","markús","markþór","marlaug","marlena","marlín","marlís","maron","marri","mars","marsa","marsellíus","marselía","marselína","marsibil","marsilía","marsý","marta","marteinn","marten","martha","marthen","martin","martína","marvin","mary","marzibil","marzilíus","marí","maría","maríam","marían","maríana","maríanna","marías","marín","marína","marínella","marínó","maríon","marís","marísa","marísól","marít","maríuerla","maríus","marólína","marý","mathilda","mathías","matta","mattea","matthea","matthilda","matthildur","matthía","matthías","matti","mattíana","mattías","mattína","mattý","max","maxima","maximus","maía","maídís","maísól","meda","mekkin","mekkinó","mekkín","melinda","melissa","melkorka","melkíor","melkólmur","melrakki","melrós","mensalder","merkúr","messíana","methúsalem","metta","metúsalem","mey","meyvant","michael","mikael","mikaela","mikaelína","mikjáll","mikkael","mikkalína","mikkel","milda","mildinberg","mildríður","milla","millý","minerva","minna","minney","minný","miriam","mirja","mirjam","mirra","mist","mjalldís","mjallhvít","mjaðveig","mjöll","mjöllnir","mjölnir","moli","mona","monika","morgan","morgunsól","moritz","mosi","muggur","munda","mundheiður","mundhildur","mundína","muni","muninn","myrk","myrkvi","myrra","mábil","málfríður","málhildur","málmfríður","mánadís","máney","máni","már","mára","márus","mía","mías","míla","mímir","mímósa","mínerva","mír","míra","míranda","míríel","mítra","míó","móa","módís","móeiður","móey","móheiður","mói","móna","mónika","móníka","móri","mórits","móses","móði","mörk","mörður","múli","mýr","mýra","mýrkjartan","mýrún","nadia","nadja","nadía","nana","nanna","nanný","nansý","naomí","narfi","natalie","natalía","natan","natanael","nataníel","nathan","naómí","neisti","nella","nellý","nenna","nenni","neptúnus","nicolas","nicole","nikanor","nikolai","nikolas","nikoletta","nikulás","nikíta","nikólína","nils","ninja","ninna","niðbjörg","njála","njáll","njóla","njörður","nonni","norbert","norma","normann","norðmann","náttmörður","náttsól","náttúlfur","náð","níels","níls","nína","níní","nóa","nóam","nóel","nói","nóni","nóra","nóri","nótt","nóvember","nökkvi","númi","nýbjörg","nývarð","obba","odda","oddbergur","oddbjörg","oddbjörn","oddfreyja","oddfreyr","oddfríður","oddgeir","oddgerður","oddhildur","oddi","oddkell","oddlaug","oddleif","oddleifur","oddmar","oddný","oddrún","oddsteinn","oddur","oddvar","oddveig","oddvör","oddþór","oktavía","oktavíus","októ","októvía","októvíus","olaf","olav","olga","olgeir","oliver","olivert","olivia","ollý","ora","orfeus","orka","ormar","ormheiður","ormhildur","ormur","orri","orvar","otkatla","otkell","otri","otta","otti","ottó","otur","pamela","parmes","parís","patrek","patrekur","patricia","patrick","patrik","patrisía","pedró","per","perla","peta","peter","petra","petrea","petronella","petrína","petrónella","petrós","petrún","petrúnella","pjetur","polly","pollý","pría","príor","pála","páldís","páley","pálfríður","pálhanna","pálheiður","pálhildur","páll","pálmar","pálmey","pálmfríður","pálmi","pálrún","pálín","pálína","pétrína","pétrún","pétur","pía","rafael","rafn","rafnar","rafney","rafnhildur","rafnkell","ragna","ragnar","ragnbjörg","ragney","ragnfríður","ragnheiður","ragnhildur","ragúel","rakel","ramóna","randalín","randver","randíður","randý","ranka","rannva","rannveig","rannver","rasmus","rea","rebekka","refur","reginbaldur","reginbjörg","reginn","regína","reidar","reifnir","reimar","rein","reinar","reinhart","reinhold","remek","renata","rex","reykdal","reyn","reynald","reynar","reyndís","reynheiður","reynhildur","reynir","reyr","richard","rikharð","rikharður","rikka","ripley","rita","robert","rolf","ronald","ronja","rorí","roxanna","rudolf","runi","runný","runólfur","rut","ruth","rán","ráðgeir","ráðhildur","ráðvarður","ríkarður","ríkey","ríkharð","ríkharður","rín","ríta","ríó","róbert","róberta","róbjörg","rólant","róman","rómeó","rós","rósa","rósalind","rósalía","rósanna","rósant","rósar","rósberg","rósbjörg","rósborg","róselía","rósenberg","rósey","rósfríður","róshildur","rósi","rósinberg","rósinkar","rósinkara","rósinkrans","rósinkransa","róska","róslaug","róslind","róslinda","róslín","rósmann","rósmary","rósmarý","rósmunda","rósmundur","rósný","röfn","rögn","rögnvald","rögnvaldur","rögnvar","rökkvi","röskva","röðull","rúbar","rúben","rúbý","rúdólf","rún","rúna","rúnar","rúndís","rúnhildur","rúrik","rúrí","rútur","sabrína","sabína","safír","saga","sakarías","salbjörg","saldís","salgerður","salka","salma","salmann","salmar","salný","salome","salvar","salvör","salín","salína","salóme","salómon","samson","samúel","sandel","sandra","sandri","sandur","sanna","santía","sara","sarína","saxi","sebastian","sebastían","sefanía","seifur","seimur","selena","selja","selka","selma","senía","septíma","sera","serena","sesar","seselía","sesil","sesilía","sesselja","sesselía","sessilía","sif","sigbergur","sigbert","sigbjartur","sigbjörn","sigdís","sigdór","sigdóra","sigfastur","sigfinnur","sigfreður","sigfríð","sigfríður","sigfús","sigga","siggeir","siggerður","sighvatur","sigjón","siglaugur","sigmann","sigmar","sigmunda","sigmundur","signa","signar","signhildur","signý","sigri","sigrid","sigríkur","sigríður","sigrún","sigsteinn","sigtryggur","sigtýr","sigur","sigurbaldur","sigurberg","sigurbergur","sigurbirna","sigurbjarni","sigurbjartur","sigurbjörg","sigurbjörn","sigurbjört","sigurborg","sigurbrandur","sigurbára","sigurdríf","sigurdrífa","sigurdís","sigurdór","sigurdóra","sigurey","sigurfinna","sigurfinnur","sigurfljóð","sigurgeir","sigurgeira","sigurgestur","sigurgrímur","sigurgísli","sigurhanna","sigurhans","sigurhelga","sigurhildur","sigurhjörtur","sigurjón","sigurjóna","sigurkarl","sigurlaug","sigurlaugur","sigurleif","sigurleifur","sigurlilja","sigurlinn","sigurlinni","sigurliði","sigurlogi","sigurlás","sigurlín","sigurlína","sigurmann","sigurmar","sigurmon","sigurmunda","sigurmundur","sigurnanna","sigurnýas","sigurnýjas","siguroddur","sigurpáll","sigurrós","sigursteina","sigursteinn","sigursveinn","sigurunn","sigurvaldi","sigurveig","sigurvin","sigurvina","sigurást","sigurásta","sigurða","sigurður","siguróli","sigurósk","sigurörn","sigurþór","sigurþóra","sigvalda","sigvaldi","sigvarður","sigyn","sigþrúður","sigþór","sigþóra","silfa","silfrún","silfá","silja","silka","silla","silli","silva","silvana","silvía","sindri","sirra","sirrí","sirrý","siv","sivía","sjafnar","sjana","sjöfn","skafti","skapti","skarpheiður","skarphéðinn","skefill","skeggi","skellir","skjöldur","skorri","skröggur","skugga","skuggi","skuld","skær","skæringur","skírnir","skíði","skúla","skúli","skúlína","skúta","smiður","smyrill","smári","snjáfríður","snjáka","snjófríður","snjóki","snjólaug","snjólaugur","snjólfur","snorra","snorri","snæbjartur","snæbjörg","snæbjörn","snæbjört","snæborg","snæbrá","snædís","snæfríður","snæhólm","snælaug","snælaugur","snær","snæringur","snærós","snærún","snævar","snævarr","snæþór","snót","soffanías","soffía","sofie","sofía","solveig","sonja","sonný","sophanías","sophia","sophie","sophus","spartakus","sporði","spói","stanley","stapi","starkaður","starri","stasía","stefan","stefana","stefanía","stefnir","stefán","stefánný","steina","steinar","steinarr","steinberg","steinbergur","steinbjörg","steinbjörn","steinborg","steindís","steindór","steindóra","steiney","steinfinnur","steinfríður","steingerður","steingrímur","steinhildur","steini","steinkell","steinlaug","steinmann","steinmar","steinmóður","steinn","steinrós","steinröður","steinrún","steinunn","steinvarður","steinvör","steinólfur","steinþór","steinþóra","stella","stirnir","stjarna","stjarney","stormur","sturla","sturlaugur","sturri","styr","styrbjörn","styrgerður","styrkár","styrmir","styrr","stígheiður","stígrún","stígur","stína","stórólfur","sumarliði","sumarlína","sumarrós","sunna","sunnefa","sunneva","sunniva","sunníva","susan","svafa","svafar","svala","svali","svalrún","svan","svana","svanberg","svanbergur","svanbjörg","svanbjörn","svanbjört","svanborg","svandís","svaney","svanfríður","svangeir","svanheiður","svanhildur","svanhvít","svanhólm","svani","svanlaug","svanlaugur","svanmundur","svanrós","svanur","svanþrúður","svanþór","svava","svavar","svea","sveina","sveinar","sveinberg","sveinbjartur","sveinbjörg","sveinbjörn","sveinborg","sveindís","sveiney","sveinfríður","sveingerður","sveinhildur","sveinjón","sveinlaug","sveinlaugur","sveinmar","sveinn","sveinrós","sveinrún","sveinsína","sveinungi","sveinveig","sveinþór","svend","sverre","sverrir","sváfnir","svölnir","svörfuður","sylgja","sylva","sylvia","sylvía","sæberg","sæbergur","sæbjartur","sæbjörg","sæbjörn","sæbjört","sæborg","sæbrá","sædís","sæfinna","sæfríður","sæhildur","sæi","sæla","sælaug","sælaugur","sæmann","sæmi","sæmunda","sæmundur","sæný","sær","særós","særún","sæsól","sæunn","sævald","sævaldur","sævar","sævarr","sævin","sævör","sæþór","sía","símon","símona","símonía","sírnir","sírus","sísí","síta","sívar","sófus","sófónías","sókrates","sól","sóla","sólberg","sólbergur","sólbjartur","sólbjörg","sólbjörn","sólbjört","sólborg","sólbrá","sólbrún","sóldís","sóldögg","sóley","sólfríður","sólgerður","sólhildur","sólimann","sólkatla","sóllilja","sólmar","sólmundur","sólný","sólon","sólrós","sólrún","sólveig","sólver","sólvin","sólvör","sólín","sónata","sölmundur","sölva","sölvar","sölvey","sölvi","sölvína","sören","sörli","súla","súlamít","súsan","súsanna","sýrus","tala","talía","tamar","tamara","tandri","tanja","tanya","tanya","tanía","tara","tarfur","tea","teitný","teitur","tekla","telma","tera","teresa","teresía","thea","thelma","theodór","theodóra","theresa","theódór","theódóra","thomas","thor","thorberg","thór","tindar","tindra","tindri","tindur","tinna","tinni","tirsa","tjaldur","tjörfi","tjörvi","tobías","todda","tolli","tonni","torbjörg","torfey","torfheiður","torfhildur","torfi","trausti","tristan","tristana","trostan","tryggva","tryggvi","tryggvína","trú","trúmann","tumas","tumi","tyrfingur","tía","tíalilja","tíbor","tíbrá","tími","tímon","tímoteus","tímóteus","tína","tístran","tóbías","tóbý","tói","tóka","tóki","tómas","tór","tóta","týr","týra","ubbi","uggi","ugla","ulrich","una","undína","uni","unna","unnar","unnbjörg","unnbjörn","unndís","unndór","unnsteinn","unnur","unnþór","urðar","urður","uxi","vagn","vagna","vagnbjörg","vagnfríður","vaka","vakur","vala","valberg","valbergur","valbjörg","valbjörk","valbjörn","valbjört","valborg","valbrandur","valdemar","valdheiður","valdi","valdimar","valdís","valdór","valentín","valentína","valentínus","valería","valey","valfríður","valgarð","valgarður","valgeir","valgerða","valgerður","valgý","valhildur","valka","valkyrja","vallaður","vallý","valmar","valmundur","valný","valrós","valrún","valsteinn","valter","valtýr","valur","valva","valves","valíant","valý","valþrúður","valþór","vanda","varmar","varða","vatnar","veig","veiga","veigar","veigur","venný","venus","ver","vera","vermundur","vernharð","vernharður","veronika","verónika","veróníka","vestar","vestmar","vetrarrós","veturliði","vibeka","victor","victoría","vigdís","vigfús","viggó","viglín","vignir","vigný","vigri","vigtýr","vigur","vikar","viktor","viktoria","viktoría","vilberg","vilbergur","vilbert","vilbjörn","vilbogi","vilborg","vilbrandur","vildís","vilfríður","vilgeir","vilgerður","vilhelm","vilhelmína","vilhjálmur","vili","viljar","vilji","villa","villi","villimey","vilma","vilmar","vilmundur","vilný","vinbjörg","vincent","vindar","vinjar","vinný","vinsý","virgill","virginía","viðar","viðja","viðjar","von","voney","vopni","vordís","vorm","váli","vápni","vár","vébjörg","vébjörn","védís","végeir","végerður","vékell","vélaug","vélaugur","vémundur","véný","vésteinn","víbekka","víf","vífill","vígberg","vígdögg","víggunnur","víglundur","vígmar","vígmundur","vígsteinn","vígþór","víkingur","vísa","víðar","víðir","víóla","víóletta","vöggur","völundur","vörður","vöttur","walter","werner","wilhelm","willard","william","willum","willy","ylfa","ylfur","ylja","ylur","ylva","ymir","yngvar","yngvi","ynja","yrja","yrkill","yrsa","zakaría","zakarías","zophanías","zophonías","zóphanías","zóphonías","ágúst","ágústa","ágústína","áki","álfar","álfdís","álfey","álfgeir","álfgerður","álfgrímur","álfheiður","álfhildur","álfrós","álfrún","álfsól","álfur","álfþór","ámundi","árbjartur","árbjörg","árbjörn","árbjört","árdís","árelía","árelíus","árgeir","árgils","árlaug","ármann","ármey","árna","árndís","árney","árnheiður","árni","árnína","árný","ársæl","ársæll","ársól","árveig","árvök","áróra","árún","árþóra","ás","ása","ásberg","ásbergur","ásbjörg","ásbjörn","ásborg","ásdís","ásdór","ásfríður","ásgautur","ásgeir","ásgerður","ásgils","ásgrímur","áshildur","ási","áskatla","áskell","ásla","áslaug","áslaugur","ásleif","áslákur","ásmar","ásmundur","ásný","ásrós","ásröður","ásrún","ást","ásta","ástbjörg","ástbjörn","ástbjört","ástdís","ástfríður","ástgeir","ástgerður","ástheiður","ásthildur","ástmar","ástmundur","ástráður","ástríkur","ástríður","ástrós","ástrún","ástvald","ástvaldur","ástvar","ástveig","ástvin","ástþrúður","ástþór","ástþóra","ásvaldur","ásvarður","ásvör","ásólfur","ásþór","ægileif","ægir","æsa","æsgerður","æsir","ævar","ævarr","ævör","ían","ída","ígor","íma","ími","ína","ír","íren","írena","íris","írunn","ísabel","ísabella","ísadóra","ísafold","ísak","ísalind","ísar","ísarr","ísbjörg","ísbjörn","ísdís","íseldur","ísey","ísfold","ísgeir","ísgerður","íshildur","ísidór","ísidóra","ísis","íslaug","ísleif","ísleifur","íslilja","ísmael","ísmar","ísmey","ísold","ísrael","ísrún","íssól","ísveig","ísól","ísólfur","íunn","íva","ívan","ívar","óda","ófeigur","ófelía","óla","ólaf","ólafur","ólafía","ólafína","ólavía","óli","óliver","ólivía","ólína","ólíver","ólöf","ómar","ómi","ósa","ósk","óskar","ósklín","ósvald","ósvaldur","ósvífur","ótta","óttar","óttarr","óðinn","óðný","ögmunda","ögmundur","ögn","ögri","ölnir","ölrún","ölveig","ölver","ölvir","öndólfur","önundur","örbrún","örk","örlaugur","örlygur","örn","örnólfur","örvar","ösp","össur","öxar","úa","úddi","úlfa","úlfar","úlfdís","úlfey","úlfgeir","úlfheiður","úlfhildur","úlfhéðinn","úlfkell","úlfljótur","úlfrún","úlftýr","úlfur","úlla","úlrik","úna","úndína","úranus","úranía","úrsúla","ýja","ýma","ýmir","ýr","ýrar","ýrr","þalía","þangbrandur","þeba","þengill","þeyr","þeódís","þeódóra","þingey","þinur","þiðrandi","þiðrik","þjálfi","þjóstar","þjóstólfur","þjóðann","þjóðar","þjóðbjörg","þjóðbjörn","þjóðgeir","þjóðhildur","þjóðleifur","þjóðmar","þjóðrekur","þjóðvarður","þjóðólfur","þoka","þollý","þorberg","þorbergur","þorbjörg","þorbjörn","þorbrandur","þorfinna","þorfinnur","þorgarður","þorgautur","þorgeir","þorgerður","þorgestur","þorgils","þorgnýr","þorgríma","þorgrímur","þorgísl","þorkatla","þorkell","þorlaug","þorlaugur","þorleif","þorleifur","þorleikur","þorlákur","þormar","þormundur","þormóður","þorri","þorsteina","þorsteinn","þorstína","þorvaldur","þorvar","þorvarður","þrastar","þrymur","þrá","þráinn","þrándur","þróttur","þröstur","þrúða","þrúðmar","þrúður","þula","þura","þurí","þuríður","þurý","þyri","þyrill","þyrnir","þyrnirós","þyrí","þór","þóra","þóranna","þórar","þórarinn","þórarna","þórbergur","þórbjarni","þórbjörg","þórbjörn","þórdís","þórelfa","þórelfur","þórey","þórfríður","þórgnýr","þórgrímur","þórgunna","þórgunnur","þórhaddur","þórhalla","þórhalli","þórhallur","þórhanna","þórheiður","þórhildur","þóri","þórinn","þórir","þórkatla","þórlaug","þórlaugur","þórleif","þórleifur","þórlindur","þórmar","þórmundur","þórný","þórodda","þóroddur","þórormur","þórsteina","þórsteinn","þórsteinunn","þórstína","þórunn","þórveig","þórvör","þórða","þórður","þórólfur","þórörn","þöll","þúfa"];
TrainingDatas["Indian Forenames"] = ["abhay","abhinav","abhishek","adarsh","adesh","adi","aishwarya","ajay","ajish","ajit","akhil","akhila","ambica","ami","amit","amita","ammar","amrita","ananya","anil","anirban","aniruddha","anjali","ankit","ankita","anu","anuj","anup","anupam","anupama","anurag","anushree","apoorva","arindam","arjun","arpita","arti","arun","arunachalam","arundhati","arvind","arya","aryaman","aseem","ashoka","ashvin","ashwin","bali","ballabh","bharat","bhardwaj","bhavesh","bhupinder","bhushan","bibin","biju","binod","binu","bipasha","chandrajit","damayanti","deepa","deepak","deepali","deepika","deepti","devanshi","devendra","devesh","dhanishka","dinesh","dipankar","ekram","eva","ganesh","gayatri","girish","girjesh","gita","gitanjali","gopinathan","gurcharan","gurunath","hansraj","hara","hardik","harish","harjit","harsh","harshita","hemalata","hitesh","indira","indrani","indranil","indumati","ira","ishana","jacqueline","jagannath","jaipal","jalaj","jara","jayant","jayashankar","jesminder","jitendra","juhi","kailash","kalimuthu","kamala","kanika","karthik","karthika","karthikeyan","kaushal","kavita","kazi","kirtan","kishor","kripesh","krishnan","krishnappa","krishnayya","kumar","kumudini","lakshan","lakshanya","lakshman","lata","latha","lauretta","leela","leelavathi","leila","lena","madhuri","mahboob","mahendra","mallika","mandar","manish","manjula","manmohan","manorama","maya","mayank","mira","mukesh","munish","muthuswamy","nadeem","nagaraj","nagesh","nahla","naila","nalini","nana","naranbhai","narayan","naveen","navin","neeraj","neha","nehal","nibaran","nihal","nihar","niharika","nikita","nirav","nitesh","nitin","nripendra","oommen","padmavati","palanivel","pallav","pankaj","parag","parul","parvati","phani","phanita","poonam","prajesh","prakash","pramod","pranab","pratibha","pratul","preeti","priya","priyanka","puja","radhanath","ragini","rahul","raj","raja","rajan","rajendra","rajesh","rajinder","rajiv","rakesh","ram","ramakant","ramesh","ramya","rana","ranbir","randhir","ranganath","rani","rashmi","rati","ravinder","ravish","reena","rekha","richa","rinjish","ritwik","ritwika","rohit","sachin","sahil","saket","saloni","samar","samir","sanah","sandhya","sandipan","sania","sanjib","sarabjit","saravanan","satyajit","satyana","savitri","sekar","shahbaz","shahnaz","shailendra","sharad","sharada","sharmila","sheela","sheetal","shekhar","shilpa","shishir","shishira","shreya","shridhar","shubhendu","shweta","sitaramayya","smeet","sneha","somesh","soumitra","sourav","srikanta","srinivas","subrata","sudha","sudhir","sujata","sukhbir","sulochana","sundar","sunil","supriya","surendranath","suresh","sureza","surinder","sushma","susmita","swetha","tala","tanisha","tanushree","tanvi","tarun","tejal","tina","uma","umesh","upendra","vaibhav","varsha","vasudevan","venkataraman","venu","vibha","vijayalakshmi","vikas","vinay","vinod","vivek","vrushali","wasim","yamini","yash","yugesh"];
TrainingDatas["Irish Forenames"] = ["abbán","affraic","agaistín","aibhilín","aibhne","aifric","ailbhe","ailin","ailín","aindriú","aindréas","ainm","ainníleas","aislin","aisling","aislinn","aithche","ambrós","amhalgaidh","amhlaoibh","anluan","anmchadh","anne","antóin","aodh","aodhagán","aodhamair","aodhnait","aodhán","aogán","aoibhe","aoibheann","aoibhin","aoibhinn","aoife","aonghus","ardghal","ardghar","art","artúr","athracht","aíbhinn","bairre","baothghalach","barra","barrdhubh","basil","beacán","bearach","bearchán","bearnárd","beinidict","blanche","blinne","bláth","bláthnaid","bran","breandán","breanndán","breasal","brian","brighdín","brighid","brochadh","bréanainn","bríd","brídín","brónach","buadhach","buadhnait","bébhinn","cacht","cailean","cainneach","cairbre","caitlín","caitrín","caitríona","calbhach","canice","caoilfhionn","caoimhe","caoimhghín","caoimhín","caolán","caomhán","carraig","cathal","cathaoir","cathbharr","catraoine","ceallach","ceallachán","cearbhall","charles","charles","charles","ciamhnait","cian","ciannait","cianán","ciara","ciarán","cillian","cinnéididh","cinnéidigh","cionaodh","ciothruadh","cliodhna","clodagh","clíona","cobhfhlaith","cobhlaith","coilean","coileán","coilín","coinneach","coireall","colla","colm","colmán","colum","comhghall","comhghan","comán","conaire","conall","conchobhar","conchubhar","conchúr","conghalach","conmhac","conn","connla","connlaodh","conán","cormac","cosnamhach","criomthann","críostóir","cróchán","crónán","cuan","cuileán","cuimín","cyril","cárthach","cúchonnacht","cúmhaighe","cúmheadha","dabhag","dabhóg","dainéal","daire","damhnait","damháin","daniel","dara","david","deaglán","dearbhfhorgaill","dearbhfhorghaill","dearbhla","dearbháil","deasmhumhnach","declan","deirdre","denis","dervilia","dianaimh","diarmaid","diarmait","doireann","domhnall","donn","donnchadh","donnchadha","donnán","dorothy","dubhaltach","dubhchobhlaigh","dubhghall","dubhghlas","dubhán","dubhóg","dymphna","dáithí","déaglán","dónall","dúnlang","eachaidh","eachann","eachdhonn","eachthighearn","eamon","earcán","earnait","earnán","easnadh","edwina","eibhlín","eibhlín","eignach","eigneachán","eilín","eilís","eimear","eimer","eimhear","eireamhán","eireamhón","eirnín","eithne","eochaidh","eoghainín","eoghan","eoin","eóin","fachtna","faoiltighearna","faolán","fearadhach","fearchar","fearganainm","fearghal","fearghus","feargus","feary","feichín","feidhelm","feidhlim","felix","fergus","fiach","fiacha","fiachra","fiadhnait","finghin","finian","finnian","fintan","fionghuine","fionn","fionnbharr","fionnghuala","fionntán","fionnuala","fitheal","flann","flann","flannait","flannán","flora","fodhla","forbhlaith","froinsias","fáilbhe","féilim","féthnaid","féthnat","fíneamhain","fíona","garbhán","gearóid","geiléis","glaisne","gobnait","gormfhlaith","gormlaith","grace","granya","greagoir","gráinne","gréagóir","honora","iarfhlaith","iarlaith","iodhnait","irial","iósaf","ióseph","iúdás","jeremiah","john","kyle","labhrás","lachtna","lann","laoighseach","laoiseach","lasairfhíona","lasairian","laurence","lewis","lewis","liam","lochlainn","lochlann","lomán","lonán","lorcán","lubhrás","lughaidh","maeleachlainn","maelsheachlainn","maelíosa","mainchín","mairghréad","mairéad","maitiú","malachy","maodhóg","maoilir","maoilín","maolcholm","maolcholuim","maolmhuire","maolmórdha","maolruadháin","marion","mathghamhain","meabh","meadhbh","mealla","meaveen","meibhín","meidhbhín","miodhnait","mortimer","muadhnait","muircheartach","muireach","muireadhach","muireann","muirgheal","muirgheas","muirinn","muiris","muirne","murchadh","máire","máirtín","máirín","mícheál","míde","móirín","mór","naomhán","naos","neachtan","neasán","niall","niallán","niamh","nioclás","nuala","nóirín","nóra","odharnait","odhrán","oilibhéar","oireachtach","oisín","onóra","oscar","peadar","peig","peigi","peigín","pilib","proinsias","pádraig","póil","pól","raghnailt","raibhilín","rathnait","riain","risteárd","ristéard","roger","roibeard","roibeárd","roibhilín","roibéard","ros","ruadhán","ruaidhri","ruairi","ruairí","ruari","ruaridh","ruarí","ruibhilín","ráichéal","réamann","réamonn","ríoghnach","ríona","ríonach","róis","róisín","rónán","rós","sadhbh","saerbhreathach","saev","saoirse","saorfhlaith","saorla","saorlaith","sarah","seachnasach","seathan","senán","seoirse","seosamh","seán","seárlas","siadhal","siaghal","sinéad","siobhán","sioda","sláine","sorcha","stíofán","suibhne","séadna","séafra","séamas","séamus","séan","séaonin","síle","síomón","síthmaith","tadhg","taichleach","terry","tiarnach","tiarnán","tiernan","tighearnán","tighernach","timothy","tiobóid","toirdhealbhach","toirleach","tomás","torna","treabhair","tuathal","tuathflaith","téodóir","uaithne","uaitéar","ualgharg","uallach","uasal","uilliam","uinseann","ultán","vivian","ágastas","áilís","áine","árdghal","árón","éabha","éadaoin","éadbhárd","éamon","éanna","éanán","éibhear","éignach","éigneachán","éimhear","éimhín","éinde","éireamhón","émer","étaín","íde","órfhlaith","órla","órlaith","úna"];
TrainingDatas["Italian Forenames"] = ["achille","adamo","adelasia","adele","adelmo","adriana","adriano","agatha","agnolo","agostino","alberico","alberto","albina","aldo","alessandra","alessandro","alessia","alfredo","alina","alphons","amadeo","amanda","amedeo","amita","andrea","angelica","angelina","angelo","anita","annalisa","annetta","antonietta","antonio","arlo","armando","arsenio","arturo","aurora","baldassare","barbara","bartolomeo","beatrice","benedetto","benito","benvenuto","beppe","berenice","bernardo","bettina","bianca","biancamaria","bruno","camilla","camillo","carmelo","carmine","carolina","cassandra","caterina","cecilia","cesare","chiara","claudia","claudio","clelia","constantino","corrado","cosimo","costanzo","cristina","damiano","daniele","danilo","dante","daria","dario","davide","delfino","diana","dina","dino","domenico","donatella","durante","edoardo","elena","eliana","elisa","elmo","elvira","emiliana","emilio","emma","ennio","enrico","enzo","eraldo","erika","ermenegildo","ernesto","ettore","eugenia","eva","fabia","fabio","fabrizio","fausto","federico","federigo","ferdinando","fernanda","fiamma","filippa","filippo","fiorino","flavia","flavio","flora","francesca","francesco","fredo","fulvio","gabriele","gabriella","gaetano","gaspare","gastone","gemma","geppetto","giacinto","giacobbe","giacomo","giada","giampaolo","giampiero","gian","giancarlo","gianfrancesco","gianfranco","gianluca","gianluigi","gianmarco","gianna","gianni","gianpaolo","gianpietro","gilberto","gino","giorgia","giorgio","giovanna","giovanni","girolamo","giulia","giuliana","giuliano","giulietta","giulio","giuseppe","giuseppina","graziano","griselda","guarino","guglielmo","guido","gustavo","imelda","ingrid","irma","isa","isabella","ivo","jacopo","joseph","julia","lamberto","lando","lara","laureano","lauretta","leonardo","leone","liberto","licia","lilla","lina","livia","livio","lorenzo","luca","luchino","lucia","luciana","luciano","lucio","lucrezia","ludovica","ludovico","luigi","luisa","manuel","marcella","marcello","marco","maria","mariano","mariella","mario","marisa","marissa","martina","martino","massimiliano","massimo","matilda","matteo","maura","maurilio","maurizio","mauro","melania","melina","melissa","michela","michelangelo","michele","micheletto","michelotto","milena","milo","mirco","mirko","morena","nadia","napoleone","natalia","neri","niccolò","nicholas","nicola","nicole","nicoletta","nicolò","nina","nino","nunzio","omero","onofrio","orazio","oreste","orlando","ornella","osvaldo","ottavio","paloma","panfilo","paola","paolo","pascale","pasqual","pasquale","paulina","pellegrino","pierangelo","piergiorgio","piergiuseppe","pierluigi","piermaria","piersanti","pietro","pompeo","priscilla","puccio","rachel","raffaella","raffaello","renata","renato","renzo","riccardo","rita","roberto","rodolfo","rolando","romana","romina","romolo","rosa","rosalia","rosaria","rosario","rosina","ruggero","ruggiero","sabatino","salvatore","salvi","sandra","sandro","sante","santino","saverio","sebastian","serafina","serena","severino","silvestro","silvia","silvio","sonia","sophia","stefania","stefano","stella","susanna","tatiana","tazio","temistocle","tiziano","toni","torquato","tullio","ubaldo","ugo","umberto","valentina","valeria","valerio","vanessa","vanna","veronica","vincentio","vincenzo","virginia","viridiana","vito","vittoria","vittoria","vittorio","zaira","zanobi"];
TrainingDatas["Japanese Forenames"] = ["ai","aiko","aimi","airi","akane","akari","akemi","aki","akie","akifumi","akihiko","akihiro","akihisa","akihito","akiko","akimasa","akimi","akimitsu","akina","akinobu","akinori","akio","akira","akisada","akishige","akito","akitoshi","akitsugu","akiyoshi","akiyuki","amane","ami","anri","anzu","aoi","arata","arihiro","arinaga","arinobu","aritomo","asako","asami","asao","asuka","asuka","asumi","asuna","atomu","atsuhiko","atsuhiro","atsuko","atsumi","atsuo","atsushi","atsuto","atsuya","aya","ayaka","ayako","ayame","ayana","ayane","ayano","ayu","ayuka","ayumi","ayumu","azuma","azumi","azusa","banri","bunji","bunta","chiaki","chie","chieko","chiemi","chiharu","chihiro","chiho","chika","chikara","chikayoshi","chinami","chinatsu","chisato","chitose","chiyako","chiyo","chiyoko","chizuko","chizuru","choki","chōei","chūichi","dai","daichi","daigo","daiki","dairoku","daishin","daisuke","daizō","eiichi","eiichiro","eiji","eijirō","eikichi","eiko","eimi","einosuke","eishun","eisuke","eizō","emi","emiko","emiri","eri","erika","eriko","etsuji","etsuko","fujiko","fujio","fukumi","fumiaki","fumie","fumihiko","fumihiro","fumika","fumiko","fumio","fumito","fumiya","fusako","fusanosuke","fusazane","futoshi","fuyuki","fuyuko","gaku","gakuto","gen'ichi","gen'ichirō","genjiro","genta","gentarō","genzo","giichi","gin","goichi","goro","hachirō","hajime","hakaru","hana","hanae","hanako","haru","haruaki","haruchika","harue","haruhi","haruhiko","haruhiro","haruhisa","haruka","haruki","haruko","harumi","haruna","harunobu","haruo","harutaka","haruto","haruyo","haruyoshi","hatsu","hatsue","hatsuo","hayanari","hayate","hayato","hazuki","heihachirō","heisuke","hideaki","hideharu","hidehiko","hidehito","hideji","hidekazu","hideki","hideko","hidemasa","hidemi","hidemi","hidemitsu","hidenobu","hidenori","hideo","hideshi","hidetaka","hideto","hidetoshi","hidetsugu","hideyo","hideyoshi","hideyuki","hikari","hikaru","himeko","hinata","hiro","hiroaki","hiroe","hirofumi","hirohide","hirohisa","hiroji","hirokatsu","hirokazu","hiroki","hiroko","hirokuni","hiromasa","hiromi","hiromichi","hiromitsu","hiromori","hiromu","hironari","hironobu","hironori","hiroshi","hiroshige","hirotaka","hirotami","hiroto","hirotoki","hirotomo","hirotoshi","hirotsugu","hiroya","hiroyasu","hiroyo","hiroyoshi","hiroyuki","hisae","hisahito","hisako","hisamitsu","hisamoto","hisanobu","hisanori","hisao","hisashi","hisataka","hisateru","hisato","hisaya","hisaya","hisayasu","hisayo","hisayoshi","hisayuki","hitomi","hitoshi","hokuto","honami","hotaru","hozumi","ichiei","ichiko","ichirō","ichizō","iehisa","iemasa","iemon","iesada","ikko","ikue","ikumi","ikuo","ikurō","iori","ippei","isami","isamu","isao","issei","itaru","itsuki","itsuko","itsumi","iwao","izumi","jiichirō","jin","jin'ichi","jinpachi","jiro","jitsuko","jun","jun'ichirō","jun'ya","junichi","junji","junki","junko","junpei","junzō","jōichirō","jōji","jōkichi","jōtarō","jūbei","jūkichi","jūshirō","jūtarō","jūzō","kaede","kagami","kagemori","kagetaka","kaguya","kaho","kahoru","kaiji","kaito","kakichi","kaku","kakuji","kan'ichi","kana","kanae","kanako","kaname","kanehira","kanehiro","kanematsu","kanemoto","kanesuke","kanetake","kaneto","kanetsugu","kaneyoshi","kankuro","kansuke","kaori","kaoru","karin","kasumi","katsuaki","katsuei","katsuhiko","katsuhiro","katsuhisa","katsuhito","katsuji","katsuki","katsukiyo","katsuko","katsumasa","katsumi","katsumoto","katsunaga","katsunari","katsunori","katsunosuke","katsuo","katsushi","katsusuke","katsutarō","katsuteru","katsutomo","katsutoshi","katsuya","katsuyoshi","katsuyuki","kawai","kayo","kayoko","kazu","kazuaki","kazue","kazuharu","kazuhiko","kazuhiro","kazuhisa","kazuhito","kazuki","kazuko","kazuma","kazumasa","kazumi","kazunari","kazunori","kazuo","kazuoki","kazurō","kazusa","kazushi","kazushige","kazutaka","kazuto","kazutoki","kazutoshi","kazuya","kazuyo","kazuyoshi","kazuyuki","kei","keigo","keiichi","keiichirō","keiji","keijirō","keijū","keiki","keiki","keiko","keinosuke","keishi","keisuke","keita","keizō","ken","ken'ichi","ken'ichirō","ken'yū","kengo","kenji","kenjirō","kenki","kenkichi","kensaku","kenshin","kensuke","kenta","kentaro","kento","kenzo","kesao","kihachi","kihachirō","kihei","kiichirō","kiko","kikue","kikuko","kikuo","kimiko","kimio","kimiya","kin'ichi","kin'ichirō","kin'ya","kinji","kinjirō","kintaro","kira","kisaburō","kishō","kiyoaki","kiyofumi","kiyohide","kiyohiko","kiyohiro","kiyoji","kiyokazu","kiyoko","kiyomoto","kiyonari","kiyonori","kiyoshi","kiyosue","kiyotaka","kiyotake","kiyoyuki","kogorō","koharu","koji","kojiro","konomi","koson","kotaro","kotomi","kotori","kouta","koya","kozue","kumatarō","kumi","kumiko","kuniaki","kunie","kunihiko","kunihiro","kunihisa","kuniko","kunimitsu","kunio","kunitake","kuniyuki","kuranosuke","kurenai","kurumi","kusuo","kyo","kyoko","kyukichi","kyōhei","kyōichi","kyōji","kyōsuke","kōhei","kōichi","kōichirō","kōki","kōkichi","kōnosuke","kōsaku","kōsei","kōshirō","kōsuke","kōzō","maaya","machi","machiko","madoka","mahiro","maho","maiko","maki","makiko","makio","mako","makoto","mami","mamiko","mamoru","mana","manabu","manami","manjirō","mantarō","mao","mareo","mari","mariko","marié","masaaki","masabumi","masachika","masae","masafumi","masaharu","masahide","masahiko","masahiro","masahisa","masahito","masaichi","masaie","masaji","masakage","masakatsu","masakazu","masaki","masako","masakuni","masami","masamichi","masamitsu","masamori","masamune","masamura","masanao","masanobu","masanori","masao","masaomi","masaru","masashi","masashige","masataka","masatake","masatane","masateru","masato","masatomo","masatoshi","masatsugu","masaya","masayoshi","masayuki","masazumi","masumi","masuo","masuzō","matabei","matsuchi","matsuki","matsuko","matsuo","matsushige","mayako","mayu","mayuko","mayumi","mayura","megu","megumi","mei","meiko","meisa","michiaki","michiharu","michihiko","michihiro","michihisa","michiko","michinori","michio","michiru","michirō","michitaka","michitarō","michiya","michiyo","michiyoshi","midori","mie","mieko","miho","miiko","mika","mikako","miki","mikiko","mikio","mikoto","miku","mikuni","mikuru","mimori","mina","minae","minako","minami","mineichi","mineko","mineo","minori","mirai","misaki","misako","misao","misato","mitsuaki","mitsugi","mitsugu","mitsuharu","mitsuhide","mitsuhiko","mitsuhira","mitsuhiro","mitsuhisa","mitsuki","mitsuko","mitsumasa","mitsumori","mitsunobu","mitsunori","mitsuo","mitsuomi","mitsuru","mitsusuke","mitsutaka","mitsuteru","mitsutoshi","mitsuyasu","mitsuyo","mitsuyo","mitsuyoshi","mitsuyuki","miu","miwa","miwako","miyabi","miyako","miyoko","miyu","miyuki","miyumi","miyū","mizuho","mizuki","mizuko","mochiaki","moe","mokichi","momo","momoe","momoka","momoko","morihiko","morihiro","morikazu","morimasa","morio","moritaka","mosuke","motoaki","motoharu","motohiko","motohiro","motoichi","motojirō","motoki","motoko","motomu","motonobu","motoshi","motoshige","motosuke","mototada","mototsugu","motoyasu","motoyuki","motozane","mukuro","munehiro","munemori","munenobu","munenori","muneo","muneshige","munetaka","munetoki","munetoshi","murashige","mutsuko","mutsumi","mutsuo","nagaharu","nagahide","nagako","nagamasa","nagamichi","naganao","naganori","nagatoki","nagatomo","nagisa","nami","namio","nana","nanako","nanami","nanase","nankichi","nao","naofumi","naohiko","naohiro","naohisa","naohito","naoji","naokatsu","naoki","naoko","naomasa","naomi","naomichi","naomori","naoshi","naotaka","naotake","naoto","naoya","naoyuki","naozumi","nariaki","nariakira","naritaka","nariyasu","nariyuki","naruhisa","naruhito","narumi","natsue","natsuki","natsuko","natsume","natsumi","noa","noboru","nobuaki","nobuatsu","nobuharu","nobuhiko","nobuhiro","nobuhisa","nobuhito","nobukatsu","nobukazu","nobuko","nobumasa","nobumitsu","nobumoto","nobunao","nobunari","nobuo","nobusada","nobusuke","nobutaka","nobuteru","nobutoki","nobutomo","nobutoshi","nobutsuna","nobuyasu","nobuyoshi","nobuyuki","nodoka","noriaki","norifumi","norifusa","norihiko","norihiro","norihito","norikazu","noriko","norimasa","norio","noriyasu","noriyo","noriyoshi","noriyuki","nozomi","nozomu","okimoto","okitsugu","omi","osamu","otoha","otohiko","otome","raizo","ran","rei","reiichi","reiji","reika","reiko","reizō","ren","rena","rentarō","rie","rieko","riho","riichi","rika","rikichi","rikiya","riku","rin","rina","rinshō","risa","ritsuko","rokurō","rumi","rumiko","runa","ruri","ruriko","ryoko","ryu","ryō","ryōhei","ryōichi","ryōji","ryōka","ryōma","ryōsei","ryōsuke","ryōta","ryōtarō","ryōzō","ryūhei","ryūichi","ryūji","ryūki","ryūnosuke","ryūsaku","ryūsei","ryūsuke","ryūta","ryūtarō","ryūya","ryūzō","saburō","sachie","sachiko","sachio","sadaaki","sadaharu","sadahiko","sadako","sadao","sadatoshi","sadayoshi","sadazane","saeko","saiichi","sakae","saki","sakichi","sakie","sakiko","sakura","sakurako","sanae","saori","satoko","satomi","satonari","satoru","satoshi","satsuki","satsuo","sawako","saya","sayaka","sayako","sayoko","sayumi","sayuri","seigen","seigo","seihō","seiichi","seiichirō","seiji","seijin","seijirō","seikichi","seiko","seishi","seishirō","seiya","seizō","senkichi","setsuko","setsuna","shichirō","shigeaki","shigefumi","shigeharu","shigehiro","shigehisa","shigekazu","shigeki","shigeko","shigemasa","shigematsu","shigemi","shigemitsu","shigenaga","shigenobu","shigenori","shigeo","shigeri","shigeru","shigetada","shigetaka","shigeto","shigetoshi","shigeyasu","shigeyoshi","shigeyuki","shiho","shiina","shikō","shimako","shin","shin'ichi","shin'ichirō","shinako","shingo","shinji","shinjirō","shinjō","shinkichi","shino","shinobu","shinpei","shinsaku","shinsuke","shinta","shintarō","shinya","shinzō","shion","shiori","shizue","shizuka","shizuko","shizuo","shoko","shuko","shuko","shun","shun'ichi","shun'ichirō","shun'ya","shunji","shunkichi","shunpei","shunsaku","shunsuke","shuntarō","shunzō","shō","shōgo","shōhei","shōichi","shōji","shōjirō","shōma","shōsuke","shōta","shōtarō","shōya","shōzō","shūgo","shūhei","shūichi","shūji","shūsaku","shūsuke","shūta","shūzō","sonosuke","sora","subaru","suehiro","suguru","sukehiro","sukemasa","suketoshi","suketsugu","sumika","sumiko","sumio","sumire","sumiyoshi","sunao","susumu","suzue","suzuko","sōgen","sōichi","sōichirō","sōji","sōsuke","sōtarō","tadaaki","tadachika","tadafumi","tadaharu","tadahiko","tadahiro","tadahito","tadakatsu","tadamasa","tadami","tadamori","tadanaga","tadanao","tadanari","tadanobu","tadanori","tadao","tadaoki","tadashi","tadataka","tadateru","tadatomo","tadatoshi","tadatsugu","tadatsune","tadayo","tadayoshi","tadayuki","taeko","taichi","taichirō","taiga","taiichi","taiji","taiki","taishi","taisuke","taka","takaaki","takafumi","takahide","takahiko","takahiro","takahisa","takahito","takaki","takako","takamasa","takamitsu","takanobu","takanori","takao","takashi","takatomi","takatoshi","takatsugu","takauji","takaya","takayasu","takayoshi","takayuki","takeaki","takefumi","takeharu","takehiko","takehiro","takehisa","takehito","takeichi","takejirō","takeko","takenaga","takenori","takeo","takeru","takeshi","taketo","taketora","taketoshi","takeya","takeyoshi","takezō","taku","takuji","takuma","takumi","takuo","takurō","takuto","takuya","takuzō","tamaki","tamao","tamiko","tamio","tamotsu","tarō","tateo","tatsuaki","tatsuhiko","tatsuhiro","tatsuhito","tatsuji","tatsuko","tatsuma","tatsumi","tatsunori","tatsuo","tatsurō","tatsushi","tatsuya","tatsuyoshi","tatsuyuki","teiji","teijirō","teiko","teiko","teizō","teppei","teru","teruaki","teruhiko","teruhisa","teruko","terumasa","terumi","terunobu","teruo","teruyoshi","teruyuki","tetsu","tetsuharu","tetsuji","tetsumasa","tetsuo","tetsurō","tetsushi","tetsutarō","tetsuya","tetsuzō","togo","tokihiko","tokiko","tokio","tokuji","tokujirō","tokuko","tokuo","tokurō","tokutarō","tomiko","tomio","tomo","tomoaki","tomochika","tomoe","tomoharu","tomohide","tomohiko","tomohiro","tomohisa","tomohito","tomoji","tomoka","tomokazu","tomoki","tomoko","tomomi","tomomichi","tomonobu","tomonori","tomotaka","tomoya","tomoyasu","tomoyo","tomoyoshi","tomoyuki","torahiko","toru","toshi","toshiaki","toshiharu","toshihide","toshihiko","toshihiro","toshihisa","toshihito","toshikatsu","toshikazu","toshiki","toshiko","toshimasa","toshimi","toshimichi","toshimitsu","toshinaga","toshinari","toshinobu","toshinori","toshio","toshirō","toshitada","toshitaka","toshitsugu","toshiya","toshiyasu","toshiyuki","toshizō","toyoaki","toyohiko","toyokazu","toyoko","toyomatsu","toyoshige","toyozō","tsubasa","tsugio","tsukasa","tsuneharu","tsunehisa","tsunejirō","tsuneko","tsunemi","tsunenori","tsuneo","tsuneyoshi","tsuneyuki","tsutomu","tsuyoshi","umanosuke","umeji","umeko","wakako","wataru","yaeko","yahiko","yahiro","yanosuke","yasuaki","yasue","yasufumi","yasuharu","yasuhide","yasuhiko","yasuhiro","yasuhisa","yasuji","yasujirō","yasukazu","yasuki","yasuko","yasumasa","yasumi","yasumichi","yasunari","yasunobu","yasunori","yasuo","yasurō","yasushi","yasutaka","yasutomo","yasutoshi","yasuyoshi","yasuyuki","yatarō","yayoi","yoko","yorimitsu","yorinobu","yorishige","yoritaka","yoritsugu","yoritsune","yoriyuki","yoshi","yoshifumi","yoshihide","yoshihiko","yoshihiro","yoshihisa","yoshihito","yoshiie","yoshika","yoshikane","yoshikatsu","yoshikazu","yoshiki","yoshikiyo","yoshiko","yoshikuni","yoshimasa","yoshimatsu","yoshimi","yoshimichi","yoshinaga","yoshinao","yoshinari","yoshino","yoshinobu","yoshinori","yoshio","yoshirō","yoshisada","yoshishige","yoshisuke","yoshitaka","yoshitake","yoshitarō","yoshiteru","yoshito","yoshitomo","yoshitsugu","yoshiya","yoshiyasu","yoshiyuki","yugi","yugo","yui","yuka","yukari","yuki","yukie","yukiharu","yukihiko","yukihiro","yukiko","yukimasa","yukimura","yukina","yukinobu","yukinori","yukio","yukitaka","yukito","yukiya","yumeko","yumi","yumika","yumiko","yuri","yurie","yurika","yuriko","yurina","yutaka","yuzuru","yō","yō","yōhei","yōichi","yōichirō","yōji","yōjirō","yōsuke","yōta","yōzō","yū","yūdai","yūhei","yūichi","yūichirō","yūji","yūjirō","yūkichi","yūko","yūsaku","yūsei","yūshi","yūsuke","yūta","yūtarō","yūto","yūya","yūzō","zenjiro","zenkichi","zentarō","zenzō"];
TrainingDatas["Mythical Humanoids"] = ["adlet","ala","angel","asterius","aswang","bannik","blafard","boggart","brownie","bugbear","bunyip","caliban","centaur","changeling","clurichaun","cyclopes","demon","devil","doppelganger","draugar","dryad","duduri","dullahan","dwarf","elf","empusa","encantado","ent","erinyes","fairy","faun","fiura","gargoyle","garuda","ghoul","giant","giantess","gigantes","gnome","goblin","gorgon","gremlin","grendel","gwishin","hag","haltija","harpy","hibagon","hobbit","hobgoblins","huldra","imp","incubus","incubus","jengu","jinn","jorogumo","jotuns","kappa","kikimora","kitsune","knocker","kobold","korrigan","lamia","lamia","lares","leprechaun","lich","little people","lycanthrope","manticore","menehune","mermaid","merman","minotaur","monaciello","monopod","mothman","mummy","naga","naiad","nereid","nix","nukekubi","nuno","nymph","oceanid","ogre","ogre","ogress","oni","orc","ork","pan","pixie","poltergeist","pombero","pugot","redcap","rusalka","samebito","sandman","satyr","seelie","selkie","sidhe","siren","sphinx","spriggan","sprite","succubus","sylph","tengu","tennin","tikbalang","titan","tiyanak","triton","troll","troll","trow","tyress","undine","valkyrie","vampire","vetter","vila","wendigo","werecat","werehyena","werewolf","yeren","yeti","yukionna","zombie"];
TrainingDatas["Norse Deity Forenames"] = ["baduhenna","baldr","beyla","bil","bragi","brynhildr","dellingr","eir","eir","forseti","freyja","freyr","frigg","fulla","gefjun","geirahöð","geiravör","geirdriful","geirskögul","geirönul","gersemi","gerðr","gná","gullveig","gunnr","guðr","göll","göndul","hariasa","heimdallr","herfjötur","herja","hermóðr","hervör","hildr","hjalmþrimul","hjörþrimul","hlaðguðr","hlín","hlökk","hnoss","hretha","hrist","hrund","höðr","hœnir","ilmr","irpa","iðunn","kára","lofn","loki","lóðurr","meili","mist","máni","nanna","nerthus","njörun","njörðr","odin","randgríðr","reginleif","rindr","rán","ráðgríðr","róta","sandraudiga","sanngriðr","saxnōt","sif","sigrdrífa","sigrún","sigyn","sinthgunt","sjöfn","skalmöld","skaði","skeggöld","skuld","skögul","snotra","sveið","svipul","syn","sága","sól","tanfana","thor","týr","ullr","vili","viðarr","váli","vár","vé","vör","zisa","óðr","ölrún","þorgerðr","þrima","þrúðr","þrúðr","þögn","ēostre"];
TrainingDatas["Pokemon"] = ["abomasnow","abra","absol","accelgor","aegislash","aerodactyl","aggron","aipom","alakazam","alomomola","altaria","amaura","ambipom","amoonguss","ampharos","anorith","arbok","arcanine","arceus","archen","archeops","ariados","armaldo","aromatisse","aron","articuno","audino","aurorus","avalugg","axew","azelf","azumarill","azurill","bagon","baltoy","banette","barbaracle","barboach","basculin","bastiodon","bayleef","beartic","beautifly","beedrill","beheeyem","beldum","bellossom","bellsprout","bergmite","bewear","bibarel","bidoof","binacle","bisharp","blastoise","blaziken","blissey","blitzle","boldore","bonsly","bouffalant","braixen","braviary","breloom","bronzong","bronzor","bruxish","budew","buizel","bulbasaur","buneary","bunnelby","burmy","butterfree","cacnea","cacturne","camerupt","carbink","carnivine","carracosta","carvanha","cascoon","castform","caterpie","celebi","chandelure","chansey","charizard","charjabug","charmander","charmeleon","chatot","cherrim","cherubi","chesnaught","chespin","chikorita","chimchar","chimecho","chinchou","chingling","cinccino","clamperl","clauncher","clawitzer","claydol","clefable","clefairy","cleffa","cloyster","cobalion","cofagrigus","combee","combusken","conkeldurr","corphish","corsola","cottonee","cradily","cranidos","crawdaunt","cresselia","croagunk","crobat","croconaw","crustle","cryogonal","cubchoo","cubone","cutiefly","cyndaquil","darkrai","darmanitan","darumaka","dedenne","deerling","deino","delcatty","delibird","delphox","deoxys","dewgong","dewott","dialga","diancie","diggersby","diglett","ditto","dodrio","doduo","donphan","doublade","dragalge","dragonair","dragonite","drampa","drapion","dratini","drifblim","drifloon","drilbur","drowzee","druddigon","ducklett","dugtrio","dunsparce","duosion","durant","dusclops","dusknoir","duskull","dustox","dwebble","eelektrik","eelektross","eevee","ekans","electabuzz","electivire","electrike","electrode","elekid","elgyem","emboar","emolga","empoleon","entei","escavalier","espeon","espurr","excadrill","exeggcute","exeggutor","exploud","farfetch'd","fearow","feebas","fennekin","feraligatr","ferroseed","ferrothorn","finneon","flaaffy","flabébé","flareon","fletchinder","fletchling","floatzel","floette","florges","flygon","foongus","forretress","fraxure","frillish","froakie","frogadier","froslass","furfrou","furret","gabite","gallade","galvantula","garbodor","garchomp","gardevoir","gastly","gastrodon","genesect","gengar","geodude","gible","gigalith","girafarig","giratina","glaceon","glalie","glameow","gligar","gliscor","gloom","gogoat","golbat","goldeen","golduck","golem","golett","golurk","goodra","goomy","gorebyss","gothita","gothitelle","gothorita","gourgeist","granbull","graveler","greninja","grimer","grotle","groudon","grovyle","growlithe","grubbin","grumpig","gulpin","gurdurr","gyarados","happiny","hariyama","haunter","hawlucha","haxorus","heatmor","heatran","heliolisk","helioptile","heracross","herdier","hippopotas","hippowdon","hitmonchan","hitmonlee","hitmontop","hooh","honchkrow","honedge","hoopa","hoothoot","hoppip","horsea","houndoom","houndour","huntail","hydreigon","hypno","igglybuff","illumise","infernape","inkay","ivysaur","jellicent","jigglypuff","jirachi","jolteon","joltik","jumpluff","jynx","kabuto","kabutops","kadabra","kakuna","kangaskhan","karrablast","kecleon","keldeo","kingdra","kingler","kirlia","klang","klefki","klink","klinklang","koffing","komala","krabby","kricketot","kricketune","krokorok","krookodile","kyogre","kyurem","lairon","lampent","landorus","lanturn","lapras","larvesta","larvitar","latias","latios","leafeon","leavanny","ledian","ledyba","lickilicky","lickitung","liepard","lileep","lilligant","lillipup","linoone","litleo","litten","litwick","lombre","lopunny","lotad","loudred","lucario","ludicolo","lugia","lumineon","lunala","lunatone","luvdisc","luxio","luxray","machamp","machoke","machop","magby","magcargo","magearna","magikarp","magmar","magmortar","magnemite","magneton","magnezone","makuhita","malamar","mamoswine","manaphy","mandibuzz","manectric","mankey","mantine","mantyke","maractus","mareep","marill","marowak","marshtomp","masquerain","mawile","medicham","meditite","meganium","meloetta","meowstic","meowth","mesprit","metagross","metang","metapod","mewtwo","mew","mienfoo","mienshao","mightyena","milotic","miltank","mimejr","mimikkyu","minccino","minun","misdreavus","mismagius","moltres","monferno","mothim","mrmime","mudkip","muk","munchlax","munna","murkrow","musharna","natu","nidoking","nidoqueen","nidoran","nidoran♂","nidorina","nidorino","nincada","ninetales","ninjask","noctowl","noibat","noivern","nosepass","numel","nuzleaf","octillery","oddish","omanyte","omastar","onix","oshawott","pachirisu","palkia","palpitoad","pancham","pangoro","panpour","pansage","pansear","paras","parasect","patrat","pawniard","pelipper","persian","petilil","phanpy","phantump","phione","pichu","pidgeot","pidgeotto","pidgey","pidove","pignite","pikachu","pikipek","piloswine","pineco","pinsir","piplup","plusle","politoed","poliwag","poliwhirl","poliwrath","ponyta","poochyena","popplio","porygon","porygon","porygonz","primeape","prinplup","probopass","psyduck","pumpkaboo","pupitar","purrloin","purugly","pyroar","quagsire","quilava","quilladin","qwilfish","raichu","raikou","ralts","rampardos","rapidash","raticate","rattata","rayquaza","regice","regigigas","regirock","registeel","relicanth","remoraid","reshiram","reuniclus","rhydon","rhyhorn","rhyperior","riolu","rockruff","roggenrola","roselia","roserade","rotom","rowlet","rufflet","sableye","salamence","salandit","samurott","sandile","sandshrew","sandslash","sawk","sawsbuck","scatterbug","sceptile","scizor","scolipede","scrafty","scraggy","scyther","seadra","seaking","sealeo","seedot","seel","seismitoad","sentret","serperior","servine","seviper","sewaddle","sharpedo","shaymin","shedinja","shelgon","shellder","shellos","shelmet","shieldon","shiftry","shinx","shroomish","shuckle","shuppet","sigilyph","silcoon","simipour","simisage","simisear","skarmory","skiddo","skiploom","skitty","skorupi","skrelp","skuntank","slaking","slakoth","sliggoo","slowbro","slowking","slowpoke","slugma","slurpuff","smeargle","smoochum","sneasel","snivy","snorlax","snorunt","snover","snubbull","solgaleo","solosis","solrock","spearow","spewpa","spheal","spinarak","spinda","spiritomb","spoink","spritzee","squirtle","stantler","staraptor","staravia","starly","starmie","staryu","steelix","stoutland","stunfisk","stunky","sudowoodo","suicune","sunflora","sunkern","surskit","swablu","swadloon","swalot","swampert","swanna","swellow","swinub","swirlix","swoobat","sylveon","taillow","talonflame","tangela","tangrowth","tapu koko","tauros","teddiursa","tentacool","tentacruel","tepig","terrakion","throh","thundurus","timburr","tirtouga","togedemaru","togekiss","togepi","togetic","torchic","torkoal","tornadus","torterra","totodile","toxicroak","tranquill","trapinch","treecko","trevenant","tropius","trubbish","turtwig","tympole","tynamo","typhlosion","tyranitar","tyrantrum","tyrogue","tyrunt","umbreon","unfezant","unown","ursaring","uxie","vanillish","vanillite","vanilluxe","vaporeon","venipede","venomoth","venonat","venusaur","vespiquen","vibrava","victini","victreebel","vigoroth","vikavolt","vileplume","virizion","vivillon","volbeat","volcanion","volcarona","voltorb","vullaby","vulpix","wailmer","wailord","walrein","wartortle","watchog","weavile","weedle","weepinbell","weezing","whimsicott","whirlipede","whiscash","whismur","wigglytuff","wingull","wobbuffet","woobat","wooper","wormadam","wurmple","wynaut","xatu","xerneas","yamask","yanma","yanmega","yungoos","yveltal","zangoose","zapdos","zebstrika","zekrom","zigzagoon","zoroark","zorua","zubat","zweilous","zygarde"];
TrainingDatas["Roman Deity Forenames"] = ["abeona","abudantia","adeona","aequitas","aera","aeternitas","africus","alemonia","angerona","angita","anna","antevorte","aphrodite","apollo","aquilo","ares","artemis","asclepius","athena","attis","aurora","auster","bacchus","bellona","bona","bubona","camenaees","candelifera","cardea","carmenta","carnea","ceres","cinxia","clementia","cloacina","coelus","concordia","conditor","consus","convector","copia","corus","cunina","cupid","cybele","dea","dea","decima","demeter","devera","deverra","dia","diana","dis","disciplina","discordia","dius","egestes","empanda","endovelicus","eventus","fabulinus","fama","fauna","faunus","faunus","faustitas","favonius","febris","felicitas","feronia","fides","flora","fontus","fornax","fortuna","fulgora","furies","furina","hephaestus","hera","hercules","hermes","hestia","honos","indivia","isis","janus","juno","jupiter","juturna","juventas","lactans","lares","laverna","liber","libera","liberalitas","libertas","libitina","lima","lucifer","lucina","luna","maia","maiesta","manes","mania","mars","matuta","meditrina","mefitas","mellona","mena","menrva","mens","mercury","messor","minerva","mithras","moneta","mors","morta","muta","mutinus","naenia","necessitas","nemestrinus","neptune","nona","nox","nundina","obarator","occator","ops","orbona","orcus","pales","parcaes","pax","penates","picus","pietas","poena","pomona","portunes","porus","poseidon","postverta","potina","priapus","prorsa","providentia","pudicitia","puta","quirinus","quiritis","robigo","robigus","roma","rumina","salus","sancus","saritor","saturn","securitas","semonia","serapis","silvanus","sol","sol","somnus","sors","spes","stata","stimula","strenua","suadela","subrincinator","summanus","tellus","tempestes","terminus","terra","trivia","vacuna","veiovis","venus","veritas","vertumnus","vesta","victoria","viduus","viriplacaa","virtus","vitumnus","volturnus","volumna","vulcan","vulturnus","zeus"];
TrainingDatas["Roman Emperor Forenames"] = ["aemilian","alexander","alexios","anastasios","anastasius","andronikos","anthemius","antoninus","arcadius","artabasdos","augustus","aurelian","avitus","balbinus","basil","basiliscus","caligula","caracalla","carinus","carus","claudius","claudius","commodus","constans","constans","constantine","constantius","constantius","didius","diocletian","domitian","elagabalus","florian","galba","galerius","gallienus","geta","glycerius","gordian","gordian","gratian","hadrian","heraclius","heraklonas","honorius","hostilian","irene","isaac","joannes","john","jovian","julian","julius","justin","justinian","leo","leontios","libius","licinius","lucius","macrinus","magnus","majorian","manuel","marcian","marcus","maurice","maxentius","maximian","maximinus","michael","nero","nerva","nikephoros","numerian","olybrius","otho","pertinax","petronius","philippikos","phocas","probus","pupienus","quintillus","romanos","romulus","septimius","severus","staurakios","tacitus","theodora","theodosios","theodosius","theodosius","theophilos","tiberius","tiberius","titus","trajan","trebonianus","valens","valentinian","valerian","vespasian","vetranio","vitellius","zeno","zoe"];
TrainingDatas["Russian Forenames"] = ["aaron","abagor","abamon","abataly","abdaikl","abdullah","abel","abelyar","abid","abijah","abily","abnody","abo","abram","aburom","adrian","afanasy","agafa","agafangel","agafiya","agafodor","agafokliya","agafon","agafonik","agafonika","agap","agapa","agapion","agapit","agapiya","agapy","agat","agatha","agav","agavva","albert","alexey","alla","alya","amvrosy","anastasia","anatoly","andrey","angelika","anna","anton","anya","arina","artemy","artyom","aurora","avda","avdakt","avdelay","avdey","avdifaks","avdiky","avdiyes","avdon","avdotya","avel","avelina","avenir","avenira","aventin","aventina","averky","avessalom","avgar","avgury","avgust","avgusta","avgustin","avgustina","aviafa","avian","avim","avimelekh","avip","avit","aviv","aviva","avksenty","avksily","avksivy","avkt","avlida","avram","avrelian","avreliya","avrely","avrey","avreya","avros","avsey","avtonom","avtonoma","avudim","avundy","avva","avvakir","avvakum","bogdan","boris","borislav","boyan","branislav","damir","danica","daniel","daniil","danilo","daria","dario","darko","david","diana","dmitry","ekaterina","elena","elina","galenka","galina","gennadiya","gennady","genrikh","georgy","gerasim","gniewomir","grigory","grischa","igor","ilarion","ilya","inal","inna","irina","ivan","jaroslav","joseph","katja","katya","kira","kirill","konstantin","konstantine","lada","lana","lena","leonid","liběna","ljuba","lubomir","ludmila","ludomir","lukyan","lyubov","magdalena","margarita","maria","marta","masha","maxim","mikhail","milan","milena","milica","milorad","mira","miroslav","mstislav","nadezhda","nadia","nail","nastja","natacha","natalia","natasha","nicholas","nicole","nikita","nina","nonna","odette","oksana","oleg","olga","osip","ossip","panteley","pavel","pavsikakiy","petya","piotr","polina","pyotr","rachel","radmila","radomir","radoslav","radul","raisa","rasim","ratimir","robert","roman","rostislav","ruslan","rustem","sambor","snežana","sobieslaw","sonia","sophia","stanimir","stanislav","stanislava","stefania","svetlana","svetoslav","sviatoslav","tamara","tanya","tatiana","timofey","timur","tonya","vadim","valentina","valeria","valery","vanya","vasilisa","velimir","veniamin","vera","viacheslav","viktor","viktoriya","vitomir","vlada","vladan","vladimir","vladislav","volodymyr","vsevolod","yakov","yefim","yegor","yekaterina","yelena","yermolay","yulia","yury","zenaida","zinoviy","zinovy","zora","zoran","zoya"];
TrainingDatas["Scottish Surnames"] = ["aileanach","ailpeanach","allanach","ambarsan","andarsan","anndrasdan","arasgain","baran","barrach","beitean","bhodhsa","bhàsa","blacach","blàr","blàrach","bochanan","boid","breac","breathnach","brothaigh","bruis","brus","bràigheach","brùn","buideach","buidheach","buids","buiseid","bànach","bòideach","cailbhin","caileanach","caimbeul","caimbeulach","camran","camshron","camshronach","cananach","canonach","caoidheach","caolaisdean","catach","catan","catanach","ceallach","ceanadach","ceannaideach","cearrach","ceiteach","ciar","ciarach","ciogach","coineagan","crannach","creag","criatharach","cuimeanach","cuimein","cuimeineach","càidh","cèamp","cèampach","còmhan","dalais","deòir","deòireach","druimeanach","druimein","druimeineach","druiminn","dubh","dubhach","dunaid","dunaidh","dòmhnallach","dùbhghlas","dùghallach","dùghlas","dùghlasach","eabarcrombaigh","fearghasdan","fionnlasdan","flimean","foirbeis","foirbeiseach","forsàidh","friseal","frisealach","fòlais","gall","gallach","geadais","geadasach","gearailteach","gilios","gillandrais","gilleasbaig","gilleasbuig","gillechriosd","gillechrìost","giobsan","glas","gobha","grannd","grannda","granndach","greum","greumach","griogal","griogalach","griogarach","guaire","guinne","gunnach","gutraidh","gòrdan","gòrdanach","latharnach","lathurna","leamhanach","leamhnach","leòideach","lobhdain","loganach","loudain","lìos","lìosach","lùtair","macabhra","macabhsalain","macadaidh","macadhaimh","macaididh","macailein","macailpein","macalasdair","macambrais","macamhalghaidh","macamhlaidh","macamhlaigh","macanndaidh","macanndra","macanndrais","macaodhagain","macaoidh","macaoidhein","macaomalain","macaonghais","macara","macartain","macartair","macasgaidh","macasgaill","macasgain","macbeatha","macbeathag","macbharrais","macbheatha","macbheathaig","macbheathain","macbhigein","macbhiocair","macbhlàthain","macbhradain","macbhraonaigh","macbhrìghdeinn","macbhàididh","macbhàtair","maccaibe","maccailein","maccain","maccaisgein","maccalmain","maccaluim","maccaog","maccaoig","maccardaidh","maccarmaig","maccathachaidh","maccathail","maccathain","maccathasaigh","maccathbhaidh","maccathbharra","macceallaig","macceallaigh","macceallair","maccearnaigh","maccearraich","macceasain","macchoinnich","maccianain","macciarain","maccinidh","macciomalain","maccionadha","macclambroch","maccnaimhin","maccnusachainn","maccodrum","maccoinnich","maccoinnigh","maccolla","maccomhainn","macconaill","macconnain","maccorcadail","maccormaig","maccosgraigh","maccrain","maccreamhain","maccriomain","maccrithein","maccrosain","maccruimein","maccrìsdein","maccròin","maccuaig","maccuidhein","maccuilcein","maccuinn","maccuinnleis","maccuirc","maccuithein","maccullach","maccullaich","maccumasgaigh","maccumhais","maccuthais","maccàba","maccòiseam","maccòmhain","maccòmhghan","maccùga","macdheòrsa","macdhiarmaid","macdhonnchaidh","macdhrostain","macdhubhaich","macdhubhaig","macdhubhshìth","macdhubhthaich","macdhuibh","macdhunlèibhe","macdhàibhidh","macdhòmhnaill","macdhùghaill","macdhùnshléibhe","macdiarmaid","maceachaidh","maceachainn","maceachairn","maceacharna","macealair","macealar","maceamailinn","maceanain","maceanraig","maceòghainn","macfhearchair","macfhearghail","macfhearghais","macfhilib","macfhiongain","macfhionghain","macfhionnlaigh","macfhitheachain","macfhlaithbheartaich","macfhraing","macfhraingein","macfigeinn","macfrìdeinn","macfuirigh","macgairbheith","macgaradh","macghearailt","macghille","macgille","macgilleain","macgillearnain","macgilleasbaig","macgilleathain","macgillebhreac","macgillebhràth","macgillebhrìghde","macgillebhàin","macgillechaluim","macgillechrìosd","macgilledhonaghart","macgilledhuibh","macgillefhialain","macgilleghlais","macgillemhartainn","macgilleriabhaich","macgilleseathanaich","macgilleòin","macgillfhaolagain","macgillfhiontag","macgilliosa","macgilloig","macgillonaidh","macgiobain","macglaisein","macgobhainn","macgoraidh","macgoraidh","macgriogair","macguaire","macgumaraid","maciain","macillanndrais","macillanndrais","macillaodhagain","macilldheòra","macille","macillearnain","macilleasbaig","macilleathain","macilleathainn","macillebheathain","macillebhlàthain","macillebhreac","macillebhris","macillebhràth","macillebhrìghde","macillebhuidh","macillebhuidhe","macillebhàin","macillebhàin","macillechaluim","macillechatain","macillechathbhaidh","macillechiar","macillechiar","macillechiarain","macillechomhghain","macillechonaill","macillechruim","macillechrìosd","macilledhonaghart","macilledhubhthaich","macilledhuibh","macilledhuibh","macilledhuinn","macilledhòmhnaich","macilleghlais","macilleghuinnein","macilleghuirm","macillemhaoil","macillemhearnaig","macillemhoire","macillemhàrtainn","macillemhìcheil","macillemhìcheil","macillemhòire","macillenaoimh","macillenaoimh","macillepheadair","macillephàdraig","macilleriabhaich","macilleriabhaich","macilleruaidh","macilleruaidh","macillesheathain","macillesheathanaich","macillesheathnaich","macillethòmhais","macilleòin","macillfhaolagain","macillfhaolain","macillfheargain","macillfhialain","macillfhinnein","macillfhinnein","macillfhinntain","macillfhionndaig","macillfhionndaig","macillfhionndain","macillianain","macilliomchadha","macilliosa","macilloig","macillonchon","macillonfhaidh","macillosa","macilluidhir","macilléidich","macillìmheir","macillìosa","maciomhair","macionmhainn","maciosaig","maclabhrainn","maclabhruinn","maclachlainn","maclagain","maclamraich","maclaomainn","maclathagain","macleòid","macleòir","maclianain","macliuthar","maclothaidh","maclughaidh","macluinge","macluirg","maclulaich","maclùcaidh","maclùcais","macmhaighstir","macmhanachain","macmhannain","macmhaoilein","macmhaoirn","macmhaolagain","macmhaolain","macmhaolbheatha","macmhaolchaluim","macmhaoldòmhnaich","macmhaolìosa","macmharais","macmharcais","macmhata","macmhatha","macmhathain","macmhiadhchain","macmhoirein","macmhorgain","macmhuircheartaich","macmhuirich","macmhunna","macmhurardaich","macmhurchaidh","macmhànais","macmhàrtainn","macmhèinn","macmhìcheil","macmhòrdha","macnaois","macnaomhain","macneacail","macneachdain","macneis","macnia","macniallghais","macniallghuis","macniocail","macnobaill","macnèill","macnìll","macphaid","macphaidein","macphail","macphairce","macpheadair","macpheadarain","macpheadrais","macpheidearain","macphilip","macphàdraig","macphàic","macphàidein","macphàil","macphàrlain","macphòil","macrabaidh","macraghnaill","macraibeirt","macraoimhin","macraoiridh","macraonaill","macrath","macriada","macriocaird","macrisnidh","macrob","macrobaidh","macroibeirt","macroithridh","macruairidh","macrusachainn","macràild","macrìdeinn","macrìgh","macshanndaidh","macshealbhaigh","macsheòrais","macsheòrsa","macshimidh","macshithich","macshitrig","macshomhairle","macshuibhne","macshìm","macsiridh","macsporain","macsuain","macsual","macthaidhg","mactheàrlaich","macthom","macthomaidh","macthorcadail","macthorcaill","macthàmhais","macthòmais","mactiridh","mactuirc","macualraig","macuaraig","macuchtraigh","macuilleim","macuirigh","macuirigh","macuisdein","macurardaidh","macurardaigh","macurchadain","macurchaidh","macusbaig","macàidh","macùisdein","maoileanach","maoliosa","matasan","mathanach","matharnach","mawr","moireach","moireasdan","moireasdanach","morgan","morganach","munna","màrnach","màrr","màrtainn","mèinn","mèinnearach","niocalsan","padarsan","paorach","peadarsan","peucag","peutan","preas","puidreach","rathais","robasan","robasdan","roid","roideach","ros","rosach","rothach","ruadh","ruiseal","ròs","ròsach","sailcirc","salmond","scottish","scottish","seadh","seadhg","seagha","seaghach","seathanach","sginnearach","sgot","sgèin","singleir","siosal","siosalach","smios","stiùbhart","stiùbhartach","sutharlainn","sutharlan","suthurlanach","sùdrach","talmhach","tod","todt","tolmach","tuairnear","tulach","tàileach","tàillear","ualas","umphraidh","urchadainn","urchardan","ìomharach"];
TrainingDatas["Snakes"] = ["adder","anaconda","asp","aspviper","ballpython","bambooviper","birdsnake","blackmamba","blackratsnake","blacksnake","blindsnake","bluntnoseviper","boa","boaconstrictor","boomslang","brownsnake","brownwaterpython","bullsnake","burrowingviper","bushmaster","bushviper","capecobra","carpetviper","cateyedsnake","catsnake","chickensnake","coachwhipsnake","cobra","commoncobra","congosnake","copperhead","coralsnake","cornsnake","cottonmouth","crossedviper","crownedsnake","deathadder","desertdeathadder","diamondpython","dwarfboa","eyelashviper","eyelashviper","falsecobra","fiercesnake","fishingsnake","flyingsnake","forestcobra","foxsnake","gartersnake","glossysnake","gophersnake","grasssnake","graycatsnake","greenanaconda","greenmamba","greensnake","groundboa","heraldsnake","hognosedviper","hognosesnake","hoopsnake","hornedadder","hornedviper","keelback","kingbrown","kingcobra","kingsnake","leafviper","longnosed dder","lyresnake","mamba","milksnake","moccasinsnake","moleviper","mountainadder","mudadder","mudsnake","nightsnake","palmviper","parrotsnake","patchnosesnake","pinesnake","pipesnake","pitviper","puffadder","python","queensnake","raddysnake","rainbowboa","ratsnake","rattler","rattlesnake","riverjack","rubberboa","sandadder","sandboa","sandviper","seasnake","sidewinder","smoothsnake","spittingcobra","stilettosnake","stormwatercobra","stripedsnake","sunbeamsnake","tentacledsnake","tigersnake","treeboa","treeboa","treesnake","treeviper","twigsnake","viper","wartsnake","wateradder","watermoccasin","watersnake","whipsnake","wolfsnake","wormsnake","yellowcobra","zebrasnake"];
TrainingDatas["Spanish Forenames"] = ["aaron","ababa","abigail","abrahan","absalon","abundio","adalberto","adan","adela","adelaida","adelia","adisoda","adolfo","adrian","adriana","adriano","africa","agapito","agueda","agustina","aida","aimar","ainara","ainhoa","aitor","alba","albano","alberto","alejandra","alejandro","alfonso","alfredo","alicia","alma","almudena","alodia","alondra","altagracia","alvara","alvaro","amalia","amanda","amaya","amelia","amparo","ana","andrea","andres","angel","angela","angeles","angelica","anibal","aniceto","anita","antero","antonia","antonieta","antonio","araceli","arantxa","ariel","armando","arturo","ascension","asuncion","augustin","aurelia","aurelio","aurora","azucena","barbara","bartolome","basilio","beatriz","begona","belen","beltran","beneharo","benita","benito","benjamin","bernardino","bernardo","berta","blanca","blas","bonifacio","braulio","brunilda","calixto","camila","candida","candido","canuto","caridad","carla","carlos","carlota","carmen","carolina","casimiro","catalina","catrina","cayetano","cecilia","celia","cesar","chaxiraxi","chema","citlali","clara","claudia","claudio","clotilde","cobura","concepcion","consolacion","consuelo","cornelio","covadonga","cristina","cristobal","cruz","cruz","dalila","damaso","damian","daniel","daniela","daritza","david","dayana","debora","delia","derque","desamparados","diana","diego","dionisia","dionisio","dolores","dominga","domingo","dorotea","echedey","edgar","edgardo","edmundo","eduardo","efren","egidio","elena","elias","elisa","eliseo","eloy","elvira","emanuel","emelda","emilia","emilio","encarnacion","enka","enrique","enriqueta","ernestina","ernesto","esperanza","estanislao","esteban","estefania","estela","ester","esther","eufemia","eugenia","eugenio","eulalia","eva","ezequiel","fabian","fabiana","fabio","fabricia","fabricio","facunda","facundo","fadrique","federico","feliciana","feliciano","felicidad","felipa","felipe","felisa","fermin","fermina","fernan","fernanda","fernando","ferrando","fidel","filomena","firjas","flavia","flora","florencia","floria","florio","floro","francisco","franco","frida","froila","froilan","froilana","fulberta","fulberto","fulca","fulco","gabriel","gabriela","gara","gema","genaro","german","gershu","gilberto","ginebra","gines","gonzalo","graciela","gregorio","guadalupe","guadalupe","guillermina","guillermo","gustavo","hanagua","haydee","hector","hernando","hilda","hipolito","hortensia","hugo","humberto","ignacio","ilda","imelda","inaki","ines","inigo","inmaculada","irene","ireneo","isaac","isabel","isidoro","isidro","ismael","itahisa","ivan","jacinta","jacinto","jacobo","jacqueline","jaime","jairo","javier","javiera","jesus","jimena","joaquin","joaquina","jonay","jorge","jorgelina","jose","josefa","josefina","josue","juan","juana","juanca","juanfran","juano","julian","juliana","julieta","julio","justin","justo","karina","kebehi","ladislao","laura","lea","leandro","leire","leon","leonardo","leonor","leopoldo","leticia","lia","lidia","lilia","liliana","lope","lorena","lorenza","lorenzo","lourdes","lucas","lucia","luciana","luciano","luis","luisa","luna","luz","macarena","magdalena","maite","manuel","manuela","marcela","marcelina","marcelino","marcelo","marcial","marcos","margarita","maria","mariana","mariano","maribel","marina","mario","marta","martin","martina","mateo","matias","matilde","maximo","mayte","meagens","mercedes","micaela","miguel","miguela","milagros","mireia","mirella","mireya","modesta","modesto","moises","monica","montserrat","murillo","narcisa","narciso","natalia","natalio","natan","natan","natividad","nerea","nicolas","nicolau","nieves","nilda","noelia","noemi","nuria","ofelia","olga","ordono","oriol","oscar","oswaldo","pablito","pablo","paqui","pascual","pascuala","patricia","patricio","paula","paulette","paulina","paulito","paz","pedro","pelayo","piedad","pilar","pio","purificacion","rafael","rafaela","raimunda","raimundo","ramira","ramiro","ramon","ramona","raquel","raul","rebeca","remedios","renato","ricarda","ricardo","roberto","rocio","rodolfa","rodolfo","rodrigo","rogelio","rosa","rosalia","rosario","roxana","ruben","rut","ruth","ruy","salomon","salvador","samuel","sancho","sandra","santi","santiago","sara","saul","sebastian","segundo","selena","serafina","sergio","silvia","silvio","simon","sofia","soledad","sonia","soraya","susana","tadeo","tania","teodora","teodoro","teofilo","teresa","thiare","tiare","timoteo","tito","tomas","tomasa","triana","trinidad","tristan","trysta","ulises","ulrica","unai","ursula","valentin","valentina","vane","vanesa","veronica","vicenta","vicente","victoria","violeta","virginia","vito","ximena","yago","yesenia","yolanda","zulma"];
TrainingDatas["Star Names"] = ["acamar","achernar","achird","acrab","acrux","acubens","adhafera","adhara","ain","aladfar","alamak","alathfar","alaraph","albaldah","albali","albireo","alchiba","alcor","alcyone","aldebaran","alderamin","aldhafera","aldhibah","aldib","alfirk","algedi","algenib","algenib","algieba","algol","algorab","alhajoth","alhena","alioth","alkaid","alkalurops","alkes","alkurah","almach","alnasl","alnilam","alnitak","alniyat","alphard","alphecca","alpheratz","alrai","alrakis","alrami","alrischa","alsafi","alsciaukat","alshain","alshat","altair","altais","altarf","alterf","aludra","alwaid","alya","alzir","ancha","angetenar","ankaa","antares","arcturus","arich","arided","arkab","armus","arneb","arrakis","ascella","asellus","ashlesha","askella","aspidiske","asterion","asterope","atik","atlas","atria","auva","avior","azaleh","azelfafage","azha","azimech","azmidiske","baham","baten","becrux","beid","bellatrix","benetnasch","betelgeuse","botein","brachium","canopus","capella","caph","caphir","castor","castula","celbalrai","celaeno","chara","chara","cheleb","chertan","coxa","caiam","cursa","cynosura","dabih","decrux","deneb","denebola","dheneb","diadem","diphda","dnoces","dschubba","dubhe","duhr","edasich","electra","elmuthalleth","elnath","eltanin","enif","errai","etamin","fomalhaut","furud","gacrux","gatria","gemma","gianfar","giedi","giennah","girtab","gomeisa","gorgonea","graffias","grafias","grassias","grumium","hadar","hadir","haedus","haldus","hamal","hassaleh","hydrus","heka","heze","hoedus","homam","hyadum","hydrobius","izar","jabbah","jih","kabdhilinan","kaffaljidhma","kajam","kastra","keid","kitalpha","kleeia","kochab","kornephoros","kraz","ksora","kuma","lesath","maasym","mahasim","maia","marfark","marfik","markab","matar","mebsuta","media","megrez","meissa","mekbuda","menchib","menkab","menkalinan","menkar","menkent","menkib","merak","merga","merope","mesarthim","miaplacidus","mimosa","minchir","minelava","minkar","mintaka","mira","mirach","miram","mirfak","mirzam","misam","mizar","mothallah","muliphein","muphrid","murzim","naos","nash","nashira","navi","nekkar","nembus","neshmet","nihal","nunki","nusakan","okul","peacock","phact","phad","pherkad","pherkard","pleione","pollux","porrima","praecipua","procyon","propus","proximacentauri","pulcherrim","rana","rasalas","rastaban","regor","regulus","rigel","rotanev","ruchba","ruchbah","rukbat","sabik","sadachbia","sadalbari","sadalmelik","sadalsuud","sadatoni","sadira","sadr","sadlamulk","saiph","saiph","salm","sargas","sarin","sceptrum","scheat","scheddi","schedar","segin","seginus","sham","shaula","sheliak","sheratan","sinistra","sirius","situla","skat","spica","sterope","sualocin","subra","suhail","suhel","sulafat","sol","syrma","tabit","tarazet","taygeta","terebellum","thabit","theemin","unukalhai","vega","vindemiatrix","wasat","wei","wezen","wezn","yildun","zaniah","zaurak","zavijava","zedaron","zelphah","zibal","zosma","zubenelgenubi","zubenelgubi","zubeneschemali","zubenhakrabi"];
TrainingDatas["Swedish Forenames"] = ["adam","adrian","agnes","albin","alex","alexander","alfred","ali","alice","alicia","alma","alva","alvin","amanda","amelia","anna","anton","aron","arvid","astrid","august","axel","benjamin","carl","casper","celine","charlie","colin","cornelia","daniel","dante","david","ebba","ebbe","eddie","edith","edvin","edward","elias","elin","elina","elis","elisa","elise","ella","ellen","ellie","ellinor","elliot","elsa","elton","elvin","elvira","emelie","emil","emilia","emma","emmy","erik","ester","felicia","felix","filip","filippa","frank","freja","gabriel","greta","gustav","hampus","hanna","harry","hedda","henry","hilda","hilma","hjalmar","hugo","ida","ines","ingrid","iris","isabella","isabelle","isak","ivar","jack","jacob","jasmine","joel","john","joline","jonathan","josef","julia","julian","juni","kevin","klara","leah","leia","leo","leon","liam","lilly","linn","linnea","linus","lisa","liv","livia","loke","loui","lova","love","lovis","lovisa","lucas","ludvig","luna","lykke","maja","majken","malte","maria","matilda","matteo","max","maximilian","meja","melissa","melker","melvin","milo","milton","minna","mio","mira","moa","mohamed","molly","my","märta","nathalie","nellie","neo","nicole","nils","noah","noel","nora","nova","novalie","oliver","olivia","olle","oscar","otto","rasmus","ronja","rut","saga","sally","sam","samuel","sara","sebastian","selma","sigge","signe","sigrid","simon","siri","sixten","sofia","stella","stina","svante","svea","tage","thea","theo","theodor","tilda","tilde","tindra","tuva","tyra","valter","vera","victoria","vidar","viggo","viktor","vilgot","ville","vincent","wilhelm","william","wilma","wilmer"];
TrainingDatas["Theological Angels"] = ["abaddon","abathar","adriel","ahriman","ambriel","amesha","anael","angel","arariel","archangel","ariel","azazel","azrael","barachiel","bene","camael","cassiel","cherub","cherubim","daniel","dardail","dominions","dumah","eremiel","gabriel","gadreel","grigori","hadraniel","hahasiah","hamalat","haniel","harut","hashmal","hesediel","imamiah","israfil","jegudiel","jehoel","jequn","jerahmeel","jophiel","kerubiel","kiraman","kushiel","leliel","lucifer","maalik","marut","mebahiah","metatron","michael","muaqqibat","munkar","muriel","nakir","nanael","netzach","nithael","nuriel","pahaliah","penemue","phanuel","powers","poyel","principalities","puriel","qaphsiel","raguel","raphael","raziel","remiel","sachiel","samael","sandalphon","sariel","schemhampharae","selaphiel","seraph","seraphiel","seraphim","shamsiel","simiel","temeluchus","tennin","thrones","tzaphqiel","uriel","uzziel","vehuel","virtues","wormwood","zachariel","zadkiel","zaphkiel","zephon","zophiel"];
TrainingDatas["Theological Demons"] = ["abaddon","abezethibou","abraxas","abyzou","adramelech","aeshma","agaliarept","agares","agiel","agrat","ahriman","aim","aka","ala","alal","alastor","allocer","alloces","allu","amaymon","amdusias","amy","anamalech","ancitif","andhaka","andras","andrealphus","andromalius","angra","antichrist","anzu","apollyon","archon","armaros","arunasura","asag","asakku","asbel","asmodai","asmodeus","astaroth","asura","azazel","azi","baal","babi","bael","bakasura","balam","balberith","bali","banshee","baphomet","barbas","barbatos","barong","bathin","bathym","beelzebub","behemoth","beherit","beleth","belial","belphegor","berith","bhūta","bifrons","boruta","botis","buer","bukavac","bune","bushyasta","caacrinolaas","caassimolar","cain","canio","cerbere","charun","chax","chemosh","choronzon","cimeies","cimejes","classyalabolas","corson","crocell","culsu","daeva","dagon","dajjal","danjal","dantalion","davy","decarabia","demiurge","demogorgon","devil","drekavac","dzoavits","eblis","eisheth","eligos","flauros","flavros","focalor","foraii","foras","forcas","forcas","forneus","furcas","furfur","gaap","gaderel","gaki","gamigin","ghoul","glasya","gomory","gorgon","gremory","grigori","gualichu","guayota","gusion","gusoin","gusoyn","haagenti","haborym","halphas","hantu","hauras","haures","havres","ifrit","incubus","ipes","ipos","jikininki","jinn","kabandha","kabhanda","kali","kasadya","killakee","kimaris","kokabiel","krampus","kroni","kumbhakarna","lechies","legion","lempo","leraie","leraje","leviathan","leyak","lili","lilim","lilin","lilith","lucifer","lucifuge","malaphar","malephar","malphas","malthus","mammon","mara","marax","marchosias","maricha","marthim","masih","mastema","mathim","mephistopheles","merihem","moloch","morax","morpheus","murmur","naamah","naberius","naberus","namtar","ninurta","onoskelis","orcus","orias","oriax","ornias","orobas","ose","paimon","pazuzu","pelesit","penemue","phenex","pithius","pocong","pontianak","procell","pruflas","puloman","rahab","rakshasa","rangda","raum","ravan","ronove","rusalka","sabnock","saleos","samael","satan","seir","semyaz","shax","shedim","sitri","solas","sthenno","stolas","suanggi","succubus","surgat","tannin","toyol","tuchulcha","ukobach","valac","valefar","vanth","vapula","vassago","vepar","vine","wendigo","xaphan","xezbeth","yeqon","yeterel","zagan","zepar","ziminiar","ördög"];
TrainingDatas["Tolkienesque Forenames"] = ["abattârik","adalgrim","adanedhel","adanel","adrahil","adûnakhôr","aegnor","aerin","agarwaen","aikanáro","aiwendil","alatar","alatáriel","alcarin","aldamir","aldarion","aldaron","aldor","alfwine","amandil","amandil","amdír","amlaith","amras","amrod","amroth","amrothos","anairë","anardil","anborn","ancalagon","ancalimon","ancalimë","andrast","andreth","andróg","anducal","anfauglir","angbor","angrod","annatar","anárion","arador","araglas","aragorn","aragost","arahad","arahael","aranarth","arantar","aranuir","araphant","araphor","arassuil","aratan","aratar","arathorn","araval","aravir","aravorn","aredhel","argeleb","argon","argonui","arien","aros","arthedain","arthedain","arvedui","arvegil","arveleg","arwen","asfaloth","atanamir","atanatar","aulë","ausir","avranc","azaghâl","azog","baldor","balin","baragund","barahir","barahir","baran","bard","barliman","bauglir","belecthor","beleg","belegorn","belegund","belemir","belladonna","beorn","bereg","beregond","beren","bergil","bert","berylla","berúthiel","berúthiel","bifur","bofur","boldog","bolg","bolger","bombadil","bombur","borin","boromir","boron","borondir","brand","brandir","brego","bregolas","bregor","brodda","brytta","bucca","bëor","bór","calembel","calimehtar","calion","calmacil","calmacil","caranthir","carcharoth","castamir","celeborn","celebrimbor","celebrindor","celebrían","celegorm","celepharn","cemendur","ceorl","cirion","ciryaher","ciryandil","ciryatan","ciryon","cotton","curufin","curunír","círdan","daeron","denethor","dernhelm","deórwine","dior","dori","dorlas","draugluin","duilin","durin","dwalin","dáin","déagol","déor","dís","ecthelion","egalmoth","eilinel","elanor","elbereth","eldacar","eldarion","elemmakil","elendil","elendor","elendur","elenna","elenwë","elessar","elfhelm","elfhild","elfwine","elladan","elmar","elmo","elrohir","elrond","elros","elu","elven","elwing","elwë","emeldir","emerië","enel","enelyë","eorl","eradan","erendis","erestor","erkenbrand","estel","estelmo","estë","eärendil","eärendur","eärnil","eärnur","eärwen","eöl","eönwë","falassion","faniel","faramir","fastred","felaróf","fengel","ferumbras","finarfin","findis","finduilas","finduilas","fingolfin","fingon","finrod","finvain","finwë","folcwine","fortinbras","freca","frerin","fréa","fréaláf","fréawine","frór","fuinur","fundin","fëanor","fíli","fíriel","galador","galadriel","galdor","gamil","gamling","gandalf","gerontius","ghânburi","gildor","gilgalad","gilrain","gimilkhâd","gimilzôr","gimli","ginglith","girion","glanhír","glaurung","glorfindel","glóin","glóredhel","goldberry","goldwine","golfimbul","gollum","gorbag","gorlim","gormadoc","gorthaur","gothmog","gram","grimbold","grishnákh","gríma","grór","gwaihir","gwathir","gwindor","hador","halbarad","haldad","haldan","haldar","haldir","haleth","hallas","halmir","handir","hardang","hareth","helm","herion","herucalmo","herumor","herunúmen","hirgon","hiril","hostamir","huan","hundar","huor","hyarmendacil","háma","húrin","ibûn","idril","ilmarë","ilúvatar","ilúvatar","imbar","imin","iminyë","imrahil","indis","inglor","ingwë","inziladûn","inzilbêth","irimë","irmo","isildur","isilmo","isilmë","isumbras","ivriniel","khamûl","khîm","king","kíli","kúvion","lagduf","lalaith","legolas","lenwë","lindir","lobelia","lotho","lugdush","lurtz","léod","lúthien","mablung","maedhros","maeglin","maglor","magor","mahtan","maiar","malach","mallor","malvegil","manthor","manwë","marach","mauhúr","meleth","melian","meneldil","meneldur","meriadoc","minalcar","minardil","minastir","minyatur","mithrandir","morgoth","morwen","morwen","muzgash","mírielar","mírielserindë","mîm","nahar","narmacil","narvi","nerdanel","nessa","nienna","nienor","nimloth","nimrodel","nori","náin","námo","níniel","nólimon","nóm","ohtar","olwë","olórin","ondoher","ori","ornendil","orodreth","oromë","oropher","orophin","ossë","ostoher","paladin","palantir","pallando","pelendur","pengolodh","peregrin","pervinca","pharazôn","primula","radagast","rían","rómendacil","rúmil","sador","saeros","sakalthôr","salgant","salmar","saruman","sauron","scatha","shadowfax","shagrat","shelob","silmariën","singollo","siriondil","smaug","sméagol","snowmane","soronto","strider","súrion","tarannon","tarcil","tarondor","tata","tatië","telchar","telemmaitë","telemnar","telperiën","telumehtar","thengel","thingol","thorin","thorondir","thorondor","thranduil","thráin","thrór","théoden","théodred","théodwyn","tilion","tindomiel","tinúviel","tulkas","tuor","turambar","turgon","túrin","ufthak","uglúk","uinen","uldor","ulfang","ulfast","ulmo","ulwarth","umbardacil","undómiel","ungoliant","uolë","urwen","vairë","valacar","valandil","valandur","vanimeldë","varda","vardamir","vidugavia","vidumavi","vinyarion","vorondil","voronwë","voronwë","vána","walda","wormtongue","yavanna","yávien","zimraphel","zimraphel","zimrathôn","éomer","éomund","éothain","éothéod","éowyn","írildë","óin"];
TrainingDatas["Troll Forenames"] = ["feferi","damara","rufio","mituna","kankri","meulin","porrim","latula","aranea","horuss","kurloz","cronus","meenah","mierfa","nektan","xefros","diemen","fozzer","marsti","skylla","vikare","chixie","zebede","folykl","kuprum","cirava","azdaja","charun","polypa","boldir","konyyl","daraya","lynera","wanshi","bronya","lanque","tegiri","tirona","tagora","stelsa","mallek","ardata","remele","nihkee","amisia","galekh","zebruh","barzum","baizli","chahut","marvus","dammek","trizza",];
TrainingDatas["Troll Surnames"] = ["megido","nitram","captor","vantas","leijon","maryam","pyrope","serket","zahhak","makara","ampora","peixes","durgas","whelan","tritoh","xicali","velyes","houtek","koriga","ratite","roixmr","tongva","darane","maxlol","hermod","knelax","krojib","goezee","lamati","okimaw","jonjet","skalbi","adyata","ursama","bombyx","kalbur","kasund","gorjek","sezyat","adalov","carmia","namaaq","moolah","erdehn","xigisi","codakk","soleil","maenad","xoloto","elwurd","tethis",];
TrainingDatas["Werewolf Forenames"] = ["accalia","adalwolf","adalwolfa","adolpha","adolphus","amaguk","amarog","amoux","amwolf","ardolf","ardwolf","audolf","bardalph","bardolf","beowulf","biryuk","bleddyn","bledig","bleidd","bodolf","botewolf","botolf","botwolf","cana","canagan","chann","chanteloup","conall","conan","cuan","dolph","dolphus","ethelwulf","eyolf","faolan","farkas","felan","fenris","freki","fridolf","friduwulf","geirolf","guadalupe","gunnolf","honiahaka","hrolf","hrolleif","ingolf","ivaylo","landga","leidolf","leloo","lobo","loup","lowell","lupe","luperca","lupo","lupu","lupus","lyall","lykaios","maccon","maengun","maheegan","mahigan","maicoh","maiyun","makoce","mingan","mohegan","nashoba","nuntis","odolf","odwolfe","olcan","onai","phelan","radolf","raff","ralph","rand","randale","randall","randi","randolph","ranulfo","raoul","raul","rendall","reule","rezso","rodolfo","rolf","rudi","rudolph","sandalio","seff","shunkaha","singarti","sirhaan","sköll","susi","tala","tasha","tate","tchono","toralu","udolf","udolph","ujku","ulf","ulfred","ulger","ullok","ulmar","ulmer","ulric","ulvelaik","uwais","varg","velvel","vilkas","vilks","vuk","vukasin","weylyn","wolfgang","wolfram","wolfrik","woolsey","wulfgar","ylva"];
Main.WEBSITE_URL = "http://www.samcodes.co.uk/project/markov-namegen/";
Main.main();
})();
